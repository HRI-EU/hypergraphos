{
  "dslNameList": [
    "DefaultDSL",
    "HierarchyDSL",
    "ThinkingDSL",
    "TextLabelsDSL",
    "CodeFlowDSL",
    "ConnectorsDSL",
    "PicturesDSL",
    "TreeDSL",
    "KanbanDSL",
    "DataFlowDSL"
  ],
  "view": {
    "scale": 0.44125280318919663,
    "position": [
      9759.521430529912,
      -9306.78407354554
    ],
    "isGridOn": true
  },
  "model": "{ \"class\": \"GraphLinksModel\",\n  \"copiesArrays\": true,\n  \"copiesArrayObjects\": true,\n  \"copiesKey\": false,\n  \"linkKeyProperty\": \"key\",\n  \"linkFromPortIdProperty\": \"fromPort\",\n  \"linkToPortIdProperty\": \"toPort\",\n  \"nodeDataArray\": [\n{\"label\":\"API Keys\",\"category\":\"DataFlow_Param\",\"size\":\"460 80\",\"props_\":[{\"name\":\"ChatGPT\",\"value\":\"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\"}],\"key\":18,\"location\":\"17490 -8680\"},\n{\"label\":\"SMILE Paper\",\"category\":\"TextLabels_Size6\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"2480 120\",\"key\":20,\"location\":\"14950 -8600\",\"font\":\"250px sans-serif\"},\n{\"label\":\"Model\",\"size\":\"180 60\",\"category\":\"Hierarchy_Model\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphModel$\",\"key\":156,\"location\":\"14290 -8660\"},\n{\"label\":\"Selection\",\"size\":\"180 60\",\"category\":\"Hierarchy_Selection\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphSelection$\",\"key\":157,\"location\":\"14290 -8590\"},\n{\"label\":\"Graph Info\",\"category\":\"Hierarchy_GraphInfo\",\"size\":\"260 80\",\"color\":\"SkyBlue\",\"props_\":[{\"name\":\"Name\",\"value\":\"SMILE LLM-Based Planner\",\"valueChanged\":true},{\"name\":\"Version\",\"value\":\"2.8\",\"valueChanged\":true},{\"name\":\"Date\",\"value\":\"@getDate()\"},{\"name\":\"Path\",\"value\":\"./\"},{\"name\":\"Authors\",\"value\":\"Frankonello\"}],\"key\":158,\"location\":\"14590 -8680\"},\n{\"label\":\"Get API\",\"category\":\"DataFlow_TrigComponent\",\"size\":\"270 80\",\"buttons_\":[{\"name\":\"Update\",\"checked\":true}],\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"isPersistent\",\"value\":\"false\"}],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nlet result = '';\\n// Get input link list\\nconst inLinkDataList = Engine_getInputLinkDataList( nodeData, 'in' );\\n// If Input is connected\\nif( inLinkDataList && inLinkDataList.length ) {\\n  // Loop over in components\\n  for( const inLinkData of inLinkDataList ) {\\n    const inNodeKey = inLinkData.from;\\n    \\n    // Read data of fanIn components\\n    const inNodeData = getNodeData( inNodeKey );\\n    if( inNodeData && inNodeData.isFile ) {\\n      if( inNodeData.fileContent ) {\\n        const api = getAPI( inNodeData.fileContent );\\n        result = result+api;\\n      } else if( inNodeData.fileURL ) {\\n        loadNodeContent( inNodeData, (s)=>{\\n          result = result+getAPI( s );\\n          Engine_fireOutput( nodeData, 'out', result );\\n        });\\n      }\\n    }\\n  }\\n}\\n\\nEngine_fireOutput( nodeData, 'out', result );\\n\\nfunction getAPI( source ) {\\n  let result = '';\\n  if( source ) {\\n    // This regexp matches any function definition at the beginning of any line\\n    const expr = new RegExp( /\\\\nfunction\\\\s+(?<api>\\\\w+\\\\([^\\\\)]*\\\\))/g );\\n    const match = ('\\\\n'+source).matchAll( expr );\\n    const matchList = Array.from( match, (m)=> m.groups.api );\\n    result = result+matchList.join( '\\\\n' );\\n  }\\n  return( result );\\n}\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":425,\"location\":\"17620 -6310\"},\n{\"label\":\"Engine_selectNode( nodeData )\\nEngine_get( keyOrData, name, defaultValue )\\nEngine_set( keyOrData, name, value )\\nEngine_getProperty( nodeData, name, defaultValue )\\nEngine_getNodeDataValue( key, name, defaultValue )\\nEngine_isInputNew( nodeData, name )\\nEngine_getInput( nodeData, name, defaultValue )\\nEngine_setInput( nodeData, name, value )\\nEngine_getInputNameList( nodeData )\\nEngine_clearInputs( nodeData, nameList )\\nEngine_doRun()\\nEngine_doStep()\\nEngine_doPause()\\nEngine_fireOutput( nodeData, name, value )\\nEngine_fireOutputStep( nodeData, name, value )\\nEngine_fireOutputFlow( nodeData, name, value )\\nEngine_fireInput( nodeData, name, value )\\nEngine_isOutputConnected( nodeData, name )\\nEngine_isInputConnected( nodeData, name )\\nEngine_isSelfLoop( nodeData, inName )\\nEngine_applyTemplate( templateStr, values, isKeepUnmatchedValues )\\nEngine_executeAction( nodeData, actionName )\\nEngine_initNodeStatus()\\nEngine_loadModel()\\nEngine_initialize( nodeData )\\nEngine_updateEngineNode( key )\\nEngine_updateProperty( nodeData )\\nEngine_getNextStepData()\\nEngine_clearStep( stepInfo )\\nEngine_addStep( stepInfo )\\nEngine_getInputLinkDataList( nodeData, name )\\nEngine_getOutputLinkDataList( nodeData, name )\\nEngine_getComputeBarrier( nodeData )\\nEngine_updateInput( nodeData, name, value, inCondition )\\nDataFlowDSL_Template( nodeData )\\nDataFlowDSL_Concatenate( nodeData )\\nDataFlowDSL_Data( nodeData )\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"1880 1930\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":426,\"location\":\"18020 -6310\"},\n{\"label\":\"DataFlowDSL\",\"color\":\"orange\",\"size\":\"180 35\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"fileURL\":\"/fileServer/DSL/DataFlowDSL.js\",\"key\":431,\"location\":\"12730 -7900\",\"editorPosition\":[41,250,654,1699]},\n{\"label\":\"Root Function for Node Execution\",\"category\":\"TextLabels_Size3\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"363 107\",\"key\":419,\"location\":\"20700 -6290\"},\n{\"label\":\"Engine Compute Library 1.0\",\"color\":\"tan\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"//------------------------------\\n// Engine Compute Library\\n//------------------------------\\nfunction Engine_getOutput( data, name, defaultValue ) {\\n  let result = defaultValue;\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  if( ni.output[name] != undefined ) {\\n    result = ni.output[name];\\n  }\\n  return( result );\\n}\\nfunction Engine_getComputeBarrier( data ) {\\n  let result = [];\\n  const cb = graphData.me.getProperty( graphData.modelId, \\n                                       data,\\n                                       'computeBarrier',\\n                                       null );\\n  if( cb ) {\\n    result = cb.split( ',' ).map( n => n.trim() );\\n  } else {\\n    result = Engine_getInputNameList( data );\\n  }\\n  return( result );\\n}\\nfunction Engine_updateInput( data, name, value ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  // If doCompute just executed => reset inputs isNew state\\n  if( ni.isCompute ) {\\n    for( const inName in ni.inputState ) {\\n      ni.inputState[inName].isNew = false;\\n    }\\n  }\\n  \\n  // Set new input value\\n  Engine_setInput( data, name, value );\\n  \\n  let isCompute = true;\\n  // Get input names for barrier\\n  const inNameList = Engine_getComputeBarrier( data );\\n  for( const inName of inNameList ) {\\n    if( Engine_isInputConnected( data, inName ) ) {\\n      let isNewInput = false;\\n      if( ni.inputState[inName] ) {\\n        isNewInput = ni.inputState[inName].isNew;\\n      }\\n      isCompute &&= isNewInput;\\n      // Short cirtuit computation\\n      if( !isCompute ) {\\n        break;\\n      }\\n    }\\n  }\\n  // Update compute status\\n  ni.isCompute = isCompute;\\n}\\nfunction Engine_fireOutput( data, name, value ) {\\n  // Fire only connected outputs\\n  if( Engine_isOutputConnected( data, name ) ) {\\n    // Get node instance\\n    const ni = Engine_getNodeInstance( data );\\n    \\n    // Save output\\n    ni.output[name] = value;\\n  }\\n}\\nfunction Engine_doCompute( data ) {\\n  if( globalThis[ `${data.category}_doCompute`] ) {\\n    // Get all input values\\n    Engine_fetchInputs( data );\\n    // Execute compute fungion\\n    globalThis[ `${data.category}_doCompute`]( data );\\n  } else {\\n    console.log( 'Compute not found for', data.category );\\n  }\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":429,\"location\":\"20740 -6030\",\"isIncludeScript\":false,\"editorPosition\":[1379,958,704,1069]},\n{\"label\":\"Engine Base API 1.0\",\"color\":\"tan\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"//------------------------------\\n// Engine Base API\\n//------------------------------\\nfunction Engine_get( data, name, defaultValue ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Set default value if property did not exist\\n  if( ni.property[name] === undefined ) {\\n    ni.property[name] = defaultValue;\\n  }\\n  // Return property value\\n  return( ni.property[name] );\\n}\\nfunction Engine_set( data, name, value ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Set property value\\n  ni.property[name] = value;\\n}\\nfunction Engine_getInput( data, name, defaultValue ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Update default value\\n  if( ni.input[name] == undefined ) {\\n    ni.input[name] = defaultValue;\\n  }\\n  return( ni.input[name] );\\n}\\nfunction Engine_setInput( data, name, value ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Update value\\n  ni.input[name] = value;\\n  // Update state\\n  if( !ni.inputState[name] ) {\\n    ni.inputState[name] = {};\\n  }\\n  ni.inputState[name].isNew = true;\\n}\\nfunction Engine_setInputDefault( data, defaultValue ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  // Get list of input names\\n  const inNameList = Engine_getInputNameList( data );\\n  for( const inName of inNameList ) {\\n    if( ni.input[inName] == undefined ) {\\n      ni.input[inName] = defaultValue;\\n    }\\n  }\\n}\\nfunction Engine_getLanguage( data ) {\\n  let result = 'text';\\n  if( data.fileType ) {\\n    const [format, language] = data.fileType.split( '/' );\\n    result = language;\\n  }\\n  return( result );\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":430,\"location\":\"20740 -5890\",\"isIncludeScript\":false,\"editorPosition\":[3268,773,528,1240]},\n{\"label\":\"Engine Base Library 1.0\",\"color\":\"tan\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"//------------------------------\\n// Engine Base Library\\n//------------------------------\\n\\n// Initialize Engine\\nif( !graphData.nodeInstance ) {\\n  Engine_updateGraphModel();\\n  Engine_clearNodeInstance();\\n}\\n\\n//------------------------------\\n// Engine Base Library\\n//------------------------------\\nfunction Engine_updateGraphModel() {\\n  graphData.g = getMainGraph();\\n  graphData.modelId = 'main';\\n  \\n  // Initialize model navigation\\n  const model = graphData.g.getJSONModel();\\n  graphData.me = new ModelExplorer();\\n  graphData.me.setJSONModel( graphData.modelId, model );\\n}\\nfunction Engine_getNodeInstance( data ) {\\n  // If node not existing => create it\\n  if( !graphData.nodeInstance[data.key] ) {\\n    graphData.nodeInstance[data.key] = {\\n      property: {},\\n      input: {},\\n      inputState: {},\\n      output: {},\\n      isCompute: false,\\n    };\\n  }\\n  // Return node instance\\n  return( graphData.nodeInstance[data.key] );\\n}\\nfunction Engine_clearNodeInstance() {\\n  // Persistent link data for nodes\\n  graphData.nodeInstance = {};\\n  graphData.engineInstance = {\\n    currNodeSelectionKey: -1, // Animation\\n  };\\n}\\nfunction Engine_isNodeEnabled( data ) {\\n  let result = true;\\n  if( data.isGroup ) {\\n    result = ( ( data.color == undefined ) || ( data.color.toLowerCase() == 'green' ) );\\n  } else if( data.group !== undefined ) {\\n    const gData = graphData.me.getNode( graphData.me.modelId, data.group );\\n    result = ( gData && ( gData.color.toLowerCase() == 'green' ) );\\n  }\\n  return( result );\\n}\\nfunction Engine_getInputLinkDataList( data, name ) {\\n  const result = [];\\n  const pushInDataList = ()=> {\\n    // Get input link from port name\\n    const inDataList = graphData.me.getLinkListFanInByNodeKey( graphData.modelId, \\n                                                     data.key,\\n                                                     name );\\n    for( const inData of inDataList ) {\\n      if( Engine_isNodeEnabled( inData ) ) {\\n        result.push( inData );\\n      }\\n    }\\n  };\\n  \\n  // Check if name exist\\n  if( data.in_ ) {\\n    for( const inInfo of data.in_ ) {\\n      if( inInfo.portId == name ) {\\n        pushInDataList();\\n        break;\\n      }\\n    }\\n  } else {\\n    name = undefined;  // No input name in this case\\n    pushInDataList();\\n  }\\n  return( result );\\n}\\nfunction Engine_getOutputLinkDataList( data, name ) {\\n  const result = [];\\n  const pushOutDataList = ()=> {\\n    // Get output link from port name\\n    const outDataList = graphData.me.getLinkListFanOutByNodeKey( graphData.modelId,\\n                                                    data.key,\\n                                                    name );\\n    for( const outData of outDataList ) {\\n      if( Engine_isNodeEnabled( outData ) ) {\\n        result.push( outData );\\n      }\\n    }\\n  };\\n  \\n  // Check if name exist\\n  if( data.out_ ) {\\n    for( const outInfo of data.out_ ) {\\n      if( outInfo.portId == name ) {\\n        pushOutDataList();\\n        break;\\n      }\\n    } \\n  } else {\\n    name = undefined; // No input name in this case\\n    pushOutDataList();\\n  }\\n  return( result );\\n}\\nfunction Engine_fetchInputs( data ) {\\n  const storeValue = ( data, fromInName, toInName, defaultValue )=> {\\n    const inLinkList = graphData.me.getLinkListFanInByNodeKey( graphData.modelId,\\n                                                            data.key,\\n                                                            fromInName );\\n    for( const inLink of inLinkList ) {\\n      // Get source node\\n      const outData = graphData.me.getNode( graphData.me.modelId, inLink.from );\\n      \\n      if( Engine_isNodeEnabled( outData ) ) {\\n        const value = Engine_getOutput( outData, inLink.fromPort, defaultValue );\\n        Engine_setInput( data, toInName, value );\\n        break;\\n      }\\n    }\\n  }\\n  // Loop over all connected inputs\\n  const inNameList = Engine_getInputNameList( data, true );\\n  // Case of component with input ports\\n  if( inNameList.length ) {\\n    for( const inName of inNameList ) {\\n      // Store in input inName the first enabled link value comming into it\\n      storeValue( data, inName, inName, null );\\n    }\\n  } else {\\n    // Case of component without input ports\\n    // Store in input '*' the first enabled link value comming into it\\n    storeValue( data, undefined, '*', undefined );\\n  }\\n}\\nfunction Engine_isInputConnected( data, name ) {\\n  // Get input link list\\n  const list = Engine_getInputLinkDataList( data, name );\\n  // If input is connected\\n  return( list && list.length )\\n}\\nfunction Engine_isOutputConnected( data, name ) {\\n  // Get output link list\\n  const list = Engine_getOutputLinkDataList( data, name );\\n  // If output is connected\\n  return( list && list.length )\\n}\\nfunction Engine_getInputNameList( data, isOnlyConnected ) {\\n  const result = []\\n  if( data.in_ ) {\\n    for( const inInfo of data.in_ ) {\\n      const name = inInfo.portId;\\n      // If we want only connected one => skip unconnected one\\n      if( ( isOnlyConnected != undefined ) && isOnlyConnected ) {\\n        if( !Engine_isInputConnected( data, name ) ) {\\n          continue;\\n        }\\n      }\\n      result.push( name );\\n    }\\n  }\\n  return( result );\\n}\\nfunction Engine_getOutputNameList( data, isOnlyConnected ) {\\n  const result = []\\n  if( data.out_ ) {\\n    for( const outInfo of data.out_ ) {\\n      const name = outInfo.portId;\\n      // If we want only connected one => skip unconnected one\\n      if( ( isOnlyConnected != undefined ) && isOnlyConnected ) {\\n        if( !Engine_isOutputConnected( data, name ) ) {\\n          continue;\\n        }\\n      }\\n      result.push( name );\\n    }\\n  }\\n  return( result );\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":432,\"location\":\"20740 -6170\",\"isIncludeScript\":false,\"editorPosition\":[1113,640,552,964]},\n{\"label\":\"GenerationRoot Library 1.0\",\"color\":\"orange\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"\\nfunction generationRoot( startNodeData, onGenerated ) {\\n  console.log( 'Generating...' );\\n  \\n  // Setup graph information\\n  if( !graphData.startNodeData ) {\\n    // Generation Info\\n    graphData.startNodeData = startNodeData;\\n    graphData.onGenerated = onGenerated;\\n    // Initialize graph info\\n    graphData.g = getMainGraph();\\n    graphData.modelId = 'main';\\n  }\\n\\n  // Info already set, let's start\\n  startGeneration();\\n}\\nfunction startGeneration() {\\n  // Initialize tempalte generator\\n  if( !graphData.lbg ) {\\n    graphData.lbg = new LineBlockGenerator();\\n  }\\n  \\n  // Reset counters\\n  graphData.count = {\\n    fileCount: 0,\\n    dirCount: 0,\\n    nodeCount: 0,\\n  };\\n  // Reset nodeInstance data (input/outputs)\\n  Engine_clearNodeInstance();\\n  \\n  // Initialize model navigation\\n  const model = graphData.g.getJSONModel();\\n  graphData.me = new ModelExplorer();\\n  graphData.me.setJSONModel( graphData.modelId, model );\\n  \\n  // Initialize Template Manager\\n  graphData.lb = new LineBlockGenerator();\\n  \\n  // Get deployment node\\n  graphData.isOverwrite = graphData.me.getProperty( graphData.modelId, \\n                                                    graphData.startNodeData, \\n                                                    'isOverwrite', true );\\n  \\n  // Get output link from name port\\n  const outDataList = graphData.me.getNodeListFanOutByNodeKey( graphData.modelId, \\n                                                               graphData.startNodeData.key );\\n\\n  // Loop over out nodes\\n  for( const outData of outDataList ) {\\n    if( outData.isGroup ) {\\n      if( !Engine_isNodeEnabled( outData ) ) {\\n        continue;\\n      }\\n    }\\n    // Count dir\\n    ++graphData.count.dirCount;\\n    // Generate group\\n    generateGroup( outData );\\n  }\\n    \\n  // Simulation of done\\n  setTimeout( generationDone, 2*1000 );\\n}\\nfunction generationDone() {\\n  if( graphData.onGenerated ) {\\n    const msg = `Dirs: ${graphData.count.dirCount} - `+\\n                `Files: ${graphData.count.fileCount} - `+\\n                `Nodes: ${graphData.count.nodeCount}`;\\n    graphData.onGenerated( msg );\\n  }\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":437,\"location\":\"20420 -6160\",\"isIncludeScript\":false,\"editorPosition\":[15,785,592,1289]},\n{\"label\":\"Engine Code 1.4\",\"color\":\"orange\",\"size\":\"290 140\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"fileURL\":\"/fileServer/01/72.js\",\"key\":443,\"location\":\"17230 -6310\",\"isIncludeScript\":true,\"editorPosition\":[1183,142,656,1247]},\n{\"label\":\"Prima mi hai chiesto dove si trova la capitale d'Italia.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"1820 220\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":447,\"location\":\"14920 -7810\",\"group\":455},\n{\"label\":\"Data\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"isPersistent\",\"value\":\"false\"}],\"isFile\":true,\"fileContent\":\"Where is the capital of Italy located?\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":452,\"location\":\"14200 -7600\",\"editorPosition\":[1444,1144,400,350],\"group\":455},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":454,\"location\":\"14000 -7600\",\"group\":455},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":444,\"location\":\"14000 -8000\",\"group\":455},\n{\"label\":\"Data\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"From now on, alway answer in italian language.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":445,\"location\":\"14200 -8000\",\"editorPosition\":[1438,800,402,97],\"group\":455},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":446,\"location\":\"14000 -7500\",\"group\":455},\n{\"label\":\"Data\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"isPersistent\",\"value\":\"false\"}],\"isFile\":true,\"fileContent\":\"What did I asked you before?\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":448,\"location\":\"14200 -7500.200000000001\",\"group\":455},\n{\"label\":\"From now on, alway answer in italian language.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"2250 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":450,\"location\":\"14490 -8000\",\"group\":455},\n{\"label\":\"Where is the capital of Italy located?\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"2250 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":451,\"location\":\"14490 -7600\",\"group\":455},\n{\"label\":\"What did I asked you before?\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"2250 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":453,\"location\":\"14490 -7500\",\"group\":455},\n{\"label\":\"Example of ChatGPT\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":455,\"location\":\"13980 -7750\",\"font\":\"75px sans-serif\"},\n{\"label\":\"Add history\",\"category\":\"DataFlow_Template\",\"size\":\"270 100\",\"color\":\"#ff8093\",\"in_\":[{\"portId\":\"history\",\"name\":\"history\"},{\"portId\":\"assistant\",\"name\":\"assistant\"},{\"portId\":\"user\",\"name\":\"user\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"isPersistent\",\"value\":\"false\"},{\"name\":\"computeBarrier\",\"value\":\"user\",\"valueChanged\":\"true\"}],\"isFile\":true,\"fileContent\":\"In this template we have history content:\\n<history>\\n\\nThen we have user content:\\n<user>\\n\\nThen we have the assistant content:\\n<assistant>\\n\\nThis is it :-)\",\"fileTypeName\":\"Template\",\"key\":449,\"location\":\"14650 -6940\",\"editorPosition\":[918,39,712,140],\"group\":456},\n{\"label\":\"AI component\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"unit\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"var nodeData;\\n\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":457,\"location\":\"12820 -6700\"},\n{\"label\":\"Data\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"This is the HISTORY.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":460,\"location\":\"14210 -7110.200000000001\",\"editorPosition\":[1438,800,402,97],\"group\":456},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":461,\"location\":\"14010 -7110\",\"group\":456},\n{\"label\":\"This is the HISTORY.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"740 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":463,\"location\":\"14560 -7170\",\"group\":456},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":466,\"location\":\"14010 -7010\",\"group\":456},\n{\"label\":\"Data\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"This is the ASSISTANT text.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":467,\"location\":\"14210 -7010.200000000001\",\"editorPosition\":[1438,800,402,97],\"group\":456},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":470,\"location\":\"14010 -6900\",\"group\":456},\n{\"label\":\"Data\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"This is the USER request.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":471,\"location\":\"14210 -6900.200000000001\",\"editorPosition\":[1438,800,402,97],\"group\":456},\n{\"label\":\"This is the ASSISTANT text.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"750 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":458,\"location\":\"14560 -7070\",\"group\":456},\n{\"label\":\"This is the USER request.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"740 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":459,\"location\":\"14570 -6810\",\"group\":456},\n{\"label\":\"In this template we have history content:\\nThis is the HISTORY.\\n\\nThen we have user content:\\nThis is the USER request.\\n\\nThen we have the assistant content:\\nThis is the ASSISTANT text.\\n\\nThis is it :-)\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"980 520\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":464,\"location\":\"15380 -6980\",\"group\":456},\n{\"label\":\"Example of Template Generator\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":456,\"location\":\"13990 -6980\",\"font\":\"75px sans-serif\"},\n{\"label\":\"Example of Concatenation\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":462,\"location\":\"14000 -6230\",\"font\":\"75px sans-serif\"},\n{\"label\":\"Data\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"This is the HISTORY.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":468,\"location\":\"14219.999658818393 -6350.300464758519\",\"editorPosition\":[1438,800,402,97],\"group\":462},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":469,\"location\":\"14020 -6350\",\"group\":462},\n{\"label\":\"This is the HISTORY.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"740 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":472,\"location\":\"14570 -6420\",\"group\":462},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":473,\"location\":\"14020 -6250\",\"group\":462},\n{\"label\":\"Data\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"This is the ASSISTANT text.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":474,\"location\":\"14219.999658818393 -6250.300464758519\",\"editorPosition\":[1438,800,402,97],\"group\":462},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":475,\"location\":\"14020 -6140\",\"group\":462},\n{\"label\":\"Data\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"This is the USER request.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":476,\"location\":\"14219.999658818393 -6140.300464758519\",\"editorPosition\":[1438,800,402,97],\"group\":462},\n{\"label\":\"This is the ASSISTANT text.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"750 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":477,\"location\":\"14570 -6330\",\"group\":462},\n{\"label\":\"This is the USER request.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"740 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":478,\"location\":\"14580 -6050\",\"group\":462},\n{\"label\":\"This is the HISTORY.\\nThis is the ASSISTANT text.\\nThis is the USER request.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"980 520\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":479,\"location\":\"15390 -6230\",\"group\":462},\n{\"label\":\"\",\"category\":\"DataFlow_Concatenate\",\"color\":\"lightseagreen\",\"in_\":[{\"portId\":\"in0\",\"name\":\"in0\"},{\"portId\":\"in1\",\"name\":\"in1\"},{\"portId\":\"in2\",\"name\":\"in2\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":481,\"location\":\"14720 -6180.1\",\"group\":462},\n{\"label\":\"Folder Content\",\"size\":\"150 100\",\"category\":\"Hierarchy_FolderContent\",\"fileType\":\"text/json\",\"isDir\":true,\"fileURL\":\"/fileServer/upload/oldTest.json\",\"key\":83,\"location\":\"17260 -8010\"},\n{\"label\":\"OpenAI ChatGPT\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"system\",\"name\":\"system\"},{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"},{\"portId\":\"error\",\"name\":\"error\"}],\"props_\":[{\"name\":\"model\",\"value\":\"gpt-3.5-turbo-0301\",\"unit\":\"\",\"valueChanged\":true},{\"name\":\"hasHistory\",\"value\":\"true\",\"unit\":\"\",\"valueChanged\":\"true\"},{\"name\":\"maxRetry\",\"value\":\"3\",\"unit\":\"\",\"valueChanged\":true},{\"name\":\"computeBarrier\",\"value\":\"in\",\"unit\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"var nodeData;\\n\\nconst systemInput = Engine_getInput( nodeData, 'system', '' );\\nconst inInput = Engine_getInput( nodeData, 'in', '' );\\nconst history = Engine_get( nodeData, 'history', [] );\\n\\nlet isNewChat = Engine_isInputNew( nodeData, 'system' );\\nconst hasHistory = Engine_getProperty( nodeData, 'hasHistory' );\\n\\nif( !hasHistory ) {\\n  isNewChat = true;\\n}\\n\\nif( isNewChat ) {\\n  // Empty history and add new system prompt\\n  history.splice( 0, history.length );\\n  if( systemInput ) {\\n    const entry = { role: 'system', content: systemInput };\\n    history.push( entry );\\n  }\\n}\\nif( inInput ) {\\n  const entry = { role: 'user', content: inInput };\\n  // Update history\\n  history.push( entry );\\n}\\n\\n// Define model from the component property\\nconst model = Engine_getProperty( nodeData, 'model' );\\nappData.chatGPT.setParam( 'model', model );\\n    \\n// Ask chatGPT\\nappData.chatGPT.getResponse( history, (response)=>{\\n  // Update history\\n  history.push( { role: 'assistant', content: response } );\\n  // Genereate output\\n  Engine_fireOutput( nodeData, 'out', response );\\n});\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":84,\"location\":\"14560 -7800\",\"editorPosition\":[1029,596,574,628]},\n{\"label\":\"OpenAI ChatGPT\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"system\",\"name\":\"system\"},{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"},{\"portId\":\"error\",\"name\":\"error\"}],\"props_\":[{\"name\":\"model\",\"value\":\"gpt-4\",\"unit\":\"\",\"valueChanged\":\"true\"},{\"name\":\"hasHistory\",\"value\":\"false\",\"unit\":\"\",\"valueChanged\":\"true\"},{\"name\":\"maxRetry\",\"value\":\"3\",\"unit\":\"\",\"valueChanged\":true},{\"name\":\"computeBarrier\",\"value\":\"in\",\"unit\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"var nodeData;\\n\\nconst systemInput = Engine_getInput( nodeData, 'system', '' );\\nconst inInput = Engine_getInput( nodeData, 'in', '' );\\nconst history = Engine_get( nodeData, 'history', [] );\\n\\nlet isNewChat = Engine_isInputNew( nodeData, 'system' );\\nconst hasHistory = Engine_getProperty( nodeData, 'hasHistory' );\\n\\nif( !hasHistory ) {\\n  isNewChat = true;\\n}\\n\\nif( isNewChat ) {\\n  // Empty history and add new system prompt\\n  history.splice( 0, history.length );\\n  if( systemInput ) {\\n    const entry = { role: 'system', content: systemInput };\\n    history.push( entry );\\n  }\\n}\\nif( inInput ) {\\n  const entry = { role: 'user', content: inInput };\\n  // Update history\\n  history.push( entry );\\n}\\n\\n// Define model from the component property\\nconst model = Engine_getProperty( nodeData, 'model' );\\nappData.chatGPT.setParam( 'model', model );\\n    \\n// Ask chatGPT\\nappData.chatGPT.getResponse( history, (response)=>{\\n  // Update history\\n  history.push( { role: 'assistant', content: response } );\\n  // Genereate output\\n  Engine_fireOutput( nodeData, 'out', response );\\n});\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":52,\"location\":\"11940 -4171.753000000001\",\"editorPosition\":[1029,596,574,628],\"group\":59},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":53,\"location\":\"10920 -4140\",\"group\":59},\n{\"label\":\"system prompt\",\"category\":\"DataFlow_Data\",\"size\":\"200 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"Take the role of a scientific writer that has to create scientific articles to be published in scientific journals or conferences.\\nIn writing try to be coincise and precise. Make sure that all you write is based on previous data or knowledge.\\nYour task is to formulate text, in latex format, using a high scientific language based on the information provided to you.\\nThe information can be provided in different forms:\\n- A name for the section or subsection to produce.\\n- Image description that can be used to reformulate in textual form. Image content is described in JSON. It should be used only to understand the image, and to help you to write the section, but no JSON content should be generated in the text.\\n- A context is given to you to help you with background knowledge.\\n- A content description in form of bullet point list should give you the content of the text to generate.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":54,\"location\":\"11230 -4950\",\"editorPosition\":[964,901,400,350]},\n{\"label\":\"paragraph\\nprompt\",\"category\":\"DataFlow_Data\",\"size\":\"200 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"Image: \\n{ \\\"caption\\\": \\\"Architecture of the planning system.\\\"\\n  \\\"nodes\\\": {\\n    \\\"1\\\": \\\"an icon of a human named 'User'\\\",\\n    \\\"2\\\": \\\"a box named 'User request'\\\",\\n    \\\"3\\\": \\\"a box named 'Answer'\\\",\\n    \\\"4\\\": \\\"a box named 'User interface'\\\",\\n    \\\"5\\\": \\\"a box named 'High-Level Plan Specification'\\\",\\n    \\\"6\\\": \\\"a box named 'High-Level Planner'\\\",\\n    \\\"7\\\": \\\"a box named 'Mid-Level Planner'\\\",\\n    \\\"8\\\": \\\"a box named 'Low-Level Planner'\\\",\\n    \\\"9\\\": \\\"a box named 'Robot Perception'\\\",\\n    \\\"10\\\": \\\"a box named 'Robot Action'\\\",\\n    \\\"11\\\": \\\"an icon of a robot named 'Robot'\\\",\\n  },\\n  \\\"edges\\\": [\\n    { \\\"from\\\": \\\"2\\\", \\\"to\\\": \\\"4\\\", \\\"label\\\": \\\"speech request from user\\\" },\\n    { \\\"from\\\": \\\"4\\\", \\\"to\\\": \\\"3\\\", \\\"label\\\": \\\"speech answer to the user\\\" },\\n    { \\\"from\\\": \\\"4\\\", \\\"to\\\": \\\"5\\\", \\\"label\\\": \\\"user request for the robot\\\" },\\n    { \\\"from\\\": \\\"5\\\", \\\"to\\\": \\\"6\\\", \\\"label\\\": \\\"high-level plan specification\\\" },\\n    { \\\"from\\\": \\\"6\\\", \\\"to\\\": \\\"7\\\", \\\"label\\\": \\\"high-level plan\\\" },\\n    { \\\"from\\\": \\\"7\\\", \\\"to\\\": \\\"8\\\", \\\"label\\\": \\\"command to the robot\\\" },\\n    { \\\"from\\\": \\\"8\\\", \\\"to\\\": \\\"10\\\", \\\"label\\\": \\\"action sequence\\\" },\\n    { \\\"from\\\": \\\"9\\\", \\\"to\\\": \\\"8\\\", \\\"label\\\": \\\"environment state\\\" },\\n    { \\\"from\\\": \\\"8\\\", \\\"to\\\": \\\"7\\\", \\\"label\\\": \\\"low-level feedback\\\" },\\n    { \\\"from\\\": \\\"7\\\", \\\"to\\\": \\\"4\\\", \\\"label\\\": \\\"feedback at end of plan execution\\\" },\\n    { \\\"from\\\": \\\"7\\\", \\\"to\\\": \\\"5\\\", \\\"label\\\": \\\"feedback for replaning\\\" },\\n    { \\\"from\\\": \\\"6\\\", \\\"to\\\": \\\"4\\\", \\\"label\\\": \\\"feedback for human\\\" },\\n  ]\\n}\\n\\n\\n\\nDescribe the Main Architectural Elements:\\n-(user interface) A first LLM (Large Language Model) is responsible of the natural language interface with humans and to transfer request to the robot if the robot needs to be involved\\n-(High-Level Plan Specification) A second LLM is responsible for specifying the task at a high-level.\\n-(High-Level Planner) A third LLM is responsible for creating a detailed plan in terms of commands understandable by the robot.\\n-(Mid-Level Planner) A mid-level planer is responsible to solve easy inconsistencies in the detail plan and give commands to the simulator.\\n-(Low-Level Planner) The simulator is responsible for trying all possible combination of trajectories and grasp positions to ensure the success of the command execution.\\n-(Robot) Finally, the best command is sent to the robot for realization in the real world and the change in the environment are perceive\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":58,\"location\":\"11110 -4140\",\"editorPosition\":[1438,800,402,97],\"group\":59},\n{\"label\":\"Hierarchical Planning with LLMs\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":59,\"location\":\"10900 -4155.8765\"},\n{\"label\":\"Paper\",\"category\":\"DataFlow_Data\",\"size\":\"200 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"\\\\section{Introduction}\\n{}\\n\\\\section{Background}\\n{}\\n\\\\section{Hierarchical Planning with LLMs}\\n\\nThe provided architecture outlines a hierarchical planning system utilizing Local Learning Models (LLMs). Its main components are:\\n\\n\\\\begin{itemize}\\n\\\\item \\\\textbf{User Interface:} This First LLM acts as the nexus between the human user and the rest of the system, translating natural language requests into machine-readable instructions. Should the situation necessitate it, this module can transfer the request directly to the robot.\\n\\\\item \\\\textbf{High-Level Plan Specification:} This second LLM is accountable for specifying tasks at a high level. It translates the user's request into a broader plan of action, outlining goals, but not detailing steps to completion.\\n\\\\item \\\\textbf{High-Level Planner:} This Third LLM is tasked with converting the high-level plan specification into a detailed plan. This involves translating overarching goals into actionable steps and commands, which the robot can understand.\\n\\\\item \\\\textbf{Mid-Level Planner:} This component functions to address straightforward inconsistencies within the detailed plan and provides executable commands to the simulator, making requisite adjustments.\\n\\\\item \\\\textbf{Low-Level Planner (Simulator):} The simulator's role in the system is to explore all possible combinations of trajectories and grasp positions to ensure successful execution of commands. The testing and validation processes occur within this module.\\n\\\\item \\\\textbf{Robot:} In the final step, the optimal command set, as determined by the simulator, is forwarded to the robot. Following execution, changes in the environment resulting from the robot's actions are then perceived and accounted for in subsequent operations. \\n\\\\end{itemize}\\n\\nThis architecture facilitates a step-by-step progression from user request to successful task completion, with each lead learning model (LLM) and planner operating in a specific domain of functionality, producing an effective end-to-end system.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":60,\"location\":\"13510 -4170\",\"editorPosition\":[2588,728,400,350]},\n{\"label\":\"Section\",\"category\":\"DataFlow_Data\",\"size\":\"200 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"\\\\section{Background}\\n{}\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":61,\"location\":\"12761.896 -4471.753000000001\",\"editorPosition\":[1438,800,402,97],\"group\":62},\n{\"label\":\"Background\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":62,\"location\":\"10910 -4475.7765\"},\n{\"label\":\"Hierarchical Planning with LLMs\",\"category\":\"DataFlow_Template\",\"size\":\"270 100\",\"color\":\"#ff8093\",\"in_\":[{\"portId\":\"label@group\",\"name\":\"label@group\"},{\"portId\":\"context\",\"name\":\"context\"},{\"portId\":\"info\",\"name\":\"info\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"isPersistent\",\"value\":\"false\"},{\"name\":\"computeBarrier\",\"value\":\"info\",\"valueChanged\":\"true\"}],\"isFile\":true,\"fileContent\":\"Context:\\n<context>\\nInformation provided:\\nSection name: <label@group>\\n<info>\",\"fileTypeName\":\"Template\",\"key\":63,\"location\":\"11480 -4150\",\"editorPosition\":[918,39,712,140],\"group\":59},\n{\"label\":\"Section\",\"category\":\"DataFlow_Data\",\"size\":\"200 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"\\\\section{Hierarchical Planning with LLMs}\\n\\nThe provided architecture outlines a hierarchical planning system utilizing Local Learning Models (LLMs). Its main components are:\\n\\n\\\\begin{itemize}\\n\\\\item \\\\textbf{User Interface:} This First LLM acts as the nexus between the human user and the rest of the system, translating natural language requests into machine-readable instructions. Should the situation necessitate it, this module can transfer the request directly to the robot.\\n\\\\item \\\\textbf{High-Level Plan Specification:} This second LLM is accountable for specifying tasks at a high level. It translates the user's request into a broader plan of action, outlining goals, but not detailing steps to completion.\\n\\\\item \\\\textbf{High-Level Planner:} This Third LLM is tasked with converting the high-level plan specification into a detailed plan. This involves translating overarching goals into actionable steps and commands, which the robot can understand.\\n\\\\item \\\\textbf{Mid-Level Planner:} This component functions to address straightforward inconsistencies within the detailed plan and provides executable commands to the simulator, making requisite adjustments.\\n\\\\item \\\\textbf{Low-Level Planner (Simulator):} The simulator's role in the system is to explore all possible combinations of trajectories and grasp positions to ensure successful execution of commands. The testing and validation processes occur within this module.\\n\\\\item \\\\textbf{Robot:} In the final step, the optimal command set, as determined by the simulator, is forwarded to the robot. Following execution, changes in the environment resulting from the robot's actions are then perceived and accounted for in subsequent operations. \\n\\\\end{itemize}\\n\\nThis architecture facilitates a step-by-step progression from user request to successful task completion, with each lead learning model (LLM) and planner operating in a specific domain of functionality, producing an effective end-to-end system.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":64,\"location\":\"12780 -4151.753000000001\",\"editorPosition\":[1428,353,400,350],\"group\":59},\n{\"label\":\"LateX Section\",\"category\":\"DataFlow_Template\",\"size\":\"270 100\",\"color\":\"#ff8093\",\"in_\":[{\"portId\":\"label@group\",\"name\":\"label@group\"},{\"portId\":\"text\",\"name\":\"text\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"isPersistent\",\"value\":\"false\"},{\"name\":\"computeBarrier\",\"value\":\"text\",\"valueChanged\":\"true\"}],\"isFile\":true,\"fileContent\":\"\\\\section{<label@group>}\\n<text>\",\"fileTypeName\":\"Template\",\"key\":65,\"location\":\"12371.896 -4481.553\",\"editorPosition\":[918,39,712,140],\"group\":62},\n{\"label\":\"Content\",\"category\":\"DataFlow_Data\",\"size\":\"200 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"{}\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":66,\"location\":\"11981.896 -4481.553\",\"editorPosition\":[1438,800,402,97],\"group\":62},\n{\"label\":\"Introduction\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":67,\"location\":\"10910 -4768.9351873587\"},\n{\"label\":\"Section\",\"category\":\"DataFlow_Data\",\"size\":\"200 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"\\\\section{Introduction}\\n{}\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":68,\"location\":\"12771.896672430952 -4760.200374717401\",\"editorPosition\":[1438,800,402,97],\"group\":67},\n{\"label\":\"LateX Section\",\"category\":\"DataFlow_Template\",\"size\":\"270 100\",\"color\":\"#ff8093\",\"in_\":[{\"portId\":\"label@group\",\"name\":\"label@group\"},{\"portId\":\"text\",\"name\":\"text\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"isPersistent\",\"value\":\"false\"},{\"name\":\"computeBarrier\",\"value\":\"text\",\"valueChanged\":\"true\"}],\"isFile\":true,\"fileContent\":\"\\\\section{<label@group>}\\n<text>\",\"fileTypeName\":\"Template\",\"key\":69,\"location\":\"12381.896672430952 -4770.0003747174005\",\"editorPosition\":[918,39,712,140],\"group\":67},\n{\"label\":\"Content\",\"category\":\"DataFlow_Data\",\"size\":\"200 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"{}\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":70,\"location\":\"11991.896672430952 -4770.0003747174005\",\"editorPosition\":[1438,800,402,97],\"group\":67},\n{\"label\":\"\",\"category\":\"DataFlow_Concatenate\",\"color\":\"lightseagreen\",\"in_\":[{\"portId\":\"in0\",\"name\":\"in0\"},{\"portId\":\"in1\",\"name\":\"in1\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":72,\"location\":\"13120 -4610.1\"},\n{\"label\":\"\",\"category\":\"DataFlow_Concatenate\",\"color\":\"lightseagreen\",\"in_\":[{\"portId\":\"in0\",\"name\":\"in0\"},{\"portId\":\"in1\",\"name\":\"in1\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":73,\"location\":\"13280 -4250.1\"},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":74,\"location\":\"10930 -4757.87\",\"group\":67},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":75,\"location\":\"10930 -4460\",\"group\":62},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":76,\"location\":\"10980 -4950\"},\n{\"label\":\"system prompt\",\"category\":\"DataFlow_Data\",\"size\":\"200 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"Take the role of a scientific writer that has to create scientific articles to be published in scientific journals or conferences.\\nIn writing try to be coincise and precise. Make sure that all you write is based on previous data or knowledge.\\nYour task is to formulate text, in latex format, using a high scientific language based on the information provided to you.\\nThe information can be provided in different forms:\\n- A name for the section or subsection to produce.\\n- Image description that can be used to reformulate in textual form. Image content is described in JSON. It should be used only to understand the image, and to help you to write the section, but no JSON content should be generated in the text.\\n- A context is given to you to help you with background knowledge.\\n- A content description in form of bullet point list should give you the content of the text to generate.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":78,\"location\":\"11460 -5070\",\"editorPosition\":[964,901,400,350]},\n{\"label\":\"paragraph\\nprompt\",\"category\":\"DataFlow_Data\",\"size\":\"200 80\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"Image: \\n{ \\\"caption\\\": \\\"Architecture of the planning system.\\\"\\n  \\\"nodes\\\": {\\n    \\\"1\\\": \\\"an icon of a human named 'User'\\\",\\n    \\\"2\\\": \\\"a box named 'User request'\\\",\\n    \\\"3\\\": \\\"a box named 'Answer'\\\",\\n    \\\"4\\\": \\\"a box named 'User interface'\\\",\\n    \\\"5\\\": \\\"a box named 'High-Level Plan Specification'\\\",\\n    \\\"6\\\": \\\"a box named 'High-Level Planner'\\\",\\n    \\\"7\\\": \\\"a box named 'Mid-Level Planner'\\\",\\n    \\\"8\\\": \\\"a box named 'Low-Level Planner'\\\",\\n    \\\"9\\\": \\\"a box named 'Robot Perception'\\\",\\n    \\\"10\\\": \\\"a box named 'Robot Action'\\\",\\n    \\\"11\\\": \\\"an icon of a robot named 'Robot'\\\",\\n  },\\n  \\\"edges\\\": [\\n    { \\\"from\\\": \\\"2\\\", \\\"to\\\": \\\"4\\\", \\\"label\\\": \\\"speech request from user\\\" },\\n    { \\\"from\\\": \\\"4\\\", \\\"to\\\": \\\"3\\\", \\\"label\\\": \\\"speech answer to the user\\\" },\\n    { \\\"from\\\": \\\"4\\\", \\\"to\\\": \\\"5\\\", \\\"label\\\": \\\"user request for the robot\\\" },\\n    { \\\"from\\\": \\\"5\\\", \\\"to\\\": \\\"6\\\", \\\"label\\\": \\\"high-level plan specification\\\" },\\n    { \\\"from\\\": \\\"6\\\", \\\"to\\\": \\\"7\\\", \\\"label\\\": \\\"high-level plan\\\" },\\n    { \\\"from\\\": \\\"7\\\", \\\"to\\\": \\\"8\\\", \\\"label\\\": \\\"command to the robot\\\" },\\n    { \\\"from\\\": \\\"8\\\", \\\"to\\\": \\\"10\\\", \\\"label\\\": \\\"action sequence\\\" },\\n    { \\\"from\\\": \\\"9\\\", \\\"to\\\": \\\"8\\\", \\\"label\\\": \\\"environment state\\\" },\\n    { \\\"from\\\": \\\"8\\\", \\\"to\\\": \\\"7\\\", \\\"label\\\": \\\"low-level feedback\\\" },\\n    { \\\"from\\\": \\\"7\\\", \\\"to\\\": \\\"4\\\", \\\"label\\\": \\\"feedback at end of plan execution\\\" },\\n    { \\\"from\\\": \\\"7\\\", \\\"to\\\": \\\"5\\\", \\\"label\\\": \\\"feedback for replaning\\\" },\\n    { \\\"from\\\": \\\"6\\\", \\\"to\\\": \\\"4\\\", \\\"label\\\": \\\"feedback for human\\\" },\\n  ]\\n}\\n\\n\\n\\nDescribe the Main Architectural Elements:\\n-(user interface) A first LLM is responsible of the natural language interface with humans and to transfer request to the robot if the robot needs to be involved\\n-(High-Level Plan Specification) A second LLM is responsible for specifying the task at a high-level.\\n-(High-Level Planner) A third LLM is responsible for creating a detailed plan in terms of commands understandable by the robot.\\n-(Mid-Level Planner) A mid-level planer is responsible to solve easy inconsistencies in the detail plan and give commands to the simulator.\\n-(Low-Level Planner) The simulator is responsible for trying all possible combination of trajectories and grasp positions to ensure the success of the command execution.\\n-(Robot) Finally, the best command is sent to the robot for realization in the real world and the change in the environment are perceive\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"key\":82,\"location\":\"11070 -3810\",\"editorPosition\":[1438,800,402,97]}\n],\n  \"linkDataArray\": [\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":425,\"to\":426,\"points\":[17930.4619140625,-6310,17940.4619140625,-6310,17978.103515625,-6310,17988.103515625,-6310],\"key\":-331},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"\",\"toPort\":\"in\",\"from\":443,\"to\":425,\"points\":[17521,-6310,17578.103515625,-6310,17588.103515625,-6310],\"key\":-332},\n{\"text\":\"Reference\",\"category\":\"CodeFlow_Code\",\"from\":454,\"to\":452,\"points\":[14120.4619140625,-7600,14130.4619140625,-7600,14158.103515625,-7600,14168.103515625,-7600],\"fromPort\":\"out\",\"toPort\":\"in\",\"key\":-346},\n{\"text\":\"Reference\",\"category\":\"CodeFlow_Code\",\"from\":444,\"to\":445,\"points\":[14120.4619140625,-8000,14130.4619140625,-8000,14158.103515625,-8000,14168.103515625,-8000],\"fromPort\":\"out\",\"toPort\":\"in\",\"key\":-347},\n{\"text\":\"Reference\",\"category\":\"CodeFlow_Code\",\"from\":446,\"to\":448,\"points\":[14120.4619140625,-7500,14130.4619140625,-7500,14158.103515625,-7500.200000000001,14168.103515625,-7500.200000000001],\"fromPort\":\"out\",\"toPort\":\"in\",\"key\":-349},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":445,\"to\":450,\"points\":[14380.4619140625,-8000,14390.4619140625,-8000,14448.103515625,-8000,14458.103515625,-8000],\"key\":-352},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"system\",\"from\":445,\"to\":84,\"points\":[14380.4619140625,-8000,14390.4619140625,-8000,14484.662109375,-7810,14494.662109375,-7810],\"key\":-348},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":448,\"to\":453,\"points\":[14380.4619140625,-7500.200000000001,14390.4619140625,-7500.200000000001,14448.103515625,-7500,14458.103515625,-7500],\"key\":-343},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":452,\"to\":451,\"points\":[14380.4619140625,-7600,14390.4619140625,-7600,14448.103515625,-7600,14458.103515625,-7600],\"key\":-350},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":452,\"to\":84,\"points\":[14380.4619140625,-7600,14390.4619140625,-7600,14484.662109375,-7790,14494.662109375,-7790],\"key\":-353},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":448,\"to\":84,\"points\":[14380.4619140625,-7500.200000000001,14390.4619140625,-7500.200000000001,14484.662109375,-7790,14494.662109375,-7790],\"key\":-355},\n{\"text\":\"Reference\",\"category\":\"CodeFlow_Code\",\"from\":461,\"to\":460,\"points\":[14130.4619140625,-7110,14140.4619140625,-7110,14168.103515625,-7110.200000000001,14178.103515625,-7110.200000000001],\"fromPort\":\"out\",\"toPort\":\"in\",\"key\":-356},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":460,\"to\":463,\"points\":[14390.4619140625,-7110.200000000001,14400.4619140625,-7110.200000000001,14437.103515625,-7170,14518.103515625,-7170,14528.103515625,-7170],\"key\":-357},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"history\",\"from\":460,\"to\":449,\"points\":[14390.4619140625,-7110.200000000001,14400.4619140625,-7110.200000000001,14563.751953125,-6960,14573.751953125,-6960],\"key\":-358},\n{\"text\":\"Reference\",\"category\":\"CodeFlow_Code\",\"from\":466,\"to\":467,\"points\":[14130.4619140625,-7010,14140.4619140625,-7010,14168.103515625,-7010.200000000001,14178.103515625,-7010.200000000001],\"fromPort\":\"out\",\"toPort\":\"in\",\"key\":-359},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"assistant\",\"from\":467,\"to\":449,\"points\":[14390.4619140625,-7010.200000000001,14400.4619140625,-7010.200000000001,14563.751953125,-6940,14573.751953125,-6940],\"key\":-360},\n{\"text\":\"Reference\",\"category\":\"CodeFlow_Code\",\"from\":470,\"to\":471,\"points\":[14130.4619140625,-6900,14140.4619140625,-6900,14168.103515625,-6900.200000000001,14178.103515625,-6900.200000000001],\"fromPort\":\"out\",\"toPort\":\"in\",\"key\":-361},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"user\",\"from\":471,\"to\":449,\"points\":[14390.4619140625,-6900.200000000001,14400.4619140625,-6900.200000000001,14563.751953125,-6920,14573.751953125,-6920],\"key\":-365},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":467,\"to\":458,\"points\":[14390.4619140625,-7010.200000000001,14400.4619140625,-7010.200000000001,14518.103515625,-7070,14528.103515625,-7070],\"key\":-370},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":471,\"to\":459,\"points\":[14390.4619140625,-6900.200000000001,14400.4619140625,-6900.200000000001,14528.103515625,-6810,14538.103515625,-6810],\"key\":-371},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":449,\"to\":464,\"points\":[14960.4619140625,-6940,14970.4619140625,-6940,15250,-6940,15250,-6980,15338.103515625,-6980,15348.103515625,-6980],\"key\":-372,\"color\":\"#ff8093\"},\n{\"text\":\"Reference\",\"category\":\"CodeFlow_Code\",\"from\":469,\"to\":468,\"points\":[14140.4619140625,-6350,14150.4619140625,-6350,14178.103174443393,-6350.300464758519,14188.103174443393,-6350.300464758519],\"fromPort\":\"out\",\"toPort\":\"in\",\"key\":-373},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":468,\"to\":472,\"points\":[14400.461572880893,-6350.300464758519,14410.461572880893,-6350.300464758519,14437.103174443393,-6420.000464758518,14528.103515625,-6420,14538.103515625,-6420],\"key\":-375},\n{\"text\":\"Reference\",\"category\":\"CodeFlow_Code\",\"from\":473,\"to\":474,\"points\":[14140.4619140625,-6250,14150.4619140625,-6250,14178.103174443393,-6250.300464758519,14188.103174443393,-6250.300464758519],\"fromPort\":\"out\",\"toPort\":\"in\",\"key\":-379},\n{\"text\":\"Reference\",\"category\":\"CodeFlow_Code\",\"from\":475,\"to\":476,\"points\":[14140.4619140625,-6140,14150.4619140625,-6140,14178.103174443393,-6140.300464758519,14188.103174443393,-6140.300464758519],\"fromPort\":\"out\",\"toPort\":\"in\",\"key\":-381},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":474,\"to\":477,\"points\":[14400.461572880893,-6250.300464758519,14410.461572880893,-6250.300464758519,14528.103515625,-6330,14538.103515625,-6330],\"key\":-383},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":476,\"to\":478,\"points\":[14400.461572880893,-6140.300464758519,14410.461572880893,-6140.300464758519,14538.103515625,-6050,14548.103515625,-6050],\"key\":-384},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in0\",\"from\":468,\"to\":481,\"points\":[14400.461572880893,-6350.300464758519,14410.461572880893,-6350.300464758519,14670.3173828125,-6200.1,14680.3173828125,-6200.1],\"key\":-378},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in1\",\"from\":474,\"to\":481,\"points\":[14400.461572880893,-6250.300464758519,14410.461572880893,-6250.300464758519,14670.3173828125,-6180.1,14680.3173828125,-6180.1],\"key\":-380},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in2\",\"from\":476,\"to\":481,\"points\":[14400.461572880893,-6140.300464758519,14410.461572880893,-6140.300464758519,14670.3173828125,-6160.1,14680.3173828125,-6160.1],\"key\":-382},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":481,\"to\":479,\"points\":[14800.4619140625,-6180.1,14810.4619140625,-6180.1,15190,-6180,15190,-6230,15348.103515625,-6230,15358.103515625,-6230],\"key\":-385,\"color\":\"lightseagreen\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":84,\"to\":447,\"points\":[14850.55859375,-7810,14860.55859375,-7810,14878.103515625,-7810,14888.103515625,-7810],\"key\":-50,\"color\":\"LightSeaGreen\"},\n{\"text\":\"Reference\",\"category\":\"CodeFlow_Code\",\"from\":76,\"to\":54,\"points\":[11100.4619140625,-4950,11110.4619140625,-4950,11188.103515625,-4950,11198.103515625,-4950],\"fromPort\":\"out\",\"toPort\":\"in\",\"key\":-33},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"system\",\"from\":54,\"to\":52,\"points\":[11470.4619140625,-4950,11480.4619140625,-4950,11864.662109375,-4181.753000000001,11874.662109375,-4181.753000000001],\"key\":-35},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"info\",\"from\":58,\"to\":63,\"points\":[11350.4619140625,-4140,11360.4619140625,-4140,11369.40234375,-4130,11379.40234375,-4130],\"key\":-36},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":65,\"to\":61,\"points\":[12682.3579140625,-4481.553,12692.3579140625,-4481.553,12719.999515625,-4471.753000000001,12729.999515625,-4471.753000000001],\"key\":-42,\"color\":\"#ff8093\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"text\",\"from\":66,\"to\":65,\"points\":[12222.3579140625,-4481.553,12232.3579140625,-4481.553,12261.29834375,-4471.553,12271.29834375,-4471.553],\"key\":-43},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":69,\"to\":68,\"points\":[12692.358586493452,-4770.0003747174005,12702.358586493452,-4770.0003747174005,12730.000188055952,-4760.200374717401,12740.000188055952,-4760.200374717401],\"key\":-44,\"color\":\"#ff8093\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"text\",\"from\":70,\"to\":69,\"points\":[12232.358586493452,-4770.0003747174005,12242.358586493452,-4770.0003747174005,12271.299016180952,-4760.0003747174005,12281.299016180952,-4760.0003747174005],\"key\":-45},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":63,\"to\":52,\"points\":[11790.4619140625,-4150,11800.4619140625,-4150,11864.662109375,-4161.753000000001,11874.662109375,-4161.753000000001],\"key\":-47,\"color\":\"#ff8093\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in0\",\"from\":68,\"to\":72,\"points\":[13012.358586493452,-4760.200374717401,13022.358586493452,-4760.200374717401,13070.3173828125,-4620.1,13080.3173828125,-4620.1],\"key\":-48},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in1\",\"from\":61,\"to\":72,\"points\":[13002.3579140625,-4471.753000000001,13012.3579140625,-4471.753000000001,13070.3173828125,-4600.1,13080.3173828125,-4600.1],\"key\":-49},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in0\",\"from\":72,\"to\":73,\"points\":[13200.4619140625,-4610.1,13210.4619140625,-4610.1,13230.3173828125,-4260.1,13240.3173828125,-4260.1],\"key\":-46},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in1\",\"from\":64,\"to\":73,\"points\":[13020.4619140625,-4151.753000000001,13030.4619140625,-4151.753000000001,13230.3173828125,-4240.1,13240.3173828125,-4240.1],\"key\":-51},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"context\",\"from\":72,\"to\":63,\"points\":[13200.4619140625,-4610.1,13210.4619140625,-4610.1,13210,-4340,11390,-4350,11369.40234375,-4150,11379.40234375,-4150],\"key\":-52},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":73,\"to\":60,\"points\":[13360.4619140625,-4250.1,13370.4619140625,-4250.1,13468.103515625,-4170,13478.103515625,-4170],\"key\":-53,\"color\":\"lightseagreen\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":53,\"to\":58,\"points\":[11040.4619140625,-4140,11050.4619140625,-4140,11068.103515625,-4140,11078.103515625,-4140],\"key\":-56},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":75,\"to\":66,\"points\":[11050.4619140625,-4460,11060.4619140625,-4460,11939.999515625,-4481.553,11949.999515625,-4481.553],\"key\":-54},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":74,\"to\":70,\"points\":[11050.4619140625,-4757.87,11060.4619140625,-4757.87,11950.000188055952,-4770.0003747174005,11960.000188055952,-4770.0003747174005],\"key\":-55},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":52,\"to\":64,\"points\":[12230.55859375,-4181.753000000001,12240.55859375,-4181.753000000001,12738.103515625,-4151.753000000001,12748.103515625,-4151.753000000001],\"key\":-58,\"color\":\"LightSeaGreen\"}\n]}"
}