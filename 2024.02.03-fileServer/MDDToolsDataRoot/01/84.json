{
  "dslNameList": [
    "DefaultDSL",
    "HierarchyDSL",
    "ThinkingDSL",
    "TextLabelsDSL",
    "CodeFlowDSL",
    "ConnectorsDSL",
    "PicturesDSL",
    "TreeDSL",
    "KanbanDSL",
    "DataFlowDSL"
  ],
  "view": {
    "scale": 0.8000000000000002,
    "position": [
      4630.500000000001,
      -504.96138056839254
    ],
    "isGridOn": true
  },
  "model": "{ \"class\": \"GraphLinksModel\",\n  \"copiesArrays\": true,\n  \"copiesArrayObjects\": true,\n  \"copiesKey\": false,\n  \"linkKeyProperty\": \"key\",\n  \"linkFromPortIdProperty\": \"fromPort\",\n  \"linkToPortIdProperty\": \"toPort\",\n  \"nodeDataArray\": [\n{\"label\":\"GoJS Graph\\n(Link)\",\"color\":\"lightsalmon\",\"size\":\"240 143\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"html = `\\n<div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n<script>\\ndebugger;\\n  var myDiagram = null;\\n   \\n  function init() {\\n    var $ = go.GraphObject.make;  // for conciseness in defining templates\\n    \\n    myDiagram =\\n    $(go.Diagram, \\\"myDiagramDiv\\\",  // create a Diagram for the DIV HTML element\\n      {\\n        \\\"undoManager.isEnabled\\\": true\\n      });\\n      \\n    // define a simple Node template (but use the default Link template)\\n    myDiagram.nodeTemplate =\\n      $(go.Node, \\\"Auto\\\",\\n        //{ contextMenu: myContextMenu },\\n        $(go.Shape, \\\"RoundedRectangle\\\",\\n          // Shape.fill is bound to Node.data.color\\n          new go.Binding(\\\"fill\\\", \\\"color\\\")),\\n        $(go.TextBlock,\\n          { margin: 3 },  // some room around the text\\n          // TextBlock.text is bound to Node.data.key\\n          new go.Binding(\\\"text\\\", \\\"key\\\"))\\n      );\\n\\n    // create the model data that will be represented by Nodes and Links\\n    myDiagram.model = new go.GraphLinksModel(\\n      [\\n        { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n        { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n        { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n        { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n      ],\\n      [\\n        { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n        { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n        { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n        { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n        { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n      ]\\n    );\\n  }\\n  \\n  // A custom command, for changing the color of the selected node(s).\\n  function changeColor(diagram, color) {\\n    // Always make changes in a transaction, except when initializing the diagram.\\n    diagram.startTransaction(\\\"change color\\\");\\n    diagram.selection.each(function(node) {\\n      if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n        // Examine and modify the data, not the Node directly.\\n        var data = node.data;\\n        // Call setDataProperty to support undo/redo as well as\\n        // automatically evaluating any relevant bindings.\\n        diagram.model.setDataProperty(data, \\\"color\\\", color);\\n      }\\n    });\\n    diagram.commitTransaction(\\\"change color\\\");\\n  }\\n  window.addEventListener('DOMContentLoaded', init);\\n</script>\\n`;\",\"fileTypeName\":\"Web Page\",\"fileType\":\"application/html\",\"key\":0,\"location\":\"5459.400625496122 0\",\"editorPosition\":[1310,1146,400,350],\"linkToKey\":1,\"isLocalDiv\":true},\n{\"label\":\"GoJS Graph\",\"color\":\"lightsalmon\",\"size\":\"240 143\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"html = `\\n<div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n<script>\\ndebugger;\\n  var myDiagram = null;\\n   \\n  function init() {\\n    var $ = go.GraphObject.make;  // for conciseness in defining templates\\n    \\n    myDiagram =\\n    $(go.Diagram, \\\"myDiagramDiv\\\",  // create a Diagram for the DIV HTML element\\n      {\\n        \\\"undoManager.isEnabled\\\": true\\n      });\\n      \\n    // define a simple Node template (but use the default Link template)\\n    myDiagram.nodeTemplate =\\n      $(go.Node, \\\"Auto\\\",\\n        //{ contextMenu: myContextMenu },\\n        $(go.Shape, \\\"RoundedRectangle\\\",\\n          // Shape.fill is bound to Node.data.color\\n          new go.Binding(\\\"fill\\\", \\\"color\\\")),\\n        $(go.TextBlock,\\n          { margin: 3 },  // some room around the text\\n          // TextBlock.text is bound to Node.data.key\\n          new go.Binding(\\\"text\\\", \\\"key\\\"))\\n      );\\n\\n    // create the model data that will be represented by Nodes and Links\\n    myDiagram.model = new go.GraphLinksModel(\\n      [\\n        { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n        { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n        { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n        { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n      ],\\n      [\\n        { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n        { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n        { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n        { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n        { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n      ]\\n    );\\n  }\\n  \\n  // A custom command, for changing the color of the selected node(s).\\n  function changeColor(diagram, color) {\\n    // Always make changes in a transaction, except when initializing the diagram.\\n    diagram.startTransaction(\\\"change color\\\");\\n    diagram.selection.each(function(node) {\\n      if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n        // Examine and modify the data, not the Node directly.\\n        var data = node.data;\\n        // Call setDataProperty to support undo/redo as well as\\n        // automatically evaluating any relevant bindings.\\n        diagram.model.setDataProperty(data, \\\"color\\\", color);\\n      }\\n    });\\n    diagram.commitTransaction(\\\"change color\\\");\\n  }\\n  init();\\n</script>\\n`;\",\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":1,\"location\":\"5709.400625496122 0\",\"editorPosition\":[1216,567,775,1176]},\n{\"label\":\"Selection\",\"size\":\"180 60\",\"category\":\"Hierarchy_Selection\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphSelection$\",\"key\":3,\"location\":\"4480 -830\"},\n{\"label\":\"GoJS Graph\\n(Link)\",\"color\":\"lightsalmon\",\"size\":\"240 143\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<!DOCTYPE html>\\n<html>\\n  <script type=\\\"text/javascript\\\" src=\\\"lib/gojs/2.1/go.js\\\"></script>\\n  <script>\\n    var myDiagram = null;\\n     \\n    function init( divName ) {\\n      var $ = go.GraphObject.make;  // for conciseness in defining templates\\n      \\n      myDiagram =\\n      $(go.Diagram, divName,  // create a Diagram for the DIV HTML element\\n        {\\n          \\\"undoManager.isEnabled\\\": true\\n        });\\n        \\n      // define a simple Node template (but use the default Link template)\\n      myDiagram.nodeTemplate =\\n        $(go.Node, \\\"Auto\\\",\\n          new go.Binding(\\\"location\\\", \\\"loc\\\").makeTwoWay(),\\n          $(go.Shape, \\\"RoundedRectangle\\\",\\n            {\\n              fill: $(go.Brush, \\\"Linear\\\", { 0: \\\"#00ACED\\\", 0.5: \\\"#00ACED\\\", 1: \\\"#0079A6\\\" }),\\n              stroke: \\\"#0079A6\\\",\\n              portId: \\\"\\\", cursor: \\\"pointer\\\",  // the node's only port is the Shape\\n              fromLinkable: true, fromLinkableDuplicates: true, fromLinkableSelfNode: true,\\n              toLinkable: true, toLinkableDuplicates: true, toLinkableSelfNode: true\\n            }),\\n          $(go.TextBlock,\\n            { margin: 3, font: \\\"bold 10pt Arial, sans-serif\\\", stroke: \\\"whitesmoke\\\", editable: true },\\n            new go.Binding(\\\"text\\\",\\\"key\\\").makeTwoWay())\\n        );\\n  \\n      // create the model data that will be represented by Nodes and Links\\n      myDiagram.model = new go.GraphLinksModel(\\n        [\\n          { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n          { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n          { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n          { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n        ],\\n        [\\n          { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n          { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n          { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n        ]\\n      );\\n      myDiagram.model.addChangedListener(e => {\\n        if (e.isTransactionFinished) {\\n          const tx = e.object;\\n          if (tx instanceof go.Transaction) {\\n                console.log(tx.toString());\\n            tx.changes.each(c => {\\n              // consider which ChangedEvents to record\\n              if (c.model) {\\n                console.log(c);\\n                console.log(\\\"  \\\" + c.toString());\\n              }\\n            });\\n          }\\n        }\\n      });\\n    }\\n    \\n    // A custom command, for changing the color of the selected node(s).\\n    function changeColor(diagram, color) {\\n      // Always make changes in a transaction, except when initializing the diagram.\\n      diagram.startTransaction(\\\"change color\\\");\\n      diagram.selection.each(function(node) {\\n        if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n          // Examine and modify the data, not the Node directly.\\n          var data = node.data;\\n          // Call setDataProperty to support undo/redo as well as\\n          // automatically evaluating any relevant bindings.\\n          diagram.model.setDataProperty(data, \\\"color\\\", color);\\n        }\\n      });\\n      diagram.commitTransaction(\\\"change color\\\");\\n    }\\n    window.addEventListener('DOMContentLoaded', ()=>{\\n      init( \\\"myDiagramDiv\\\" );\\n      init( \\\"myDiagramDiv2\\\" );\\n    });\\n  </script>\\n  <body style=\\\"background-color: lightgray;\\\">\\n    <div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n    <div id=\\\"myDiagramDiv2\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n    <textarea id='events'></textarea>\\n  </body>\\n</html>\",\"fileTypeName\":\"Web Page\",\"fileType\":\"application/html\",\"key\":4,\"location\":\"6423.512079457615 -22.871719049297383\",\"editorPosition\":[1310,1146,400,350],\"linkToKey\":5},\n{\"label\":\"GoJS Graph\",\"color\":\"lightsalmon\",\"size\":\"240 143\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<!DOCTYPE html>\\n<html>\\n  <script type=\\\"text/javascript\\\" src=\\\"lib/gojs/2.1/go.js\\\"></script>\\n  <script>\\n    var myDiagram = null;\\n     \\n    function init( divName ) {\\n      var $ = go.GraphObject.make;  // for conciseness in defining templates\\n      \\n      myDiagram =\\n      $(go.Diagram, divName,  // create a Diagram for the DIV HTML element\\n        {\\n          \\\"undoManager.isEnabled\\\": true\\n        });\\n        \\n      // define a simple Node template (but use the default Link template)\\n      myDiagram.nodeTemplate =\\n        $(go.Node, \\\"Auto\\\",\\n          new go.Binding(\\\"location\\\", \\\"loc\\\").makeTwoWay(),\\n          $(go.Shape, \\\"RoundedRectangle\\\",\\n            {\\n              fill: $(go.Brush, \\\"Linear\\\", { 0: \\\"#00ACED\\\", 0.5: \\\"#00ACED\\\", 1: \\\"#0079A6\\\" }),\\n              stroke: \\\"#0079A6\\\",\\n              portId: \\\"\\\", cursor: \\\"pointer\\\",  // the node's only port is the Shape\\n              fromLinkable: true, fromLinkableDuplicates: true, fromLinkableSelfNode: true,\\n              toLinkable: true, toLinkableDuplicates: true, toLinkableSelfNode: true\\n            }),\\n          $(go.TextBlock,\\n            { margin: 3, font: \\\"bold 10pt Arial, sans-serif\\\", stroke: \\\"whitesmoke\\\", editable: true },\\n            new go.Binding(\\\"text\\\",\\\"key\\\").makeTwoWay())\\n        );\\n  \\n      // create the model data that will be represented by Nodes and Links\\n      myDiagram.model = new go.GraphLinksModel(\\n        [\\n          { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n          { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n          { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n          { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n        ],\\n        [\\n          { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n          { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n          { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n        ]\\n      );\\n      myDiagram.model.addChangedListener(e => {\\n        if (e.isTransactionFinished) {\\n          const tx = e.object;\\n          if (tx instanceof go.Transaction) {\\n                console.log(tx.toString());\\n                console.log(tx);\\n            tx.changes.each(c => {\\n              // consider which ChangedEvents to record\\n              if (c.model) {\\n                console.log(c);\\n                console.log(\\\"  \\\" + c.toString());\\n              }\\n            });\\n          }\\n        }\\n      });\\n    }\\n    \\n    // A custom command, for changing the color of the selected node(s).\\n    function changeColor(diagram, color) {\\n      // Always make changes in a transaction, except when initializing the diagram.\\n      diagram.startTransaction(\\\"change color\\\");\\n      diagram.selection.each(function(node) {\\n        if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n          // Examine and modify the data, not the Node directly.\\n          var data = node.data;\\n          // Call setDataProperty to support undo/redo as well as\\n          // automatically evaluating any relevant bindings.\\n          diagram.model.setDataProperty(data, \\\"color\\\", color);\\n        }\\n      });\\n      diagram.commitTransaction(\\\"change color\\\");\\n    }\\n    window.addEventListener('DOMContentLoaded', ()=>{\\n      init( \\\"myDiagramDiv\\\" );\\n      init( \\\"myDiagramDiv2\\\" );\\n    });\\n  </script>\\n  <body style=\\\"background-color: lightgray;\\\">\\n    <div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n    <div id=\\\"myDiagramDiv2\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n    <textarea id='events'></textarea>\\n  </body>\\n</html>\",\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":5,\"location\":\"6673.512079457615 -22.871719049297383\",\"editorPosition\":[1310,1146,400,350]}\n],\n  \"linkDataArray\": []}"
}