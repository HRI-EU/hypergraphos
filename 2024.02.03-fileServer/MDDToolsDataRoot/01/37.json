{
  "dslNameList": [
    "DefaultDSL",
    "HierarchyDSL",
    "TextLabelsDSL",
    "CodeFlowDSL",
    "PicturesDSL"
  ],
  "view": {
    "scale": 1,
    "position": [
      -1794.4603796757665,
      94.57117035063186
    ],
    "isGridOn": false
  },
  "model": "{ \"class\": \"GraphLinksModel\",\n  \"copiesArrays\": true,\n  \"copiesArrayObjects\": true,\n  \"copiesKey\": false,\n  \"linkKeyProperty\": \"key\",\n  \"linkFromPortIdProperty\": \"fromPort\",\n  \"linkToPortIdProperty\": \"toPort\",\n  \"nodeDataArray\": [\n{\"label\":\"Selection\",\"size\":\"180 60\",\"category\":\"Hierarchy_Selection\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphSelection$\",\"key\":0,\"location\":\"-1225.0901740527513 229.57117035063186\"},\n{\"label\":\"Model\",\"size\":\"180 60\",\"category\":\"Hierarchy_Model\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphModel$\",\"key\":1,\"location\":\"-1225.0901740527513 139.57117035063186\"},\n{\"label\":\"Graph Info\",\"category\":\"Hierarchy_GraphInfo\",\"size\":\"180 80\",\"props_\":[{\"name\":\"Name\",\"value\":\"HyperGraph\",\"valueChanged\":\"true\"},{\"name\":\"Version\",\"value\":\"3.0\",\"valueChanged\":\"true\"},{\"name\":\"Date\",\"value\":\"15 July 2023\",\"valueChanged\":\"true\"},{\"name\":\"Path\",\"value\":\"./\"},{\"name\":\"Authors\",\"value\":\"Frankonello\"}],\"key\":2,\"location\":\"-975.0901740527513 139.57117035063186\"},\n{\"label\":\"HyperGraph 3.0.1\",\"category\":\"TextLabels_Size5\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"1338 30\",\"key\":3,\"location\":\"-720 200\"},\n{\"label\":\"index.html\",\"color\":\"lightsalmon\",\"size\":\"180 35\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"fileURL\":\"/fileServer/01/39.html\",\"key\":5,\"location\":\"-440 1577.5\",\"group\":10},\n{\"label\":\"System Status: [Generation...Done]\\nDirs: 4 - Files: 2 - Nodes: 6\",\"category\":\"CodeFlow_Button\",\"color\":\"YellowGreen\",\"size\":\"476 120\",\"buttons_\":[{\"name\":\"Generate\",\"checked\":false},{\"name\":\"Deploy\",\"checked\":true},{\"name\":\"Start\",\"checked\":true},{\"name\":\"Stop\",\"checked\":false}],\"props_\":[{\"name\":\"isOverwrite\",\"value\":\"true\",\"valueChanged\":\"true\"},{\"name\":\"scriptPath\",\"value\":\"HyperGraphRoot/3.0/AppRoot/system\",\"valueChanged\":\"true\"}],\"isFile\":true,\"fileContent\":\"var event, obj, nodeData;\\n//console.log( 'NodeData Info: '+JSON.stringify( nodeData ) );\\n//console.log( 'Button Label: '+obj.data.name );\\n//console.log( 'Button Status: '+obj.data.checked );\\n\\nlet script = '';\\nlet params = '';\\nconst scriptPath = getProperty( 'scriptPath' );\\nconst g = getMainGraph();\\nlet onLoaded = function(){};\\n\\nswitch( obj.data.name ) {\\n  case 'Generate':\\n    setNodeDataField( nodeData, 'label', 'System Status: [Generating...]' );\\n    const onGenerated = function( msg ) {\\n      setNodeDataField( nodeData, 'label', 'System Status: [Generation...Done]\\\\n'+msg );\\n    }\\n    generationRoot( nodeData, onGenerated );\\n    break;\\n  case 'Deploy':\\n    const modelFileURL = getMainGraphURL();\\n    const deployKey = nodeData.key;\\n    \\n    script = `generateSystemLib.js`;\\n    params = `modelFileURL=${modelFileURL}&deployKey=${deployKey}`;\\n    const onLoaded = function( msg ) {\\n      setNodeDataField( nodeData, 'label', 'System Status: [DEPLOYED]\\\\n'+msg );\\n    }\\n    break;\\n  case 'Start':\\n    script = 'serverManager';\\n    params = 'start '+scriptPath;\\n    setNodeDataField( nodeData, 'label', 'System Status: [STARTED]' );\\n    break;\\n  case 'Stop':\\n    script = 'serverManager';\\n    params = 'stop '+scriptPath;\\n    setNodeDataField( nodeData, 'label', 'System Status: [STOPPED]' );\\n    break;\\n}\\n\\nif( script ) {\\n  const cmd = `${script}${( params? '?'+params: '')}`;\\n  executeScript( cmd, onLoaded );\\n}\\n\\nfunction getProperty( name ) {\\n  const props_2 = [ ...nodeData.props_ ];\\n  for( const row of props_2 ) {\\n    if( row.name == name ) {\\n      return( row.value );\\n    }\\n  }\\n  return( '' );\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":6,\"location\":\"250 1310\",\"editorPosition\":[40,954,665,1055]},\n{\"label\":\"HyperGraphRoot/3.0\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":7,\"location\":\"-521.5 1510.525390625\"},\n{\"label\":\"AppRoot\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":8,\"location\":\"-501 1533.68359375\",\"group\":7},\n{\"label\":\"system\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":9,\"location\":\"-480.5 1556.841796875\",\"group\":8},\n{\"label\":\"client\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":10,\"location\":\"-460 1580\",\"group\":9},\n{\"label\":\"GenerationRoot Library\",\"color\":\"orange\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"\\nfunction generationRoot( startNodeData, onGenerated ) {\\n  console.log( 'Generating...' );\\n  \\n  // Setup graph information\\n  if( !graphData.startNodeData ) {\\n    // Generation Info\\n    graphData.startNodeData = startNodeData;\\n    graphData.onGenerated = onGenerated;\\n    // Initialize graph info\\n    graphData.g = getMainGraph();\\n    graphData.modelId = 'main';\\n  }\\n  \\n  // Call load libraries and set info\\n  if( !appData.isLineBlockGeneratorLoaded ) {\\n    appData.isLineBlockGeneratorLoaded = true;\\n    \\n    const scriptList = [\\n      'lib/Generators/3.10/lib/GeneratorsConfig.js',\\n      'lib/Generators/3.10/lib/LineBlockGenerator.js',\\n      ];\\n    loadScriptList( scriptList, startGeneration );\\n  } else {\\n    // Info already set, let's start\\n    startGeneration();\\n  }\\n}\\nfunction startGeneration() {\\n  // Initialize tempalte generator\\n  if( !graphData.lbg ) {\\n    graphData.lbg = new LineBlockGenerator();\\n  }\\n  \\n  // Reset counters\\n  graphData.count = {\\n    fileCount: 0,\\n    dirCount: 0,\\n    nodeCount: 0,\\n  };\\n  \\n  // Initialize model navigation\\n  const model = graphData.g.getJSONModel();\\n  graphData.me = new ModelExplorer();\\n  graphData.me.setJSONModel( graphData.modelId, model );\\n  \\n  // Initialize Template Manager\\n  graphData.lb = new LineBlockGenerator();\\n  \\n  // Get deployment node\\n  graphData.isOverwrite = graphData.me.getProperty( graphData.modelId, \\n                                                    graphData.startNodeData, \\n                                                    'isOverwrite', true );\\n  \\n  // Get output link from name port\\n  const outDataList = graphData.me.getNodeListFanOutByNodeKey( graphData.modelId, \\n                                                               graphData.startNodeData.key );\\n\\n  // Loop over out nodes\\n  for( const outData of outDataList ) {\\n    // Count dir\\n    ++graphData.count.dirCount;\\n    // Generate group\\n    generateGroup( outData );\\n  }\\n    \\n  // Simulation of done\\n  setTimeout( generationDone, 2*1000 );\\n}\\nfunction generationDone() {\\n  if( graphData.onGenerated ) {\\n    const msg = `Dirs: ${graphData.count.dirCount} - `+\\n                `Files: ${graphData.count.fileCount} - `+\\n                `Nodes: ${graphData.count.nodeCount}`;\\n    graphData.onGenerated( msg );\\n  }\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":12,\"location\":\"1170 1120\",\"isIncludeScript\":true,\"editorPosition\":[715,957,657,1069]},\n{\"label\":\"startServer.sh\",\"color\":\"gray\",\"size\":\"180 35\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"Shell\",\"fileType\":\"application/x-shellscript\",\"fileURL\":\"/fileServer/01/38.sh\",\"key\":17,\"location\":\"-159 1550\",\"group\":9},\n{\"label\":\"MainHTMLPage\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":20,\"location\":\"-1639.6826171875 1597.3500000000001\",\"color\":\"green\",\"colorSwap\":\"gray\"},\n{\"label\":\"HyperGraph 3.0 Base\",\"category\":\"CodeFlow_FeatureOnOff\",\"size\":\"338 40\",\"color\":\"green\",\"buttons_\":[{\"name\":\"\",\"checked\":true,\"color\":\"RebeccaPurple\"}],\"key\":22,\"location\":\"210 1089.95\",\"group\":23},\n{\"label\":\"Releases & Features\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":23,\"location\":\"190 1090\"},\n{\"label\":\"MainHTMLPage\",\"category\":\"CodeFlow_Feature\",\"size\":\"180 40\",\"color\":\"green\",\"buttons_\":[{\"name\":\"\",\"checked\":true,\"color\":\"RebeccaPurple\"}],\"key\":26,\"location\":\"618 1090.05\",\"group\":23},\n{\"label\":\"Main Web Page\",\"category\":\"CodeFlow_Code\",\"size\":\"180 100\",\"color\":\"lightsalmon\",\"props_\":[],\"in_\":[{\"portId\":\"include\",\"name\":\"include\"},{\"portId\":\"script\",\"name\":\"script\"},{\"portId\":\"style\",\"name\":\"style\"},{\"portId\":\"body\",\"name\":\"body\"}],\"out_\":[{\"portId\":\"html\",\"name\":\"html\"}],\"isFile\":true,\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":21,\"location\":\"-980.317 1577.5\",\"group\":20,\"fileContent\":\"<!--[# Begin html #]-->\\n<!--\\n=============================================================================\\nLicensed Materials - Property of Frank Joublin and Antonio Ceravola.\\n(C) Copyright Frank Joublin and Antonio Ceravola. 2021, All Rights Reserved.\\nFrance Government Users Restricted Rights - Use, duplication or disclosure\\nrestricted by GSA ADP Schedule Contract with Frank Joublin and Antonio Ceravola.\\n=============================================================================\\nModule: MDDTools Main Web Frontend\\nDate: 10.07.2020\\n=============================================================================\\n-->\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset='utf-8'>\\n  <title>HyperGraph 3.0</title>\\n  \\n  <!-- List here all includes -->\\n  <!--[# Insert include #]-->\\n  \\n  <!-- List here all styles -->\\n  <style>\\n    body {\\n      background-color: gray;\\n      overflow: hidden;\\n      margin: 0;\\n    }\\n    <!--[# Insert style #]-->\\n  </style>\\n  \\n  <!-- List here all scripts -->\\n  <!--[# Insert script #]-->\\n<body>\\n <h1>HyperGraph 3.0</h1>\\n <!--[# Insert body #]-->\\n</body>\\n</html>\\n<!--[# End html #]-->\",\"editorPosition\":[2121,994,669,426]},\n{\"label\":\"GenerateNodes Library\",\"color\":\"orange\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"\\nfunction generateGroup( gData ) {\\n  const gDataKey = gData.key;\\n  const dataList = graphData.me.getNodeListIf( graphData.modelId, \\n                                             (d)=> d.group == gDataKey );\\n  \\n  for( const data of dataList ) {\\n    if( data.isGroup ) {\\n      // Count dir\\n      ++graphData.count.dirCount;\\n      // Generate group\\n      generateGroup( data );\\n    } else if( data.category.startsWith( 'Hierarchy_CodeIn' ) ) {\\n      // Generate File\\n      \\n      traverseNode( data);\\n    }\\n  }\\n}\\nfunction traverseNode( data ) {\\n  // Get input link into data node\\n  const inDataList = graphData.me.getNodeListFanInByNodeKey( graphData.modelId,\\n                                                             data.key );\\n  // Loop over in nodes\\n  for( const inData of inDataList ) {\\n    if( Engine_isNodeEnabled( inData ) ) {\\n      traverseNode( inData );\\n    }\\n  }\\n  \\n  const isFile = ( data.category.startsWith( 'Hierarchy_CodeIn') );\\n  if( isFile ) {\\n    // Count file\\n    ++graphData.count.fileCount;\\n  } else {\\n    // Count nodes\\n    ++graphData.count.nodeCount;\\n  }\\n  \\n  // Execute doCompute\\n  console.log( 'doCompute [', data.key, ']', data.label || data.category );\\n  Engine_doCompute( data );\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":19,\"location\":\"1170 1290\",\"isIncludeScript\":true,\"editorPosition\":[1474,451,611,723]},\n{\"label\":\"Diagram Div\",\"category\":\"CodeFlow_Code\",\"size\":\"180 100\",\"color\":\"lightsalmon\",\"props_\":[],\"in_\":[{\"portId\":\"in0\",\"name\":\"in0\"},{\"portId\":\"in1\",\"name\":\"in1\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"isFile\":true,\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":24,\"location\":\"-1570 1489.9\",\"group\":20,\"fileContent\":\"<!--[# Begin out #]-->\\n<!--\\n=============================================================================\\nLicensed Materials - Property of Frank Joublin and Antonio Ceravola.\\n(C) Copyright Frank Joublin and Antonio Ceravola. 2021, All Rights Reserved.\\nFrance Government Users Restricted Rights - Use, duplication or disclosure\\nrestricted by GSA ADP Schedule Contract with Frank Joublin and Antonio Ceravola.\\n=============================================================================\\nModule: MDDTools Main Web Frontend\\nDate: 10.07.2020\\n=============================================================================\\n-->\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset='utf-8'>\\n  <title>HyperGraph 3.0</title>\\n<body>\\n</body>\\n <h1>HyperGraph 3.0</h1>\\n</html>\\n<!--[# End out #]-->\",\"editorPosition\":[439,182,683,568]},\n{\"label\":\"Window Div\",\"category\":\"CodeFlow_Code\",\"size\":\"180 100\",\"color\":\"lightsalmon\",\"props_\":[],\"in_\":[{\"portId\":\"in0\",\"name\":\"in0\"},{\"portId\":\"in1\",\"name\":\"in1\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"isFile\":true,\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":27,\"location\":\"-1580 1679.9\",\"group\":20,\"fileContent\":\"<!--[# Begin out #]-->\\n<!--\\n=============================================================================\\nLicensed Materials - Property of Frank Joublin and Antonio Ceravola.\\n(C) Copyright Frank Joublin and Antonio Ceravola. 2021, All Rights Reserved.\\nFrance Government Users Restricted Rights - Use, duplication or disclosure\\nrestricted by GSA ADP Schedule Contract with Frank Joublin and Antonio Ceravola.\\n=============================================================================\\nModule: MDDTools Main Web Frontend\\nDate: 10.07.2020\\n=============================================================================\\n-->\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset='utf-8'>\\n  <title>HyperGraph 3.0</title>\\n<body>\\n</body>\\n <h1>HyperGraph 3.0</h1>\\n</html>\\n<!--[# End out #]-->\",\"editorPosition\":[439,182,683,568]},\n{\"label\":\"Status Div\",\"category\":\"CodeFlow_Code\",\"size\":\"180 100\",\"color\":\"lightsalmon\",\"props_\":[],\"in_\":[{\"portId\":\"in0\",\"name\":\"in0\"},{\"portId\":\"in1\",\"name\":\"in1\"}],\"out_\":[{\"portId\":\"include\",\"name\":\"include\"},{\"portId\":\"script\",\"name\":\"script\"},{\"portId\":\"style\",\"name\":\"style\"},{\"portId\":\"body\",\"name\":\"body\"}],\"isFile\":true,\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":29,\"location\":\"-1570 1299.8000000000002\",\"group\":20,\"fileContent\":\"\\n<!--\\n=============================================================================\\nLicensed Materials - Property of Frank Joublin and Antonio Ceravola.\\n(C) Copyright Frank Joublin and Antonio Ceravola. 2021, All Rights Reserved.\\nFrance Government Users Restricted Rights - Use, duplication or disclosure\\nrestricted by GSA ADP Schedule Contract with Frank Joublin and Antonio Ceravola.\\n=============================================================================\\nModule: MDDTools Main Web Frontend\\nDate: 10.07.2020\\n=============================================================================\\n-->\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset='utf-8'>\\n  <title>HyperGraph 3.0 - Status Test</title>\\n  <style>\\n    /*[# Begin style #]*/\\n    #mdd-status {\\n      position: absolute;\\n      width: 100%;\\n      height: 100%;\\n      box-sizing: border-box;\\n      border: 10px;\\n      border-style: solid;\\n      border-color: rgba(125, 125, 125, 0.6);\\n      z-index: 100;\\n      pointer-events: none;\\n    }\\n    #mdd-status.default {\\n      border-color: rgba(125, 125, 125, 0.6);\\n    }\\n     #mdd-status.error {\\n      border-color: rgba(255, 0, 0, 0.6);\\n    }\\n     #mdd-status.warning {\\n      border-color: rgba(255, 221, 0, 0.6);\\n    }\\n    #mdd-status.saved {\\n      animation-name: saved;\\n      animation-duration: 2s;\\n    }\\n    @keyframes saved {\\n      from { border-color: rgba(123, 255, 0, 0.6); }\\n      to { border-color: rgba(125, 125, 125, 0.6); }\\n    }\\n    /*[# End style #]*/\\n  </style>\\n<body>\\n</body>\\n <!--[# Begin body #]-->\\n <div id=\\\"mdd-status\\\"></div>\\n <!--[# End body #]-->\\n</html>\",\"editorPosition\":[307,234,692,909]},\n{\"label\":\"ContextMenu Div\",\"category\":\"CodeFlow_Code\",\"size\":\"180 100\",\"color\":\"lightsalmon\",\"props_\":[],\"in_\":[{\"portId\":\"in0\",\"name\":\"in0\"},{\"portId\":\"in1\",\"name\":\"in1\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"isFile\":true,\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":31,\"location\":\"-1570 1889.9\",\"group\":20,\"fileContent\":\"<!--[# Begin out #]-->\\n<!--\\n=============================================================================\\nLicensed Materials - Property of Frank Joublin and Antonio Ceravola.\\n(C) Copyright Frank Joublin and Antonio Ceravola. 2021, All Rights Reserved.\\nFrance Government Users Restricted Rights - Use, duplication or disclosure\\nrestricted by GSA ADP Schedule Contract with Frank Joublin and Antonio Ceravola.\\n=============================================================================\\nModule: MDDTools Main Web Frontend\\nDate: 10.07.2020\\n=============================================================================\\n-->\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset='utf-8'>\\n  <title>HyperGraph 3.0</title>\\n<body>\\n</body>\\n <h1>HyperGraph 3.0</h1>\\n</html>\\n<!--[# End out #]-->\",\"editorPosition\":[439,182,683,568]},\n{\"label\":\"\",\"category\":\"CodeFlow_Merge\",\"color\":\"white\",\"props_\":[],\"in_\":[{\"portId\":\"in0\",\"name\":\"in0\"},{\"portId\":\"in1\",\"name\":\"in1\"},{\"portId\":\"in2\",\"name\":\"in2\"},{\"portId\":\"in3\",\"name\":\"in3\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":34,\"location\":\"-1200 1539.9\",\"group\":20},\n{\"label\":\"Nodes DoCompute\",\"color\":\"Coral\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"\\nfunction CodeFlow_Code_doCompute( data ) {\\n  console.log( 'Code Compute' );\\n  \\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  // Make sure all input have a value\\n  Engine_setInputDefault( data, null );\\n  \\n  // Process template\\n  graphData.lbg.setLanguage( 'text' );\\n  const template = data.fileContent;\\n  graphData.lbg.setTemplate( template );\\n  graphData.lbg.process( ni.input );\\n  \\n  // Generate all outputs\\n  const outNameList = Engine_getOutputNameList( data, true );\\n  for( const outName of outNameList ) {\\n    const value = graphData.lbg.extractLineBlock( outName, true ); // Trim indentation\\n    Engine_fireOutput( data, outName, value );\\n  }\\n}\\nfunction CodeFlow_Merge_doCompute( data ) {\\n  console.log( 'Merge Compute' );\\n  \\n  const value = [];\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  // Get list of input names\\n  const inNameList = Engine_getInputNameList( data );\\n  for( const inName of inNameList ) {\\n    if( ni.input[inName] ) {\\n      value.push( ...ni.input[inName] );\\n    }\\n  }\\n  \\n  Engine_fireOutput( data, 'out', value );\\n}\\n\\nfunction Hierarchy_CodeInFile_doCompute( data ) {\\n  console.log( 'CodeInFile Compute' );\\n  \\n  if( Engine_isInputConnected( data ) ) {\\n    // Make sure all input have a value\\n    Engine_setInputDefault( data, '' );\\n    // Get input value\\n    const value = Engine_getInput( data, '*', '' );\\n    // Get a copy of the data (avoid changing original data)\\n    const dataCopy = getNodeData( data.key, true );\\n    // Set file content to be saved\\n    dataCopy.fileContent = ( Array.isArray( value )? value.join( '\\\\n' ): value );\\n    saveNodeContent( dataCopy, ()=> console.log( '***Data Saved***' ) );\\n  }\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":28,\"location\":\"1170 1470\",\"isIncludeScript\":true,\"editorPosition\":[1478,1183,603,875]},\n{\"label\":\"Engine Base Library\",\"color\":\"tan\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"//------------------------------\\n// Engine Base Library\\n//------------------------------\\n\\n// Initialize Engine\\nif( !graphData.nodeInstance ) {\\n  // Persistent link data for nodes\\n  graphData.nodeInstance = {};\\n  graphData.engineInstance = {\\n    currNodeSelectionKey: -1, // Animation\\n  };\\n}\\n\\n//------------------------------\\n// Engine Base Library\\n//------------------------------\\nfunction Engine_getNodeInstance( data ) {\\n  // If node not existing => create it\\n  if( !graphData.nodeInstance[data.key] ) {\\n    graphData.nodeInstance[data.key] = {\\n      property: {},\\n      input: {},\\n      inputState: {},\\n      output: {},\\n      isCompute: false,\\n    };\\n  }\\n  // Return node instance\\n  return( graphData.nodeInstance[data.key] );\\n}\\nfunction Engine_isNodeEnabled( data ) {\\n  let result = true;\\n  if( data.group != undefined ) {\\n    const gData = graphData.me.getNode( graphData.me.modelId, data.group );\\n    result = ( gData && ( gData.color.toLowerCase() == 'green' ) );\\n  }\\n  return( result );\\n}\\nfunction Engine_getInputLinkDataList( data, name ) {\\n  const result = [];\\n  const pushInDataList = ()=> {\\n    // Get input link from port name\\n    const inDataList = graphData.me.getLinkListFanInByNodeKey( graphData.modelId, \\n                                                     data.key,\\n                                                     name );\\n    for( const inData of inDataList ) {\\n      if( Engine_isNodeEnabled( inData ) ) {\\n        result.push( inData );\\n      }\\n    }\\n  };\\n  \\n  // Check if name exist\\n  if( data.in_ ) {\\n    for( const inInfo of data.in_ ) {\\n      if( inInfo.portId == name ) {\\n        pushInDataList();\\n        break;\\n      }\\n    }\\n  } else {\\n    name = undefined;  // No input name in this case\\n    pushInDataList();\\n  }\\n  return( result );\\n}\\nfunction Engine_getOutputLinkDataList( data, name ) {\\n  const result = [];\\n  const pushOutDataList = ()=> {\\n    // Get output link from port name\\n    const outDataList = graphData.me.getLinkListFanOutByNodeKey( graphData.modelId,\\n                                                    data.key,\\n                                                    name );\\n    for( const outData of outDataList ) {\\n      if( Engine_isNodeEnabled( outData ) ) {\\n        result.push( outData );\\n      }\\n    }\\n  };\\n  \\n  // Check if name exist\\n  if( data.out_ ) {\\n    for( const outInfo of data.out_ ) {\\n      if( outInfo.portId == name ) {\\n        pushOutDataList();\\n        break;\\n      }\\n    } \\n  } else {\\n    name = undefined; // No input name in this case\\n    pushOutDataList();\\n  }\\n  return( result );\\n}\\nfunction Engine_fetchInputs( data ) {\\n  const storeValue = ( data, fromInName, toInName, defaultValue )=> {\\n    const inLinkList = graphData.me.getLinkListFanInByNodeKey( graphData.modelId,\\n                                                            data.key,\\n                                                            fromInName );\\n    for( const inLink of inLinkList ) {\\n      // Get source node\\n      const outData = graphData.me.getNode( graphData.me.modelId, inLink.from );\\n      \\n      if( Engine_isNodeEnabled( outData ) ) {\\n        const value = Engine_getOutput( outData, inLink.fromPort, defaultValue );\\n        Engine_setInput( data, toInName, value );\\n        break;\\n      }\\n    }\\n  }\\n  // Loop over all connected inputs\\n  const inNameList = Engine_getInputNameList( data, true );\\n  // Case of component with input ports\\n  if( inNameList.length ) {\\n    for( const inName of inNameList ) {\\n      // Store in input inName the first enabled link value comming into it\\n      storeValue( data, inName, inName, null );\\n    }\\n  } else {\\n    // Case of component without input ports\\n    // Store in input '*' the first enabled link value comming into it\\n    storeValue( data, undefined, '*', undefined );\\n  }\\n}\\nfunction Engine_isInputConnected( data, name ) {\\n  // Get input link list\\n  const list = Engine_getInputLinkDataList( data, name );\\n  // If input is connected\\n  return( list && list.length )\\n}\\nfunction Engine_isOutputConnected( data, name ) {\\n  // Get output link list\\n  const list = Engine_getOutputLinkDataList( data, name );\\n  // If output is connected\\n  return( list && list.length )\\n}\\nfunction Engine_getInputNameList( data, isOnlyConnected ) {\\n  const result = []\\n  if( data.in_ ) {\\n    for( const inInfo of data.in_ ) {\\n      const name = inInfo.portId;\\n      // If we want only connected one => skip unconnected one\\n      if( ( isOnlyConnected != undefined ) && isOnlyConnected ) {\\n        if( !Engine_isInputConnected( data, name ) ) {\\n          continue;\\n        }\\n      }\\n      result.push( name );\\n    }\\n  }\\n  return( result );\\n}\\nfunction Engine_getOutputNameList( data, isOnlyConnected ) {\\n  const result = []\\n  if( data.out_ ) {\\n    for( const outInfo of data.out_ ) {\\n      const name = outInfo.portId;\\n      // If we want only connected one => skip unconnected one\\n      if( ( isOnlyConnected != undefined ) && isOnlyConnected ) {\\n        if( !Engine_isOutputConnected( data, name ) ) {\\n          continue;\\n        }\\n      }\\n      result.push( name );\\n    }\\n  }\\n  return( result );\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":30,\"location\":\"1560 1120\",\"isIncludeScript\":true,\"editorPosition\":[1577,611,1080,1444]},\n{\"label\":\"Engine Base API\",\"color\":\"tan\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"//------------------------------\\n// Engine Base API\\n//------------------------------\\nfunction Engine_get( data, name, defaultValue ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Set default value if property did not exist\\n  if( ni.property[name] == undefined ) {\\n    ni.property[name] = defaultValue;\\n  }\\n  // Return property value\\n  return( ni.property[name] );\\n}\\nfunction Engine_set( data, name, value ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Set property value\\n  ni.property[name] = value;\\n}\\nfunction Engine_getInput( data, name, defaultValue ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Update default value\\n  if( ni.input[name] == undefined ) {\\n    ni.input[name] = defaultValue;\\n  }\\n  return( ni.input[name] );\\n}\\nfunction Engine_setInput( data, name, value ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Update value\\n  ni.input[name] = value;\\n  // Update state\\n  if( !ni.inputState[name] ) {\\n    ni.inputState[name] = {};\\n  }\\n  ni.inputState[name].isNew = true;\\n}\\nfunction Engine_setInputDefault( data, defaultValue ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  // Get list of input names\\n  const inNameList = Engine_getInputNameList( data );\\n  for( const inName of inNameList ) {\\n    if( ni.input[inName] == undefined ) {\\n      ni.input[inName] = defaultValue;\\n    }\\n  }\\n}\\nfunction Engine_getLanguage( data ) {\\n  let result = 'text';\\n  if( data.fileType ) {\\n    const [format, language] = data.fileType.split( '/' );\\n    result = language;\\n  }\\n  return( result );\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":33,\"location\":\"1560 1400\",\"isIncludeScript\":true,\"editorPosition\":[3268,773,528,1240]},\n{\"label\":\"Engine Compute Library\",\"color\":\"tan\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"//------------------------------\\n// Engine Compute Library\\n//------------------------------\\nfunction Engine_getOutput( data, name, defaultValue ) {\\n  let result = defaultValue;\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  if( ni.output[name] != undefined ) {\\n    result = ni.output[name];\\n  }\\n  return( result );\\n}\\nfunction Engine_getComputeBarrier( data ) {\\n  let result = [];\\n  const cb = graphData.me.getProperty( graphData.modelId, \\n                                       data,\\n                                       'computeBarrier',\\n                                       null );\\n  if( cb ) {\\n    result = cb.split( ',' ).map( n => n.trim() );\\n  } else {\\n    result = Engine_getInputNameList( data );\\n  }\\n  return( result );\\n}\\nfunction Engine_updateInput( data, name, value ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  // If doCompute just executed => reset inputs isNew state\\n  if( ni.isCompute ) {\\n    for( const inName in ni.inputState ) {\\n      ni.inputState[inName].isNew = false;\\n    }\\n  }\\n  \\n  // Set new input value\\n  Engine_setInput( data, name, value );\\n  \\n  let isCompute = true;\\n  // Get input names for barrier\\n  const inNameList = Engine_getComputeBarrier( data );\\n  for( const inName of inNameList ) {\\n    if( Engine_isInputConnected( data, inName ) ) {\\n      let isNewInput = false;\\n      if( ni.inputState[inName] ) {\\n        isNewInput = ni.inputState[inName].isNew;\\n      }\\n      isCompute &&= isNewInput;\\n      // Short cirtuit computation\\n      if( !isCompute ) {\\n        break;\\n      }\\n    }\\n  }\\n  // Update compute status\\n  ni.isCompute = isCompute;\\n}\\nfunction Engine_fireOutput( data, name, value ) {\\n  // Fire only connected outputs\\n  if( Engine_isOutputConnected( data, name ) ) {\\n    // Get node instance\\n    const ni = Engine_getNodeInstance( data );\\n    \\n    // Save output\\n    ni.output[name] = value;\\n  }\\n}\\nfunction Engine_doCompute( data ) {\\n  if( globalThis[ `${data.category}_doCompute`] ) {\\n    // Get all input values\\n    Engine_fetchInputs( data );\\n    // Execute compute fungion\\n    globalThis[ `${data.category}_doCompute`]( data );\\n  } else {\\n    console.log( 'Compute not found for', data.category );\\n  }\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":36,\"location\":\"1560 1260\",\"isIncludeScript\":true,\"editorPosition\":[1379,958,704,1069]}\n],\n  \"linkDataArray\": [\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"\",\"toPort\":\"\",\"from\":6,\"to\":7,\"points\":[250,1311.8146816454578,83.5,1313.0841963259986],\"key\":-1,\"color\":\"YellowGreen\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"Feature\",\"toPort\":\"Feature\",\"from\":22,\"to\":26,\"points\":[548,1090.0237991266376,608,1090.05,618,1090.05],\"key\":-2,\"color\":\"RebeccaPurple\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"html\",\"toPort\":\"\",\"from\":21,\"to\":5,\"points\":[-752.8687578125,1577.5,-742.8687578125,1577.5,-440,1577.5],\"key\":-3,\"color\":\"lightsalmon\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in1\",\"from\":24,\"to\":34,\"points\":[-1349.5380859375,1489.9,-1339.5380859375,1489.9,-1249.6826171875,1529.9,-1239.6826171875,1529.9],\"key\":-5,\"color\":\"lightsalmon\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in2\",\"from\":27,\"to\":34,\"points\":[-1359.5380859375,1679.9,-1349.5380859375,1679.9,-1249.6826171875,1549.9,-1239.6826171875,1549.9],\"key\":-6,\"color\":\"lightsalmon\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in3\",\"from\":31,\"to\":34,\"points\":[-1349.5380859375,1889.9,-1339.5380859375,1889.9,-1249.6826171875,1569.9,-1239.6826171875,1569.9],\"key\":-7,\"color\":\"lightsalmon\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"body\",\"from\":34,\"to\":21,\"points\":[-1119.5380859375,1539.9,-1109.5380859375,1539.9,-1055.682234375,1607.5,-1045.682234375,1607.5],\"key\":-8,\"color\":\"white\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"body\",\"toPort\":\"in0\",\"from\":29,\"to\":34,\"points\":[-1324.634765625,1329.8000000000002,-1314.634765625,1329.8000000000002,-1249.6826171875,1509.9,-1239.6826171875,1509.9],\"key\":-9,\"color\":\"lightsalmon\"}\n]}"
}