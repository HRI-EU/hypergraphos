{
  "dslNameList": [
    "DefaultDSL",
    "HierarchyDSL",
    "ThinkingDSL",
    "TextLabelsDSL",
    "CodeFlowDSL",
    "ConnectorsDSL",
    "PicturesDSL",
    "TreeDSL",
    "KanbanDSL",
    "DataFlowDSL"
  ],
  "view": {
    "scale": 1.9673491394390477,
    "position": [
      8897.445575249587,
      2408.4489421438834
    ],
    "isGridOn": false
  },
  "model": "{ \"class\": \"GraphLinksModel\",\n  \"copiesArrays\": true,\n  \"copiesArrayObjects\": true,\n  \"copiesKey\": false,\n  \"linkKeyProperty\": \"key\",\n  \"linkFromPortIdProperty\": \"fromPort\",\n  \"linkToPortIdProperty\": \"toPort\",\n  \"nodeDataArray\": [\n{\"label\":\"Smile 3 Dialog\",\"category\":\"TextLabels_Size6\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"1796 240\",\"key\":0,\"location\":\"8300 1710\"},\n{\"label\":\"Model\",\"size\":\"180 60\",\"category\":\"Hierarchy_Model\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphModel$\",\"key\":4,\"location\":\"8090 1640\"},\n{\"label\":\"Selection\",\"size\":\"180 60\",\"category\":\"Hierarchy_Selection\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphSelection$\",\"key\":6,\"location\":\"8090 1730\"},\n{\"label\":\"Engine Base Library 1.0\",\"color\":\"tan\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"//------------------------------\\n// Engine Base Library\\n//------------------------------\\n\\n// Initialize Engine\\nif( !graphData.nodeInstance ) {\\n  Engine_updateGraphModel();\\n  Engine_clearNodeInstance();\\n}\\n\\n//------------------------------\\n// Engine Base Library\\n//------------------------------\\nfunction Engine_updateGraphModel() {\\n  graphData.g = getMainGraph();\\n  graphData.modelId = 'main';\\n  \\n  // Initialize model navigation\\n  const model = graphData.g.getJSONModel();\\n  graphData.me = new ModelExplorer();\\n  graphData.me.setJSONModel( graphData.modelId, model );\\n}\\nfunction Engine_getNodeInstance( data ) {\\n  // If node not existing => create it\\n  if( !graphData.nodeInstance[data.key] ) {\\n    graphData.nodeInstance[data.key] = {\\n      property: {},\\n      input: {},\\n      inputState: {},\\n      output: {},\\n      isCompute: false,\\n    };\\n  }\\n  // Return node instance\\n  return( graphData.nodeInstance[data.key] );\\n}\\nfunction Engine_clearNodeInstance() {\\n  // Persistent link data for nodes\\n  graphData.nodeInstance = {};\\n  graphData.engineInstance = {\\n    currNodeSelectionKey: -1, // Animation\\n  };\\n}\\nfunction Engine_isNodeEnabled( data ) {\\n  let result = true;\\n  if( data.isGroup ) {\\n    result = ( ( data.color == undefined ) || ( data.color.toLowerCase() == 'green' ) );\\n  } else if( data.group !== undefined ) {\\n    const gData = graphData.me.getNode( graphData.me.modelId, data.group );\\n    result = ( gData && ( gData.color.toLowerCase() == 'green' ) );\\n  }\\n  return( result );\\n}\\nfunction Engine_getInputLinkDataList( data, name ) {\\n  const result = [];\\n  const pushInDataList = ()=> {\\n    // Get input link from port name\\n    const inDataList = graphData.me.getLinkListFanInByNodeKey( graphData.modelId, \\n                                                     data.key,\\n                                                     name );\\n    for( const inData of inDataList ) {\\n      if( Engine_isNodeEnabled( inData ) ) {\\n        result.push( inData );\\n      }\\n    }\\n  };\\n  \\n  // Check if name exist\\n  if( data.in_ ) {\\n    for( const inInfo of data.in_ ) {\\n      if( inInfo.portId == name ) {\\n        pushInDataList();\\n        break;\\n      }\\n    }\\n  } else {\\n    name = undefined;  // No input name in this case\\n    pushInDataList();\\n  }\\n  return( result );\\n}\\nfunction Engine_getOutputLinkDataList( data, name ) {\\n  const result = [];\\n  const pushOutDataList = ()=> {\\n    // Get output link from port name\\n    const outDataList = graphData.me.getLinkListFanOutByNodeKey( graphData.modelId,\\n                                                    data.key,\\n                                                    name );\\n    for( const outData of outDataList ) {\\n      if( Engine_isNodeEnabled( outData ) ) {\\n        result.push( outData );\\n      }\\n    }\\n  };\\n  \\n  // Check if name exist\\n  if( data.out_ ) {\\n    for( const outInfo of data.out_ ) {\\n      if( outInfo.portId == name ) {\\n        pushOutDataList();\\n        break;\\n      }\\n    } \\n  } else {\\n    name = undefined; // No input name in this case\\n    pushOutDataList();\\n  }\\n  return( result );\\n}\\nfunction Engine_fetchInputs( data ) {\\n  const storeValue = ( data, fromInName, toInName, defaultValue )=> {\\n    const inLinkList = graphData.me.getLinkListFanInByNodeKey( graphData.modelId,\\n                                                            data.key,\\n                                                            fromInName );\\n    for( const inLink of inLinkList ) {\\n      // Get source node\\n      const outData = graphData.me.getNode( graphData.me.modelId, inLink.from );\\n      \\n      if( Engine_isNodeEnabled( outData ) ) {\\n        const value = Engine_getOutput( outData, inLink.fromPort, defaultValue );\\n        Engine_setInput( data, toInName, value );\\n        break;\\n      }\\n    }\\n  }\\n  // Loop over all connected inputs\\n  const inNameList = Engine_getInputNameList( data, true );\\n  // Case of component with input ports\\n  if( inNameList.length ) {\\n    for( const inName of inNameList ) {\\n      // Store in input inName the first enabled link value comming into it\\n      storeValue( data, inName, inName, null );\\n    }\\n  } else {\\n    // Case of component without input ports\\n    // Store in input '*' the first enabled link value comming into it\\n    storeValue( data, undefined, '*', undefined );\\n  }\\n}\\nfunction Engine_isInputConnected( data, name ) {\\n  // Get input link list\\n  const list = Engine_getInputLinkDataList( data, name );\\n  // If input is connected\\n  return( list && list.length )\\n}\\nfunction Engine_isOutputConnected( data, name ) {\\n  // Get output link list\\n  const list = Engine_getOutputLinkDataList( data, name );\\n  // If output is connected\\n  return( list && list.length )\\n}\\nfunction Engine_getInputNameList( data, isOnlyConnected ) {\\n  const result = []\\n  if( data.in_ ) {\\n    for( const inInfo of data.in_ ) {\\n      const name = inInfo.portId;\\n      // If we want only connected one => skip unconnected one\\n      if( ( isOnlyConnected != undefined ) && isOnlyConnected ) {\\n        if( !Engine_isInputConnected( data, name ) ) {\\n          continue;\\n        }\\n      }\\n      result.push( name );\\n    }\\n  }\\n  return( result );\\n}\\nfunction Engine_getOutputNameList( data, isOnlyConnected ) {\\n  const result = []\\n  if( data.out_ ) {\\n    for( const outInfo of data.out_ ) {\\n      const name = outInfo.portId;\\n      // If we want only connected one => skip unconnected one\\n      if( ( isOnlyConnected != undefined ) && isOnlyConnected ) {\\n        if( !Engine_isOutputConnected( data, name ) ) {\\n          continue;\\n        }\\n      }\\n      result.push( name );\\n    }\\n  }\\n  return( result );\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":5,\"location\":\"12880 3190\",\"isIncludeScript\":false,\"editorPosition\":[1113,640,552,964]},\n{\"label\":\"Engine Code 1.4\",\"color\":\"orange\",\"size\":\"290 140\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"JavaScript\",\"fileType\":\"text/javascript\",\"fileURL\":\"/fileServer/01/72.js\",\"key\":7,\"location\":\"9370 3050\",\"isIncludeScript\":true,\"editorPosition\":[4720,25,539,1661]},\n{\"label\":\"GenerationRoot Library 1.0\",\"color\":\"orange\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"\\nfunction generationRoot( startNodeData, onGenerated ) {\\n  console.log( 'Generating...' );\\n  \\n  // Setup graph information\\n  if( !graphData.startNodeData ) {\\n    // Generation Info\\n    graphData.startNodeData = startNodeData;\\n    graphData.onGenerated = onGenerated;\\n    // Initialize graph info\\n    graphData.g = getMainGraph();\\n    graphData.modelId = 'main';\\n  }\\n\\n  // Info already set, let's start\\n  startGeneration();\\n}\\nfunction startGeneration() {\\n  // Initialize tempalte generator\\n  if( !graphData.lbg ) {\\n    graphData.lbg = new LineBlockGenerator();\\n  }\\n  \\n  // Reset counters\\n  graphData.count = {\\n    fileCount: 0,\\n    dirCount: 0,\\n    nodeCount: 0,\\n  };\\n  // Reset nodeInstance data (input/outputs)\\n  Engine_clearNodeInstance();\\n  \\n  // Initialize model navigation\\n  const model = graphData.g.getJSONModel();\\n  graphData.me = new ModelExplorer();\\n  graphData.me.setJSONModel( graphData.modelId, model );\\n  \\n  // Initialize Template Manager\\n  graphData.lb = new LineBlockGenerator();\\n  \\n  // Get deployment node\\n  graphData.isOverwrite = graphData.me.getProperty( graphData.modelId, \\n                                                    graphData.startNodeData, \\n                                                    'isOverwrite', null, true );\\n  \\n  // Get output link from name port\\n  const outDataList = graphData.me.getNodeListFanOutByNodeKey( graphData.modelId, \\n                                                               graphData.startNodeData.key );\\n\\n  // Loop over out nodes\\n  for( const outData of outDataList ) {\\n    if( outData.isGroup ) {\\n      if( !Engine_isNodeEnabled( outData ) ) {\\n        continue;\\n      }\\n    }\\n    // Count dir\\n    ++graphData.count.dirCount;\\n    // Generate group\\n    generateGroup( outData );\\n  }\\n    \\n  // Simulation of done\\n  setTimeout( generationDone, 2*1000 );\\n}\\nfunction generationDone() {\\n  if( graphData.onGenerated ) {\\n    const msg = `Dirs: ${graphData.count.dirCount} - `+\\n                `Files: ${graphData.count.fileCount} - `+\\n                `Nodes: ${graphData.count.nodeCount}`;\\n    graphData.onGenerated( msg );\\n  }\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":8,\"location\":\"12560 3200\",\"isIncludeScript\":false,\"editorPosition\":[15,785,592,1289]},\n{\"label\":\"Engine Base API 1.0\",\"color\":\"tan\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"//------------------------------\\n// Engine Base API\\n//------------------------------\\nfunction Engine_get( data, name, defaultValue ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Set default value if property did not exist\\n  if( ni.property[name] === undefined ) {\\n    ni.property[name] = defaultValue;\\n  }\\n  // Return property value\\n  return( ni.property[name] );\\n}\\nfunction Engine_set( data, name, value ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Set property value\\n  ni.property[name] = value;\\n}\\nfunction Engine_getInput( data, name, defaultValue ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Update default value\\n  if( ni.input[name] == undefined ) {\\n    ni.input[name] = defaultValue;\\n  }\\n  return( ni.input[name] );\\n}\\nfunction Engine_setInput( data, name, value ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  \\n  // Update value\\n  ni.input[name] = value;\\n  // Update state\\n  if( !ni.inputState[name] ) {\\n    ni.inputState[name] = {};\\n  }\\n  ni.inputState[name].isNew = true;\\n}\\nfunction Engine_setInputDefault( data, defaultValue ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  // Get list of input names\\n  const inNameList = Engine_getInputNameList( data );\\n  for( const inName of inNameList ) {\\n    if( ni.input[inName] == undefined ) {\\n      ni.input[inName] = defaultValue;\\n    }\\n  }\\n}\\nfunction Engine_getLanguage( data ) {\\n  let result = 'text';\\n  if( data.fileType ) {\\n    const [format, language] = data.fileType.split( '/' );\\n    result = language;\\n  }\\n  return( result );\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":9,\"location\":\"12880 3470\",\"isIncludeScript\":false,\"editorPosition\":[3268,773,528,1240]},\n{\"label\":\"Engine Compute Library 1.0\",\"color\":\"tan\",\"size\":\"286 111\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"//------------------------------\\n// Engine Compute Library\\n//------------------------------\\nfunction Engine_getOutput( data, name, defaultValue ) {\\n  let result = defaultValue;\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  if( ni.output[name] != undefined ) {\\n    result = ni.output[name];\\n  }\\n  return( result );\\n}\\nfunction Engine_getComputeBarrier( data ) {\\n  let result = [];\\n  const cb = graphData.me.getProperty( graphData.modelId, \\n                                       data,\\n                                       'computeBarrier',\\n                                       null );\\n  if( cb ) {\\n    result = cb.split( ',' ).map( n => n.trim() );\\n  } else {\\n    result = Engine_getInputNameList( data );\\n  }\\n  return( result );\\n}\\nfunction Engine_updateInput( data, name, value ) {\\n  // Get node instance\\n  const ni = Engine_getNodeInstance( data );\\n  // If doCompute just executed => reset inputs isNew state\\n  if( ni.isCompute ) {\\n    for( const inName in ni.inputState ) {\\n      ni.inputState[inName].isNew = false;\\n    }\\n  }\\n  \\n  // Set new input value\\n  Engine_setInput( data, name, value );\\n  \\n  let isCompute = true;\\n  // Get input names for barrier\\n  const inNameList = Engine_getComputeBarrier( data );\\n  for( const inName of inNameList ) {\\n    if( Engine_isInputConnected( data, inName ) ) {\\n      let isNewInput = false;\\n      if( ni.inputState[inName] ) {\\n        isNewInput = ni.inputState[inName].isNew;\\n      }\\n      isCompute &&= isNewInput;\\n      // Short cirtuit computation\\n      if( !isCompute ) {\\n        break;\\n      }\\n    }\\n  }\\n  // Update compute status\\n  ni.isCompute = isCompute;\\n}\\nfunction Engine_fireOutput( data, name, value ) {\\n  // Fire only connected outputs\\n  if( Engine_isOutputConnected( data, name ) ) {\\n    // Get node instance\\n    const ni = Engine_getNodeInstance( data );\\n    \\n    // Save output\\n    ni.output[name] = value;\\n  }\\n}\\nfunction Engine_doCompute( data ) {\\n  if( globalThis[ `${data.category}_doCompute`] ) {\\n    // Get all input values\\n    Engine_fetchInputs( data );\\n    // Execute compute fungion\\n    globalThis[ `${data.category}_doCompute`]( data );\\n  } else {\\n    console.log( 'Compute not found for', data.category );\\n  }\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":10,\"location\":\"12880 3330\",\"isIncludeScript\":false,\"editorPosition\":[1379,958,704,1069]},\n{\"label\":\"Root Function for Node Execution\",\"category\":\"TextLabels_Size3\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"363 107\",\"key\":11,\"location\":\"12840 3070\"},\n{\"label\":\"Engine_selectNode( nodeData )\\nEngine_get( keyOrData, name, defaultValue )\\nEngine_set( keyOrData, name, value )\\nEngine_getProperty( nodeData, name, defaultValue )\\nEngine_isInputNew( nodeData, name )\\nEngine_getInput( nodeData, name, defaultValue )\\nEngine_setInput( nodeData, name, value )\\nEngine_getInputNameList( nodeData )\\nEngine_clearInputs( nodeData, nameList )\\nEngine_doRun()\\nEngine_doStep()\\nEngine_doPause()\\nEngine_fireOutput( nodeData, name, value )\\nEngine_fireOutputStep( nodeData, name, value )\\nEngine_fireOutputFlow( nodeData, name, value )\\nEngine_fireInput( nodeData, name, value )\\nEngine_isOutputConnected( nodeData, name )\\nEngine_isInputConnected( nodeData, name )\\nEngine_isSelfLoop( nodeData, inName )\\nEngine_applyTemplate( templateStr, values, isKeepUnmatchedValues )\\nEngine_executeAction( nodeData, actionName )\\nEngine_initNodeStatus()\\nEngine_loadModel()\\nEngine_initialize( nodeData )\\nEngine_updateEngineNode( key )\\nEngine_updateProperty( nodeData )\\nEngine_getNextStepData()\\nEngine_clearStep( stepInfo )\\nEngine_addStep( stepInfo )\\nEngine_getInputLinkDataList( nodeData, name )\\nEngine_getOutputLinkDataList( nodeData, name )\\nEngine_getComputeBarrier( nodeData )\\nEngine_updateInput( nodeData, name, value, inCondition )\\nDataFlowDSL_Template( nodeData )\\nDataFlowDSL_Concatenate( nodeData, name, value )\\nDataFlowDSL_Data( nodeData, name, value )\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"1880 1930\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"key\":12,\"location\":\"10160 3050\"},\n{\"label\":\"Get API\",\"category\":\"DataFlow_TrigComponent\",\"size\":\"270 80\",\"buttons_\":[{\"name\":\"Update\",\"checked\":true}],\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"isPersistent\",\"value\":\"false\"}],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nlet result = '';\\n// Get input link list\\nconst inLinkDataList = Engine_getInputLinkDataList( nodeData, 'in' );\\n// If Input is connected\\nif( inLinkDataList && inLinkDataList.length ) {\\n  // Loop over in components\\n  for( const inLinkData of inLinkDataList ) {\\n    const inNodeKey = inLinkData.from;\\n    \\n    // Read data of fanIn components\\n    const inNodeData = getNodeData( inNodeKey );\\n    if( inNodeData && inNodeData.isFile ) {\\n      if( inNodeData.fileContent ) {\\n        const api = getAPI( inNodeData.fileContent );\\n        result = result+api;\\n      } else if( inNodeData.fileURL ) {\\n        loadNodeContent( inNodeData, (s)=>{\\n          result = result+getAPI( s );\\n          Engine_fireOutput( nodeData, 'out', result );\\n        });\\n      }\\n    }\\n  }\\n}\\n\\nEngine_fireOutput( nodeData, 'out', result );\\n\\nfunction getAPI( source ) {\\n  let result = '';\\n  if( source ) {\\n    // This regexp matches any function definition at the beginning of any line\\n    const expr = new RegExp( /\\\\nfunction\\\\s+(?<api>\\\\w+\\\\([^\\\\)]*\\\\))/g );\\n    const match = ('\\\\n'+source).matchAll( expr );\\n    const matchList = Array.from( match, (m)=> m.groups.api );\\n    result = result+matchList.join( '\\\\n' );\\n  }\\n  return( result );\\n}\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":13,\"location\":\"9760 3040\"},\n{\"label\":\"lib/1.0/hChat.js\",\"color\":\"orange\",\"size\":\"180 35\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"fileURL\":\"library/hChat/1.0/hChat.js\",\"key\":17,\"location\":\"8680 1980\",\"isIncludeScript\":true},\n{\"label\":\"lib/1.0/hChat.css\",\"color\":\"peachpuff\",\"size\":\"180 35\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"CSS\",\"fileType\":\"text/css\",\"fileURL\":\"library/hChat/1.0/hChat.css\",\"key\":19,\"location\":\"8690 1880\",\"isIncludeScript\":true},\n{\"label\":\"AI Chat\",\"category\":\"DataFlow_Chat\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"fromRobi\",\"name\":\"fromRobi\"},{\"portId\":\"fromALice\",\"name\":\"fromALice\"},{\"portId\":\"fromBob\",\"name\":\"fromBob\"}],\"out_\":[{\"portId\":\"history\",\"name\":\"history\"},{\"portId\":\"toRobi\",\"name\":\"toRobi\"},{\"portId\":\"toAlice\",\"name\":\"toAlice\"},{\"portId\":\"toBob\",\"name\":\"toBob\"}],\"props_\":[{\"name\":\"All\",\"value\":\"~/allUsers.png\",\"valueChanged\":\"true\"},{\"name\":\"Robi\",\"value\":\"~/robot.png\",\"valueChanged\":true},{\"name\":\"Alice\",\"value\":\"/fileServer/pictures/Monalisa.png\"},{\"name\":\"Bob\",\"value\":\"~/user3.png\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"var nodeData;\\n\",\"fileTypeName\":\"AIChat\",\"fileType\":\"application/html\",\"doCompute\":\"DataFlowDSL_AIChat\",\"key\":18,\"location\":\"9230 2520\",\"isLocalDiv\":true,\"editorPosition\":[1003,589,400,350]},\n{\"label\":\"AI component\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"var nodeData;\\n\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":22,\"location\":\"9370 2750\"},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":24,\"location\":\"9130 2749.9\"}\n],\n  \"linkDataArray\": [\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"\",\"toPort\":\"in\",\"from\":7,\"to\":13,\"points\":[9660.999392070202,3042.8185159264704,9718.103515625,3040,9728.103515625,3040],\"key\":-1,\"color\":\"orange\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":13,\"to\":12,\"points\":[10070.4619140625,3040,10080.4619140625,3040,10118.103515625,3050,10128.103515625,3050],\"key\":-2},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in\",\"from\":24,\"to\":22,\"points\":[9250.4619140625,2749.9,9260.4619140625,2749.9,9328.103515625,2750,9338.103515625,2750],\"key\":-3}\n]}"
}