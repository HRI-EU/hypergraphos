{
  "dslNameList": [
    "HierarchyDSL",
    "TextLabelsDSL",
    "CodeFlowDSL",
    "PicturesDSL",
    "DataFlowDSL"
  ],
  "view": {
    "scale": 0.20386804104078193,
    "position": [
      -10082.538282171725,
      -4747.301736240047
    ],
    "isGridOn": false
  },
  "graphFileServer": [],
  "model": "{ \"class\": \"GraphLinksModel\",\n  \"copiesArrays\": true,\n  \"copiesArrayObjects\": true,\n  \"copiesKey\": false,\n  \"linkKeyProperty\": \"key\",\n  \"linkFromPortIdProperty\": \"fromPort\",\n  \"linkToPortIdProperty\": \"toPort\",\n  \"nodeDataArray\": [\n{\"label\":\"Graph Info\",\"category\":\"Hierarchy_GraphInfo\",\"size\":\"180 80\",\"props_\":[{\"name\":\"Name\",\"value\":\"label@6\",\"valueChanged\":true},{\"name\":\"Version\",\"value\":\"1.0\"},{\"name\":\"Date\",\"value\":\"20/01/2024\"},{\"name\":\"Path\",\"value\":\"/fileServer/02/41.json\"},{\"name\":\"Authors\",\"value\":\"Antonello\",\"valueChanged\":true}],\"key\":0,\"location\":\"390 -70\"},\n{\"label\":\"Model\",\"size\":\"180 60\",\"category\":\"Hierarchy_Model\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphModel$\",\"key\":2,\"location\":\"130 -70\"},\n{\"label\":\"Selection\",\"size\":\"180 60\",\"category\":\"Hierarchy_Selection\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphSelection$\",\"key\":4,\"location\":\"130 20\"},\n{\"label\":\"Test DataFlow & Code Generation v.1.1\",\"category\":\"TextLabels_Size6\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"5269 240\",\"key\":6,\"location\":\"660 -10\"},\n{\"label\":\"2+3*5-(2+20*0.5)+1=z\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"569 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":7,\"location\":\"-2190 2846.316\",\"group\":36},\n{\"label\":\"Equation Parser\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nif( name == 'in' ) {\\n  // Build the AST tree (recursive function)\\n  const outValue = buildAST( value );\\n  \\n  graphData.dfe.fireOutput( nodeData, 'out', outValue );\\n}\\n\\nfunction buildAST( tokenList ) {\\n  if( tokenList.length == 0 ) {\\n    return( null );\\n  } else if( tokenList.length == 1 ) {\\n    return( tokenList[0] );\\n  }\\n\\n  // Find the index of the lowest precedence operator\\n  let index = -1;\\n  let minPrecedence = Infinity;\\n  let parenthesis = 0;\\n  // Loop over all tokenList\\n  for( let i = 0; i < tokenList.length; ++i ) {\\n    if( tokenList[i] == '(' ) {\\n      parenthesis++;\\n    } else if( tokenList[i] == ')' ) {\\n      parenthesis--;\\n    } else if( parenthesis === 0 ) {\\n      // Compute precedences\\n      const operator = tokenList[i];\\n      let precedence = 0;\\n      if( ( operator == '+' ) || ( operator == '-' ) ) {\\n        precedence = 1;\\n      } else if( ( operator == '*' ) || ( operator == '/' ) ) {\\n        precedence = 2;\\n      } else {\\n        precedence = Infinity;\\n      }\\n      \\n      if( precedence <= minPrecedence ) {\\n        minPrecedence = precedence;\\n        index = i;\\n      }\\n    }\\n  }\\n\\n  // Handle subexpressions inside parentheses\\n  if( index === -1 ) {\\n    return( buildAST( tokenList.slice( 1, -1 ) ) );\\n  }\\n\\n  const result = [\\n    tokenList[index],\\n    buildAST( tokenList.slice( 0, index ) ),\\n    buildAST( tokenList.slice( index+1 ))\\n  ];\\n  return( result );\\n}\\n\",\"fileTypeName\":\"EquationParser\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":9,\"location\":\"-380 3046.316\",\"editorPosition\":[1270,1836,523,943],\"group\":36},\n{\"label\":\"[\\n  \\\"+\\\",\\n  [\\n    \\\"*\\\",\\n    3,\\n    5\\n  ],\\n  10\\n]\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"125 511\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":11,\"location\":\"-18.103515625 3423.158\",\"font\":\"17px sans-serif\",\"labelFont\":\"17px sans-serif\",\"group\":55},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":13,\"location\":\"-2400 2846.316\",\"group\":36},\n{\"label\":\"DataFlow Engine\",\"color\":\"orange\",\"size\":\"420 140\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"fileURL\":\"lib/DataFlowEngine/1.5/DataFlowEngine.js\",\"key\":8,\"location\":\"4150 950\",\"editorPosition\":[1087,1811,666,1123]},\n{\"label\":\"New Engine Instance \\n         onLoad\",\"color\":\"orange\",\"size\":\"430 80\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"DataFlowEngine.getInstance();\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":10,\"location\":\"4150 1110\",\"isIncludeScript\":true},\n{\"label\":\"Engine Control\",\"color\":\"DarkKhaki\",\"size\":\"416 110\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<div style=\\\"display:grid\\\">\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.loadModel();\\\" style=\\\"font-size: 24px;\\\">Load Model</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.clearInstanceData();\\\" style=\\\"font-size: 24px;\\\">Clear Instance Data</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.doPause();\\\" style=\\\"font-size: 24px;\\\">Pause</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.doContinue();\\\" style=\\\"font-size: 24px;\\\">Continue</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.setLogOn();\\\" style=\\\"font-size: 24px;\\\">Set Log On</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.setLogOff();\\\" style=\\\"font-size: 24px;\\\">Set Log Off</button>\\n</div>\",\"fileTypeName\":\"Web Page\",\"fileType\":\"application/html\",\"key\":12,\"location\":\"4160 1270\",\"isLocalDiv\":true,\"editorPosition\":[1459,20,345,245]},\n{\"label\":\"Equation Tokenizer\",\"category\":\"DataFlow_Component\",\"size\":\"255 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nif( name == 'in' ) {\\n  // Tokenize the input equation\\n  const regex = /\\\\d+(\\\\.\\\\d+)?|[\\\\+\\\\-\\\\*\\\\/\\\\(\\\\)]|[=a-zA-Z]/g;\\n  const tokenList = value.match( regex ).map( token => {\\n    return( isNaN( token ) ? token : parseFloat( token ) );\\n  });\\n  \\n  graphData.dfe.fireOutput( nodeData, 'out', tokenList );\\n}\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":15,\"location\":\"-1490 2956.316\",\"group\":36},\n{\"label\":\"[\\n  \\\"y\\\",\\n  \\\"=\\\",\\n  3,\\n  \\\"*\\\",\\n  5,\\n  \\\"+\\\",\\n  10\\n]\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"114 451\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":17,\"location\":\"-1118.103515625 3310\",\"font\":\"17px sans-serif\",\"labelFont\":\"17px sans-serif\",\"group\":53},\n{\"label\":\"Equation Compute\",\"category\":\"DataFlow_Component\",\"size\":\"254 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"},{\"portId\":\"2out\",\"name\":\"status\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nif( name == 'in' ) {\\n  let outValue = NaN;\\n  let outStatus = 'Done';\\n  try {\\n    if( value == null ) {\\n      outValue = '';\\n    } else {\\n      outValue = evaluateAST( value );\\n    }\\n  } catch( e ) {\\n    outStatus = `Syntax error in expression: ${e}`;\\n  }\\n  \\n  graphData.dfe.fireOutput( nodeData, 'out', outValue );\\n  graphData.dfe.fireOutput( nodeData, 'status', outStatus );\\n}\\n\\nfunction evaluateAST( ast ) {\\n  if( RegExp( /^[a-z]/i ).test( ast ) ) {\\n    return( ast );\\n  } else if( typeof( ast ) === 'number' ) {\\n    // Base case: if the node is a number, return it.\\n    return( ast );\\n  }\\n\\n  // Recursive case: evaluate the left and right operands.\\n  const left = evaluateAST( ast[1] );\\n  const right = evaluateAST( ast[2] );\\n\\n  // Compute the result based on the operator.\\n  switch( ast[0] ) {\\n    case '+':\\n      return( left + right );\\n    case '-':\\n      return( left - right );\\n    case '*':\\n      return( left * right );\\n    case '/':\\n      return( left / right );\\n    default:\\n      throw new Error( 'Unknown operator: ' + ast[0] );\\n  }\\n}\",\"fileTypeName\":\"EquationCompute\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":19,\"location\":\"160 3046.016\",\"group\":36},\n{\"label\":\"25\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"247 64\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":21,\"location\":\"641.896484375 3219.316\",\"group\":56},\n{\"label\":\"Done\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"617 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":23,\"location\":\"640 3290\",\"group\":56},\n{\"label\":\"Equation Split\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"lEq\"},{\"portId\":\"2out\",\"name\":\"rEq\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nif( name == 'in' ) {\\n  let i = value.indexOf( '=' );\\n  if( i == -1 ) {\\n    i = value.length;\\n  }\\n  \\n  const lEq = value.slice( 0, i );\\n  const rEq = value.slice( i+1 );\\n  \\n  graphData.dfe.fireOutput( nodeData, 'lEq', lEq );\\n  graphData.dfe.fireOutput( nodeData, 'rEq', rEq );\\n}\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":18,\"location\":\"-940 2955.916\",\"group\":36},\n{\"label\":\"Equation Parser\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nif( name == 'in' ) {\\n  // Build the AST tree (recursive function)\\n  const outValue = buildAST( value );\\n  \\n  graphData.dfe.fireOutput( nodeData, 'out', outValue );\\n}\\n\\nfunction buildAST( tokenList ) {\\n  if( tokenList.length == 0 ) {\\n    return( null );\\n  } else if( tokenList.length == 1 ) {\\n    return( tokenList[0] );\\n  }\\n\\n  // Find the index of the lowest precedence operator\\n  let index = -1;\\n  let minPrecedence = Infinity;\\n  let parenthesis = 0;\\n  // Loop over all tokenList\\n  for( let i = 0; i < tokenList.length; ++i ) {\\n    if( tokenList[i] == '(' ) {\\n      parenthesis++;\\n    } else if( tokenList[i] == ')' ) {\\n      parenthesis--;\\n    } else if( parenthesis === 0 ) {\\n      // Compute precedences\\n      const operator = tokenList[i];\\n      let precedence = 0;\\n      if( ( operator == '+' ) || ( operator == '-' ) ) {\\n        precedence = 1;\\n      } else if( ( operator == '*' ) || ( operator == '/' ) ) {\\n        precedence = 2;\\n      } else {\\n        precedence = Infinity;\\n      }\\n      \\n      if( precedence <= minPrecedence ) {\\n        minPrecedence = precedence;\\n        index = i;\\n      }\\n    }\\n  }\\n\\n  // Handle subexpressions inside parentheses\\n  if( index === -1 ) {\\n    return( buildAST( tokenList.slice( 1, -1 ) ) );\\n  }\\n\\n  const result = [\\n    tokenList[index],\\n    buildAST( tokenList.slice( 0, index ) ),\\n    buildAST( tokenList.slice( index+1 ))\\n  ];\\n  return( result );\\n}\\n\",\"fileTypeName\":\"EquationParser\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":26,\"location\":\"-380 2886.316\",\"editorPosition\":[1270,1836,523,943],\"group\":36},\n{\"label\":\"Equation Compute\",\"category\":\"DataFlow_Component\",\"size\":\"253 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"},{\"portId\":\"2out\",\"name\":\"status\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nif( name == 'in' ) {\\n  let outValue = NaN;\\n  let outStatus = 'Done';\\n  try {\\n    if( value == null ) {\\n      outValue = '';\\n    } else {\\n      outValue = evaluateAST( value );\\n    }\\n  } catch( e ) {\\n    outStatus = `Syntax error in expression: ${e}`;\\n  }\\n  \\n  graphData.dfe.fireOutput( nodeData, 'out', outValue );\\n  graphData.dfe.fireOutput( nodeData, 'status', outStatus );\\n}\\n\\nfunction evaluateAST( ast ) {\\n  if( RegExp( /^[a-z]/i ).test( ast ) ) {\\n    return( ast );\\n  } else if( typeof( ast ) === 'number' ) {\\n    // Base case: if the node is a number, return it.\\n    return( ast );\\n  }\\n\\n  // Recursive case: evaluate the left and right operands.\\n  const left = evaluateAST( ast[1] );\\n  const right = evaluateAST( ast[2] );\\n\\n  // Compute the result based on the operator.\\n  switch( ast[0] ) {\\n    case '+':\\n      return( left + right );\\n    case '-':\\n      return( left - right );\\n    case '*':\\n      return( left * right );\\n    case '/':\\n      return( left / right );\\n    default:\\n      throw new Error( 'Unknown operator: ' + ast[0] );\\n  }\\n}\",\"fileTypeName\":\"EquationCompute\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":27,\"location\":\"160 2885.8160000000003\",\"group\":36},\n{\"label\":\"y\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"247 68\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":28,\"location\":\"641.896484375 2737.316\",\"group\":48},\n{\"label\":\"Done\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"617 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":29,\"location\":\"640 2810\",\"group\":48},\n{\"label\":\"y\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"125 511\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":31,\"location\":\"-38.103515625 2583.158\",\"font\":\"17px sans-serif\",\"labelFont\":\"17px sans-serif\",\"group\":49},\n{\"label\":\"[\\n  \\\"y\\\"\\n]\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"114 352\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":33,\"location\":\"-590 2681.316\",\"font\":\"17px sans-serif\",\"labelFont\":\"17px sans-serif\",\"group\":52},\n{\"label\":\"[\\n  3,\\n  \\\"*\\\",\\n  5,\\n  \\\"+\\\",\\n  10\\n]\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"114 293\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":35,\"location\":\"-588.103515625 3281.316\",\"font\":\"17px sans-serif\",\"labelFont\":\"17px sans-serif\",\"group\":54},\n{\"label\":\"Equation Compare\",\"category\":\"DataFlow_Component\",\"size\":\"249 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nif( name == 'in' ) {\\n  let outValue = '';\\n  if( ( value.lStatus == 'Done' ) && ( value.rStatus == 'Done' ) ) {\\n    if( ( value.lValue == '' ) || ( value.rValue == '' ) ) {\\n      outValue = value.lValue || value.rValue;\\n    } else if( isVariable( value.lValue  ) ) {\\n      outValue = `${value.lValue} = ${value.rValue}`;\\n    } else if( isVariable( value.rValue ) ) {\\n      outValue = `${value.rValue} = ${value.lValue}`;\\n    } else {\\n      outValue = String( value.lValue == value.rValue );\\n    }\\n  } else {\\n    outValue == ( value.lStatus == 'Done'? value.rStatus: value.lStatus );\\n  }\\n  \\n  graphData.dfe.fireOutput( nodeData, 'out', outValue );\\n}\\n\\nfunction isVariable( str ) {\\n  return( RegExp( /^[a-z]/i ).test( str ) );\\n}\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":25,\"location\":\"1060 2973.158\",\"group\":36,\"editorPosition\":[2861,2205,778,494]},\n{\"label\":\"y = 25\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"242 72\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":34,\"location\":\"1450 2967.158\",\"group\":36},\n{\"label\":\"2+3*5-(2+20*0.5)+1=10-4\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"569 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":38,\"location\":\"-2190 2926.216\",\"group\":36},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":39,\"location\":\"-2400 2926.316\",\"group\":36},\n{\"label\":\"2+3*5-(2+20*0.5)+1=10-1\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"569 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":42,\"location\":\"-2190 3006.216\",\"group\":36},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":43,\"location\":\"-2400 3006.316\",\"group\":36},\n{\"label\":\"y=3*5+10\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"569 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":46,\"location\":\"-2190 3086.316\",\"group\":36},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":47,\"location\":\"-2400 3086.316\",\"group\":36},\n{\"label\":\"2+3*5-(2+20*0.5)+1\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"569 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":50,\"location\":\"-2190 2766.316\",\"group\":36},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":51,\"location\":\"-2400 2766.316\",\"group\":36},\n{\"label\":\"Equation Solver Model (JavaScript)\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":36,\"location\":\"-2420 2979.999796875\"},\n{\"label\":\"Executor: [Execution...Done]\",\"category\":\"CodeFlow_Button\",\"color\":\"YellowGreen\",\"size\":\"412 120\",\"buttons_\":[{\"name\":\"Generate\",\"checked\":false},{\"name\":\"Execute\",\"checked\":true}],\"props_\":[],\"isFile\":true,\"fileContent\":\"var event, obj, nodeData;\\n//console.log( 'NodeData Info: '+JSON.stringify( nodeData ) );\\n//console.log( 'Button Label: '+obj.data.name );\\n//console.log( 'Button Status: '+obj.data.checked );\\n\\n// Generation Instance Data\\nconst gen = getGenInfo( nodeData );\\n\\nswitch( obj.data.name ) {\\n  \\n  case 'Generate':\\n    setNodeDataField( nodeData, 'label', 'Generator: [Generating...]' );\\n    const onGenerated = function( source, msg ) {\\n      if( msg.startsWith( 'Success:' ) ) {\\n        // Set target component source\\n        setNodeDataField( gen.targetData.key, 'fileContent', source );\\n      }\\n      // Update generator status\\n      setNodeDataField( nodeData, 'label', 'Generator: [Generation...Done]\\\\n'+msg );\\n    };\\n    \\n    if( gen.groupKey != null && gen.targetData ) {\\n      generationRoot( gen, onGenerated );\\n    } else {\\n      alert( 'Generation Components needs to have 2 fan out nodes:\\\\n'+\\n           '- Group (a group with a model, Group_BasicGroup),\\\\n'+\\n           '- Code (target source component, Hierarchy_CodeInGraph)' );\\n    }\\n    break;\\n  case 'Execute':\\n    setNodeDataField( nodeData, 'label', 'Executor: [Executing...]' );\\n    executeCode( gen );\\n    setNodeDataField( nodeData, 'label', 'Executor: [Execution...Done]' );\\n    break;\\n}\\n\\nfunction getGenInfo( nodeData ) {\\n  // Generation Instance Data\\n  const gen = {\\n    name: 'GenDFE 1.3',  // Code generator name and version\\n    groupKey: null,       // Group node key containing the Model to be generated\\n    targetData: null,     // Target node to store generated code\\n    me: null,             // ModelExplorer\\n    modelId: 'main',      // Model Id\\n  };\\n  \\n  // Initialize generation info\\n  const g = getMainGraph();\\n  // The model is the source of the WorkSpace (as found in the xx.json file)\\n  // it is in string form with full content\\n  const model = g.getJSONModel();\\n  // An alternative is to put in model the full source of the WorkSpace file\\n  // by reading it in text form from the server directory: .../xx/yy.json\\n  \\n  // Initialize ModelExplorer with full model\\n  gen.me = new ModelExplorer();\\n  gen.me.setJSONModel( gen.modelId, model );\\n  \\n  // Use Model to Code Generate\\n  const dataList = gen.me.getNodeListFanOutByNodeKey( gen.modelId, nodeData.key );\\n  // If at least a node has been found\\n  if( dataList && dataList.length ) {\\n    for( const data of dataList ) {\\n      if( data.category.startsWith( 'Group_' ) ) {\\n        gen.groupKey = data.key;\\n      } else if( data.category.startsWith( 'Hierarchy_CodeInGraph' ) ) {\\n        gen.targetData = data;\\n      }\\n    }\\n  }\\n  return( gen );\\n}\\nfunction executeCode( gen ) {\\n  console.log( 'Executing Generated Code...' );\\n  \\n  const source = gen.targetData.fileContent;\\n  eval( source );\\n  console.log( 'Execution Done.' );\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":37,\"location\":\"1820 2220\",\"editorPosition\":[2562,1007,804,1305]},\n{\"label\":\"TargetCode.js\",\"color\":\"orange\",\"size\":\"211 124\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"/*\\n * This file is code generated by GenDFE 1.0\\n *\\n * Generated on Sun, 21 Jan 2024 10:50:20 GMT\\n */\\n\\n/********************\\n * Node Functions\\n ********************/\\n// System function for reading properties\\nfunction nodeData_getProperty( name, defaultValue ) {\\n  // NOTE: this function access both nodeData fields and properties\\n  if( this.nd_[name] != undefined ) {\\n    return( this.nd_[name] );\\n  } else if( this.nd_.props_[name] != undefined ) {\\n    return( this.nd_.props_[name] );\\n  } else {\\n    return( defaultValue );\\n  }\\n}\\n// System function for reading input\\nfunction nodeData_getInput( name, defaultValue ) {\\n  if( this.in_[name] == undefined ) {\\n    this.in_[name] = defaultValue;\\n  }\\n  return( this.in_[name] );\\n}\\n// System function for storing access\\nfunction nodeData_setInput( name, value ) {\\n  this.in_[name] = value;\\n}\\n// System function for instance data access\\nfunction nodeData_get( name, defaultValue ) {\\n  if( this.st_[name] == undefined ) {\\n    this.st_[name] = defaultValue;\\n  }\\n  return( this.st_[name] );\\n}\\n// System function for firing inputs\\nfunction nodeData_fireInput( name, value ) {\\n  this.setInput( name, value );\\n  this.doCompute( name, value );\\n}\\n\\n/********************\\n * Model Functions\\n ********************/\\n// Node Info: [DataFlow_Message] 2+3*5-(2+20*0.5)+1=z\\nconst nodeData_7 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: '2+3*5-(2+20*0.5)+1=z',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_15.setInput( 'in', value );\\n      nodeData_15.doCompute( 'in', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: DataFlow_Message,\\n};\\n// Node Info: [DataFlow_Component] Equation Parser\\nconst nodeData_9 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: 'Equation Parser',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_19.setInput( 'in', value );\\n      nodeData_19.doCompute( 'in', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: EquationParser,\\n};\\n// Node Info: [DataFlow_Component] Equation Tokenizer\\nconst nodeData_15 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: 'Equation Tokenizer',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_18.setInput( 'in', value );\\n      nodeData_18.doCompute( 'in', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: compute_15,\\n};\\n// Node Info: [DataFlow_Component] Equation Compute\\nconst nodeData_19 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: 'Equation Compute',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_58.setInput( 'rValue', value );\\n      nodeData_58.doCompute( 'rValue', value );\\n    } else if( name == 'status' ) {\\n      // Store new input\\n      nodeData_58.setInput( 'rStatus', value );\\n      nodeData_58.doCompute( 'rStatus', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: EquationCompute,\\n};\\n// Node Info: [DataFlow_Component] Equation Split\\nconst nodeData_18 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: 'Equation Split',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'lEq' ) {\\n      // Store new input\\n      nodeData_26.setInput( 'in', value );\\n      nodeData_26.doCompute( 'in', value );\\n    } else if( name == 'rEq' ) {\\n      // Store new input\\n      nodeData_9.setInput( 'in', value );\\n      nodeData_9.doCompute( 'in', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: compute_18,\\n};\\n// Node Info: [DataFlow_Component] Equation Parser\\nconst nodeData_26 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: 'Equation Parser',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_27.setInput( 'in', value );\\n      nodeData_27.doCompute( 'in', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: EquationParser,\\n};\\n// Node Info: [DataFlow_Component] Equation Compute\\nconst nodeData_27 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: 'Equation Compute',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_58.setInput( 'lValue', value );\\n      nodeData_58.doCompute( 'lValue', value );\\n    } else if( name == 'status' ) {\\n      // Store new input\\n      nodeData_58.setInput( 'lStatus', value );\\n      nodeData_58.doCompute( 'lStatus', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: EquationCompute,\\n};\\n// Node Info: [DataFlow_Component] Equation Compare\\nconst nodeData_25 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: 'Equation Compare',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_34.setInput( 'in', value );\\n      nodeData_34.doCompute( 'in', value );\\n      // Store new input\\n      nodeData_45.setInput( 'in', value );\\n      nodeData_45.doCompute( 'in', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: compute_25,\\n};\\n// Node Info: [DataFlow_Message] y = 25\\nconst nodeData_34 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: 'y = 25',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: DataFlow_Message,\\n};\\n// Node Info: [DataFlow_Message] 2+3*5-(2+20*0.5)+1=10-4\\nconst nodeData_38 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: '2+3*5-(2+20*0.5)+1=10-4',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_15.setInput( 'in', value );\\n      nodeData_15.doCompute( 'in', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: DataFlow_Message,\\n};\\n// Node Info: [DataFlow_Message] 2+3*5-(2+20*0.5)+1=10-1\\nconst nodeData_42 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: '2+3*5-(2+20*0.5)+1=10-1',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_15.setInput( 'in', value );\\n      nodeData_15.doCompute( 'in', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: DataFlow_Message,\\n};\\n// Node Info: [DataFlow_Message] y=3*5+10\\nconst nodeData_46 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: 'y=3*5+10',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_15.setInput( 'in', value );\\n      nodeData_15.doCompute( 'in', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: DataFlow_Message,\\n};\\n// Node Info: [DataFlow_Message] 2+3*5-(2+20*0.5)+1\\nconst nodeData_50 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: '2+3*5-(2+20*0.5)+1',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_15.setInput( 'in', value );\\n      nodeData_15.doCompute( 'in', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: DataFlow_Message,\\n};\\n// Node Info: [DataFlow_Component] Log Result\\nconst nodeData_45 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: 'Log Result',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: compute_45,\\n};\\n// Node Info: [DataFlow_Component] Barrier\\nconst nodeData_58 = {\\n  in_: {},     // Input\\n  st_: {},     // Storage\\n  nd_: { // Properties\\n    label: 'Barrier',\\n    props_: {}\\n  },\\n  out_: {},     // Output\\n  fireOutput: function ( name, value ) {\\n    if( name == 'out' ) {\\n      // Store new input\\n      nodeData_25.setInput( 'in', value );\\n      nodeData_25.doCompute( 'in', value );\\n    }\\n  },\\n  getProperty: nodeData_getProperty,\\n  getInput: nodeData_getInput,\\n  setInput: nodeData_setInput,\\n  fireInput: nodeData_fireInput,\\n  get: nodeData_get,\\n  doCompute: MakeObject,\\n};\\n\\n/********************\\n * Compute Functions\\n ********************/\\n// Node Compute: [DataFlow_Message] 2+3*5-(2+20*0.5)+1=z\\nfunction DataFlow_Message( name, value ) {\\n  \\n  if( value == undefined ) {\\n    value = this.getProperty( 'label', '' );\\n    try {\\n      value = JSON.parse( value ); \\n    } catch( e ) {}\\n  }\\n  this.fireOutput( 'out', value );\\n}\\n// Node Compute: [DataFlow_Component] Equation Parser\\nfunction EquationParser( name, value ) {\\n  \\n  if( name == 'in' ) {\\n    // Build the AST tree (recursive function)\\n    const outValue = buildAST( value );\\n    \\n    this.fireOutput( 'out', outValue );\\n  }\\n  \\n  function buildAST( tokenList ) {\\n    if( tokenList.length == 0 ) {\\n      return( null );\\n    } else if( tokenList.length == 1 ) {\\n      return( tokenList[0] );\\n    }\\n  \\n    // Find the index of the lowest precedence operator\\n    let index = -1;\\n    let minPrecedence = Infinity;\\n    let parenthesis = 0;\\n    // Loop over all tokenList\\n    for( let i = 0; i < tokenList.length; ++i ) {\\n      if( tokenList[i] == '(' ) {\\n        parenthesis++;\\n      } else if( tokenList[i] == ')' ) {\\n        parenthesis--;\\n      } else if( parenthesis === 0 ) {\\n        // Compute precedences\\n        const operator = tokenList[i];\\n        let precedence = 0;\\n        if( ( operator == '+' ) || ( operator == '-' ) ) {\\n          precedence = 1;\\n        } else if( ( operator == '*' ) || ( operator == '/' ) ) {\\n          precedence = 2;\\n        } else {\\n          precedence = Infinity;\\n        }\\n        \\n        if( precedence <= minPrecedence ) {\\n          minPrecedence = precedence;\\n          index = i;\\n        }\\n      }\\n    }\\n  \\n    // Handle subexpressions inside parentheses\\n    if( index === -1 ) {\\n      return( buildAST( tokenList.slice( 1, -1 ) ) );\\n    }\\n  \\n    const result = [\\n      tokenList[index],\\n      buildAST( tokenList.slice( 0, index ) ),\\n      buildAST( tokenList.slice( index+1 ))\\n    ];\\n    return( result );\\n  }\\n  \\n}\\n// Node Compute: [DataFlow_Component] Equation Tokenizer\\nfunction compute_15( name, value ) {\\n  \\n  if( name == 'in' ) {\\n    // Tokenize the input equation\\n    const regex = /\\\\d+(\\\\.\\\\d+)?|[\\\\+\\\\-\\\\*\\\\/\\\\(\\\\)]|[=a-zA-Z]/g;\\n    const tokenList = value.match( regex ).map( token => {\\n      return( isNaN( token ) ? token : parseFloat( token ) );\\n    });\\n    \\n    this.fireOutput( 'out', tokenList );\\n  }\\n}\\n// Node Compute: [DataFlow_Component] Equation Compute\\nfunction EquationCompute( name, value ) {\\n  \\n  if( name == 'in' ) {\\n    let outValue = NaN;\\n    let outStatus = 'Done';\\n    try {\\n      if( value == null ) {\\n        outValue = '';\\n      } else {\\n        outValue = evaluateAST( value );\\n      }\\n    } catch( e ) {\\n      outStatus = `Syntax error in expression: ${e}`;\\n    }\\n    \\n    this.fireOutput( 'out', outValue );\\n    this.fireOutput( 'status', outStatus );\\n  }\\n  \\n  function evaluateAST( ast ) {\\n    if( RegExp( /^[a-z]/i ).test( ast ) ) {\\n      return( ast );\\n    } else if( typeof( ast ) === 'number' ) {\\n      // Base case: if the node is a number, return it.\\n      return( ast );\\n    }\\n  \\n    // Recursive case: evaluate the left and right operands.\\n    const left = evaluateAST( ast[1] );\\n    const right = evaluateAST( ast[2] );\\n  \\n    // Compute the result based on the operator.\\n    switch( ast[0] ) {\\n      case '+':\\n        return( left + right );\\n      case '-':\\n        return( left - right );\\n      case '*':\\n        return( left * right );\\n      case '/':\\n        return( left / right );\\n      default:\\n        throw new Error( 'Unknown operator: ' + ast[0] );\\n    }\\n  }\\n}\\n// Node Compute: [DataFlow_Component] Equation Split\\nfunction compute_18( name, value ) {\\n  \\n  if( name == 'in' ) {\\n    let i = value.indexOf( '=' );\\n    if( i == -1 ) {\\n      i = value.length;\\n    }\\n    \\n    const lEq = value.slice( 0, i );\\n    const rEq = value.slice( i+1 );\\n    \\n    this.fireOutput( 'lEq', lEq );\\n    this.fireOutput( 'rEq', rEq );\\n  }\\n}\\n// Node Compute: [DataFlow_Component] Equation Parser\\n// Node Compute: [DataFlow_Component] Equation Compute\\n// Node Compute: [DataFlow_Component] Equation Compare\\nfunction compute_25( name, value ) {\\n  \\n  if( name == 'in' ) {\\n    let outValue = '';\\n    if( ( value.lStatus == 'Done' ) && ( value.rStatus == 'Done' ) ) {\\n      if( ( value.lValue == '' ) || ( value.rValue == '' ) ) {\\n        outValue = value.lValue || value.rValue;\\n      } else if( isVariable( value.lValue  ) ) {\\n        outValue = `${value.lValue} = ${value.rValue}`;\\n      } else if( isVariable( value.rValue ) ) {\\n        outValue = `${value.rValue} = ${value.lValue}`;\\n      } else {\\n        outValue = String( value.lValue == value.rValue );\\n      }\\n    } else {\\n      outValue == ( value.lStatus == 'Done'? value.rStatus: value.lStatus );\\n    }\\n    \\n    this.fireOutput( 'out', outValue );\\n  }\\n  \\n  function isVariable( str ) {\\n    return( RegExp( /^[a-z]/i ).test( str ) );\\n  }\\n}\\n// Node Compute: [DataFlow_Message] y = 25\\n// Node Compute: [DataFlow_Message] 2+3*5-(2+20*0.5)+1=10-4\\n// Node Compute: [DataFlow_Message] 2+3*5-(2+20*0.5)+1=10-1\\n// Node Compute: [DataFlow_Message] y=3*5+10\\n// Node Compute: [DataFlow_Message] 2+3*5-(2+20*0.5)+1\\n// Node Compute: [DataFlow_Component] Log Result\\nfunction compute_45( name, value ) {\\n  \\n  console.log( value );\\n}\\n// Node Compute: [DataFlow_Component] Barrier\\nfunction MakeObject( name, value ) {\\n  \\n  const defaultInputStat = {\\n    'lValue': false,\\n    'lStatus': false,\\n    'rValue': false,\\n    'rStatus': false,\\n  };\\n  const inputStat = this.get( 'inputStat', defaultInputStat );\\n  \\n  inputStat[name] = true;\\n  let isObjectReady = true;\\n  for( const inName in inputStat ) {\\n    if( !inputStat[inName] ) {\\n      isObjectReady = false;\\n      break;\\n    }\\n  }\\n  \\n  if( isObjectReady ) {\\n    const outValue = {};\\n    for( const inName in inputStat ) {\\n      inputStat[inName] = false;\\n      outValue[inName] = this.getInput( inName, null );\\n    }\\n    this.fireOutput( 'out', outValue );\\n  }\\n  \\n}\\n\\n/********************\\n * System Start\\n ********************/\\nnodeData_7.doCompute( 'in' );\\nnodeData_38.doCompute( 'in' );\\nnodeData_42.doCompute( 'in' );\\nnodeData_46.doCompute( 'in' );\\nnodeData_50.doCompute( 'in' );\\n\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":44,\"location\":\"3110 2220\",\"group\":78},\n{\"label\":\"Log Result\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"*\"}],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nconsole.log( value );\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":45,\"location\":\"1450 3073.158\",\"group\":36},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":48,\"location\":\"588.103515625 2771.658\",\"group\":36},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":49,\"location\":\"-90 2583.158\",\"group\":36},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":52,\"location\":\"-641.896484375 2681.316\",\"group\":36},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":53,\"location\":\"-1170 3310\",\"group\":36},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":54,\"location\":\"-640 3281.316\",\"group\":36},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":55,\"location\":\"-70 3423.158\",\"group\":36},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":56,\"location\":\"588.103515625 3253.658\",\"group\":36},\n{\"label\":\"Barrier\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"lValue\"},{\"portId\":\"2in\",\"name\":\"lStatus\"},{\"portId\":\"3in\",\"name\":\"rValue\"},{\"portId\":\"4in\",\"name\":\"rStatus\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"*\"}],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nconst defaultInputStat = {\\n  'lValue': false,\\n  'lStatus': false,\\n  'rValue': false,\\n  'rStatus': false,\\n};\\nconst inputStat = graphData.dfe.get( nodeData, 'inputStat', defaultInputStat );\\n\\ninputStat[name] = true;\\nlet isObjectReady = true;\\nfor( const inName in inputStat ) {\\n  if( !inputStat[inName] ) {\\n    isObjectReady = false;\\n    break;\\n  }\\n}\\n\\nif( isObjectReady ) {\\n  const outValue = {};\\n  for( const inName in inputStat ) {\\n    inputStat[inName] = false;\\n    outValue[inName] = graphData.dfe.getInput( nodeData, inName, null );\\n  }\\n  graphData.dfe.fireOutput( nodeData, 'out', outValue );\\n}\\n\",\"fileTypeName\":\"MakeObject\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":58,\"location\":\"690 2973.058\",\"group\":36,\"editorPosition\":[2146,2191,674,512]},\n{\"label\":\"This WorkSpace demonstrate different concepts:\",\"category\":\"TextLabels_Size4\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"1689 92\",\"key\":59,\"location\":\"-1820 1560\"},\n{\"label\":\"1) Creation of a system through its model (Equation Solver Model)\\n2) Usage of the component model defined in DataFlowDSL+DataFlowEngine\\n3) Execution of a model by using DataFlowEngine\\n4) Code Generation of the model into a JavaScript program that do not depend from the DataFlowEngine\\n5) The execution of the generated code\",\"category\":\"TextLabels_Size3\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"2136 276\",\"key\":61,\"location\":\"-1800 1750\"},\n{\"label\":\"3) The system can be executed by pressing the start buttons\",\"category\":\"TextLabels_Size2\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"501 102\",\"key\":63,\"location\":\"-2380 2646\",\"group\":36},\n{\"label\":\"1) This model defines an Equation Solver system\",\"category\":\"TextLabels_Size2\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"438 114\",\"key\":65,\"location\":\"-570 2130\"},\n{\"label\":\"2) The different components show examples of the component model usage. The code can be seen by clicking on the component's context menu and selecting \\\"Open File\\\"\",\"category\":\"TextLabels_Size2\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"698 145\",\"key\":67,\"location\":\"-1410 2800\",\"group\":36},\n{\"label\":\"NOTE: Log components are linked with a log link and are inserted into a group. These 2 choices make sure that such components are not included in the code-generation phase\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"613 145\",\"key\":69,\"location\":\"1110 2350\",\"group\":36},\n{\"label\":\"4) By clicking \\\"Generate\\\" the Equation Solver Model is code-generated into the Target Code  component\",\"category\":\"TextLabels_Size2\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"580 145\",\"key\":71,\"location\":\"2290 2130\"},\n{\"label\":\"5) By clicking \\\"Execute\\\" the code-generated system in the Target Code component is executed. Output can be seen in the JavaScript console\",\"category\":\"TextLabels_Size2\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"580 145\",\"key\":73,\"location\":\"2300 2370\"},\n{\"label\":\"NOTE: The DataFlow Engine is used to execute the Equation Solver Model from the model itself\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"374 102\",\"key\":75,\"location\":\"4650 930\"},\n{\"label\":\"This second component create a new instance of the DataFlow Engine once entered in the WorkSpace\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"372 102\",\"key\":77,\"location\":\"4650 1110\"},\n{\"label\":\"This is the DataFlow Engine Control Center. It can be opened by clicking on its context menu and selecting\\n\\\"Open File\\\"\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"391 117\",\"key\":79,\"location\":\"4650 1270\"},\n{\"label\":\"DFECodeGenerator.js\",\"color\":\"orange\",\"size\":\"406 144\",\"category\":\"Hierarchy_CodeInGraph\",\"isIncludeScript\":true,\"isFile\":true,\"fileContent\":\"/**\\n * This is an example of Code Generator based on the conventions\\n * of the component model and the DataFlow Engine execution model\\n *\\n * The main function to start code generation is:\\n *    generationRoot( gen, callback )\\n * Where:\\n *   gen: is a data structure with the following information\\n *        {\\n *          name: 'GenDFE 1.0',  // Code generator name and version\\n *          groupKey: null,       // Group node key containing the Model to be generated\\n *          me: null,             // ModelExplorer loaded with the model\\n *          modelId: 'main',      // Model Id\\n *        };\\n * \\n *   callback: a function( source, msg ) executed at the end of\\n *             the generation process. Source is the generated source\\n *             code, while msg is a message starting with Success:/Error:\\n */\\n\\nfunction generationRoot( gen, onGenerated ) {\\n  console.log( 'Starting Generation...' );\\n  \\n  // If nodes are found ==> start generation\\n  if( gen.groupKey != null ) {\\n    // Extend generation info\\n    gen.lines = [];                      // Number of lines of code generate\\n    gen.date = new Date().toGMTString(); // Generation date info\\n    gen.startNodeList = [],              // Start nodes\\n    // Match line: var nodeData, name, value;\\n    gen.declLine = RegExp( /\\\\s*var\\\\s+nodeData\\\\s*,/ );\\n    // Match line: graphData.dfe.fireOutput( nodeData, 'out', value );\\n    gen.fireLine = RegExp( /graphData.dfe.fireOutput\\\\(\\\\s*nodeData\\\\s*,/ );\\n    // Match line: const lValue = graphData.dfe.getInput( nodeData, 'lValue', 0 );\\n    gen.getInLine = RegExp( /graphData.dfe.getInput\\\\(\\\\s*nodeData\\\\s*,/ );\\n    // Match line: const s = graphData.dfe.get( nodeData, 'inputStat', {} );\\n    gen.getLine = RegExp( /graphData.dfe.get\\\\(\\\\s*nodeData\\\\s*,/ );\\n    //gen.getInLine = RegExp( /graphData.dfe.getInput\\\\(\\\\s*nodeData\\\\s*,\\\\s*([^,]+),/ );  \\n    //line = line.replace( getInLine, `( node_${ni.key}[$1] != undefined? node_${ni.key}[$1]:` );\\n    gen.computeBuffer = {};                // Store all generated compute functions\\n    \\n    // Start generation\\n    generateGroup( gen, onGenerated );\\n  } else {\\n    if( onGenerated ) {\\n      onGenerated( '', 'Error: group key not found in gen parameter' );\\n    }\\n  }\\n}\\nfunction generateGroup( gen, onGenerated ) {\\n  const header = [ \\n    '/*',\\n    ` * This file is code generated by ${gen.name}`,\\n    ' *',\\n    ` * Generated on ${gen.date}`,\\n    ' */',\\n    '',\\n    '/********************',\\n    ' * Node Functions',\\n    ' ********************/',\\n    '// System function for reading properties',\\n    'function nodeData_getProperty( name, defaultValue ) {',\\n    '  // NOTE: this function access both nodeData fields and properties',\\n    '  if( this.nd_[name] != undefined ) {',\\n    '    return( this.nd_[name] );',\\n    '  } else if( this.nd_.props_[name] != undefined ) {',\\n    '    return( this.nd_.props_[name] );',\\n    '  } else {',\\n    '    return( defaultValue );',\\n    '  }',\\n    '}',\\n    '// System function for reading input',\\n    'function nodeData_getInput( name, defaultValue ) {',\\n    '  if( this.in_[name] == undefined ) {',\\n    '    this.in_[name] = defaultValue;',\\n    '  }',\\n    '  return( this.in_[name] );',\\n    '}',\\n    '// System function for storing access',\\n    'function nodeData_setInput( name, value ) {',\\n    '  this.in_[name] = value;',\\n    '}',\\n    '// System function for instance data access',\\n    'function nodeData_get( name, defaultValue ) {',\\n    '  if( this.st_[name] == undefined ) {',\\n    '    this.st_[name] = defaultValue;',\\n    '  }',\\n    '  return( this.st_[name] );',\\n    '}',\\n    '// System function for firing inputs',\\n    'function nodeData_fireInput( name, value ) {',\\n    '  this.setInput( name, value );',\\n    '  this.doCompute( name, value );',\\n    '}',\\n    '',\\n    '/********************',\\n    ' * Model Functions',\\n    ' ********************/' ];\\n  // Add lines\\n  gen.lines = gen.lines.concat( header );\\n  \\n  // Get all nodes in the group\\n  const dataList = gen.me.getNodeListBy( 'main', 'group', gen.groupKey );\\n  \\n  // Generate instance data for all nodes\\n  for( const data of dataList ) {\\n    const nodeInfo = getNodeInfo( gen, data );\\n    if( nodeInfo ) {\\n      gen.lines.push( `// Node Info: ${nodeInfo.descr}` );\\n      generateNodeState( gen, nodeInfo );\\n    }\\n  }\\n  \\n  const funcHeader = [\\n    '',\\n    '/********************',\\n    ' * Compute Functions',\\n    ' ********************/' ];\\n  // Add lines\\n  gen.lines = gen.lines.concat( funcHeader );\\n  \\n  // Generate compute function for all nodes\\n  for( const data of dataList ) {\\n    // Get nodeInfo\\n    if( data.category == 'DataFlow_Start' ) {\\n      gen.startNodeList.push( data );\\n      continue;\\n    }\\n    \\n    const nodeInfo = getNodeInfo( gen, data );\\n    if( nodeInfo ) {\\n      gen.lines.push( `// Node Compute: ${nodeInfo.descr}` );\\n      generateNodeCompute( gen, nodeInfo );\\n    }\\n  }\\n  \\n  if( gen.startNodeList.length ) {\\n    // Generate start functions\\n    const sysStart =[\\n      '',\\n      '/********************',\\n      ' * System Start',\\n      ' ********************/' ];\\n    // Add lines\\n    gen.lines = gen.lines.concat( sysStart );\\n    // Generate Start Nodes\\n    for( const data of gen.startNodeList ) {\\n      generateStartNode( gen, data );\\n    }\\n    gen.lines.push( '' );\\n  }\\n  \\n  // Save source in target component\\n  const content = gen.lines.join( '\\\\n' );\\n  if( onGenerated ) {\\n    // Generate closing event\\n    onGenerated( content, `Success: ${gen.lines.length} lines` );\\n  }\\n}\\nfunction generateNodeState( gen, ni ) {\\n  const nodeDataObjOpen = [\\n    `const nodeData_${ni.key} = {`,\\n    `  in_: {},     // Input`,\\n    `  st_: {},     // Storage`,\\n    `  nd_: { // Properties`,\\n    `    label: '${ni.data.label}',`, // Some fields could be put here\\n    '    props_: {}', // It could be translated here into key,value?\\n    `  },`,\\n    `  out_: {},     // Output` ];\\n  // Add lines\\n  gen.lines = gen.lines.concat( nodeDataObjOpen );\\n  \\n  generateNodeFire( gen, ni );\\n  const nodeDataObjClose = [\\n    `  getProperty: nodeData_getProperty,`,\\n    `  getInput: nodeData_getInput,`,\\n    `  setInput: nodeData_setInput,`,\\n    `  fireInput: nodeData_fireInput,`,\\n    `  get: nodeData_get,`,\\n    `  doCompute: ${getComputeId( gen, ni )},`,\\n    `};` ];\\n  // Add lines\\n  gen.lines = gen.lines.concat( nodeDataObjClose );\\n}\\nfunction generateNodeFire( gen, ni ) {\\n  // Get out port list\\n  const outPortList = gen.me.getOutPortNameList( 'main', ni.key );\\n  const portLen = outPortList.length\\n  \\n  // Generate fire function\\n  gen.lines.push( `  fireOutput: function ( name, value ) {` );\\n  // Generate fire body\\n  if( portLen ) {\\n    gen.lines.push( `    if( name == '${outPortList[0]}' ) {` );\\n    // Loop on each output port\\n    for( let i = 0; i < portLen; ++i ) {\\n      const portName = outPortList[i];\\n      if( i > 0 ) {\\n        gen.lines.push( `    } else if( name == '${portName}' ) {` );\\n      }\\n      \\n      // Get output links\\n      const linkList = gen.me.getLinkListFanOutByNodeKey( gen.modelId, ni.key, portName );\\n      for( const link of linkList ) {\\n        generateLinkCall( gen, ni, '      ', link, 'value' );\\n      }\\n    }\\n    gen.lines.push( `    }` );\\n  }\\n  gen.lines.push( `  },` );\\n}\\nfunction generateLinkCall( gen, ni, indent, link, value ) {\\n  // Check link type\\n  if( link.category == 'DataFlow_Log' ) {\\n      return;\\n  } else if( link.category == 'DataFlow_Pause') {\\n    gen.lines.push( `${indent}debugger` );\\n  }\\n  \\n  // Get target input port name\\n  const toPortName = gen.me.getInPortName( gen.modelId, link.to, link.toPort );\\n  // Generate input update if node info is defined\\n  if( ni ) {\\n    gen.lines.push( `${indent}// Store new input` );\\n    gen.lines.push( `${indent}nodeData_${link.to}.setInput( '${toPortName}', value );` );\\n  }\\n  // Generate compute call\\n  if( value ) {\\n    gen.lines.push( `${indent}nodeData_${link.to}.doCompute( '${toPortName}', ${value} );` );\\n  } else {\\n    gen.lines.push( `${indent}nodeData_${link.to}.doCompute( '${toPortName}' );` );\\n  }\\n}\\nfunction generateStartNode( gen, data ) {\\n  // Get output links\\n  const linkList = gen.me.getLinkListFanOutByNodeKey( gen.modelId, data.key, 'out' );\\n  for( const link of linkList ) {\\n    generateLinkCall( gen, null, '', link );\\n  }\\n}\\nfunction generateNodeCompute( gen, ni ) {\\n  let isMainDeclSkipped = false;\\n  \\n  // Get compute identifier\\n  let computeId = getComputeId( gen, ni );\\n  // Generate compute only if necessary\\n  if( computeId ) {\\n    addComputeId( gen, computeId );\\n    // Generate compute function\\n    gen.lines.push( `function ${computeId}( name, value ) {` );\\n    for( let line of ni.src ) {\\n      if( !isMainDeclSkipped ) {\\n        if( gen.declLine.test( line ) ) {\\n          isMainDeclSkipped = true;\\n        }\\n      } else {\\n        if( gen.fireLine.test( line ) ) {\\n          line = line.replace( gen.fireLine, `this.fireOutput(` );\\n        } else if( gen.getInLine.test( line ) ) {\\n          line = line.replace( gen.getInLine, `this.getInput(` );\\n        } else if( gen.getLine.test( line ) ) {\\n          line = line.replace( gen.getLine, `this.get(` );\\n        }\\n        gen.lines.push( `  ${line}` );\\n      }\\n    }\\n    gen.lines.push( `}` );\\n  }\\n}\\nfunction getComputeId( gen, ni ) {\\n  let result = null;\\n  let computeId = null;\\n  \\n  if( ni.data.doCompute ) {\\n    computeId = ni.data.doCompute;\\n  } else if( ni.data.fileTypeName && ni.data.fileTypeName != 'Component' ) {\\n    computeId = ni.data.fileTypeName;\\n  } else {\\n    computeId = `compute_${ni.key}`;\\n  }\\n  // If we did not generate the compute yet\\n  if( !gen.computeBuffer[computeId] ) {\\n    result = computeId;\\n  }\\n  return( result );\\n}\\nfunction addComputeId( gen, computeId ) {\\n  gen.computeBuffer[computeId] = true;\\n}\\nfunction getNodeInfo( gen, data ) {\\n  const nodeInfo = {\\n    data,\\n    src: null,\\n    key: data.key,\\n    label: data.label,\\n    descr: `[${data.category}] ${ data.label? data.label: data.key }`,\\n  };\\n  \\n  if( data.fileContent ) {\\n    nodeInfo.src = data.fileContent.split( '\\\\n' );\\n  } else if( data.category == 'DataFlow_Message' ) {\\n    //nodeInfo.src = globalThis[data.doCompute].toString().split( '\\\\n' );\\n    nodeInfo.src = [ \\n      `var nodeData, name, value;`,\\n      ``,\\n      `if( value == undefined ) {`,\\n      //`  value = \\\"${nodeInfo.label}\\\";`,\\n      `  value = this.getProperty( 'label', '' );`,\\n      `  try {`,\\n      `    value = JSON.parse( value ); `,\\n      `  } catch( e ) {}`,\\n      `}`,\\n      `this.fireOutput( 'out', value );` \\n    ];\\n  }\\n  \\n  return( nodeInfo.src? nodeInfo: null );  \\n}\\n\\nvar module;\\nif( module ) {\\n  module.exports = generationRoot;\\n}\",\"fileTypeName\":\"JavaScript\",\"fileType\":\"text/javascript\",\"key\":62,\"location\":\"3020 2390\",\"editorPosition\":[3039,1058,799,1814],\"group\":78},\n{\"label\":\"This is the code generator program.\\nNOTE: it is an include file for this workspace, as well as a file to be deployed on the server\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"391 58\",\"key\":64,\"location\":\"3450 2350\",\"group\":78},\n{\"label\":\"\",\"category\":\"Pictures_Basic\",\"size\":\"1462 865\",\"isFile\":true,\"fileTypeName\":\"Image\",\"fileType\":\"image/png\",\"fileURL\":\"/fileServer/pictures/Test DataFlow & Code Generation.png\",\"key\":66,\"location\":\"9130 2560\"},\n{\"label\":\"Includes\",\"category\":\"TextLabels_Size5\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"2151 154\",\"key\":60,\"location\":\"3570 580\",\"color\":\"LightGreen\"},\n{\"label\":\"Screenshot\",\"category\":\"TextLabels_Size5\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"3539 154\",\"key\":70,\"location\":\"6380 1380\",\"color\":\"Yellow\"},\n{\"label\":\"  Development WorkSpace\",\"category\":\"TextLabels_Size5\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"5298 154\",\"key\":68,\"location\":\"-2470 930\",\"color\":\"#d2b4de\"},\n{\"label\":\"DFE Code Generator 1.0\",\"color\":\"orange\",\"size\":\"406 144\",\"category\":\"Hierarchy_CodeInGraph\",\"isIncludeScript\":false,\"isFile\":true,\"fileContent\":\"/**\\n * This is an example of Code Generator based on the conventions\\n * of the component model and the DataFlow Engine execution model\\n *\\n * The main function to start code generation is:\\n *    generationRoot( gen, callback )\\n * Where:\\n *   gen: is a data structure with the following information\\n *        {\\n *          name: 'GenDFE 1.0',  // Code generator name and version\\n *          groupKey: null,       // Group node key containing the Model to be generated\\n *          me: null,             // ModelExplorer loaded with the model\\n *          modelId: 'main',      // Model Id\\n *        };\\n * \\n *   callback: a function( source, msg ) executed at the end of\\n *             the generation process. Source is the generated source\\n *             code, while msg is a message starting with Success:/Error:\\n */\\n\\nfunction generationRoot( gen, onGenerated ) {\\n  console.log( 'Starting Generation...' );\\n  \\n  // If nodes are found ==> start generation\\n  if( gen.groupKey != null ) {\\n    // Extend generation info\\n    gen.lines = [];                      // Number of lines of code generate\\n    gen.date = new Date().toGMTString(); // Generation date info\\n    gen.startNodeList = [],              // Start nodes\\n    // Match line: var nodeData, name, value;\\n    gen.declLine = RegExp( /\\\\s*var\\\\s+nodeData\\\\s*,/ );\\n    // Match line: graphData.dfe.fireOutput( nodeData, ... );\\n    gen.fireLine = RegExp( /graphData.dfe.fireOutput\\\\(\\\\s*nodeData\\\\s*,/ );\\n    // Match line: const lValue = graphData.dfe.getInput( nodeData, 'lValue', 0 );\\n    gen.getInLine = RegExp( /graphData.dfe.getInput\\\\(\\\\s*nodeData\\\\s*,/ );\\n    // Match line: const s = graphData.dfe.get( nodeData, 'inputStat', {} );\\n    gen.getLine = RegExp( /graphData.dfe.get\\\\(\\\\s*nodeData\\\\s*,/ );\\n    //gen.getInLine = RegExp( /graphData.dfe.getInput\\\\(\\\\s*nodeData\\\\s*,\\\\s*([^,]+),/ );  \\n    //line = line.replace( getInLine, `( node_${ni.key}[$1] != undefined? node_${ni.key}[$1]:` );\\n    \\n    // Start generation\\n    generateGroup( gen, onGenerated );\\n  } else {\\n    if( onGenerated ) {\\n      onGenerated( '', 'Error: group key not found in gen parameter' );\\n    }\\n  }\\n}\\nfunction generateGroup( gen, onGenerated ) {\\n  const header = [ \\n    '/*',\\n    ` * This file is code generated by ${gen.name}`,\\n    ' *',\\n    ` * Generated on ${gen.date}`,\\n    ' */',\\n    '',\\n    '// System function for reading input',\\n    'function node_getInput( node, name, defaultValue ) {',\\n    '  if( node.in_[name] == undefined ) {',\\n    '    node.in_[name] = defaultValue;',\\n    '  }',\\n    '  return( node.in_[name] );',\\n    '}',\\n    '// System function for storing access',\\n    'function node_setInput( node, name, value ) {',\\n    '  node.in_[name] = value;',\\n    '}',\\n    '// System function for instance data access',\\n    'function node_get( node, name, defaultValue ) {',\\n    '  if( node.st_[name] == undefined ) {',\\n    '    node.st_[name] = defaultValue;',\\n    '  }',\\n    '  return( node.st_[name] );',\\n    '}',\\n    '' ];\\n  // Add lines\\n  gen.lines = gen.lines.concat( header );\\n  \\n  // Get all nodes in the group\\n  const dataList = gen.me.getNodeListBy( 'main', 'group', gen.groupKey );\\n  // Generate compute function for all nodes\\n  for( const data of dataList ) {\\n    // Get nodeInfo\\n    if( data.category == 'DataFlow_Start' ) {\\n      gen.startNodeList.push( data );\\n      continue;\\n    }\\n    \\n    const nodeInfo = getNodeInfo( gen, data );\\n    if( nodeInfo ) {\\n      generateNodeState( gen, nodeInfo );\\n      generateNodeCompute( gen, nodeInfo );\\n      generateNodeFire( gen, nodeInfo );\\n    }\\n  }\\n  \\n  if( gen.startNodeList.length ) {\\n    // Generate start functions\\n    gen.lines.push( '' );\\n    gen.lines.push( '/********************' );\\n    gen.lines.push( ' * System Start' );\\n    gen.lines.push( ' ********************/' );\\n    // Generate Start Nodes\\n    for( const data of gen.startNodeList ) {\\n      generateStartNode( gen, data );\\n    }\\n    gen.lines.push( '' );\\n  }\\n  \\n  // Save source in target component\\n  const content = gen.lines.join( '\\\\n' );\\n  if( onGenerated ) {\\n    // Generate closing event\\n    onGenerated( content, `Success: ${gen.lines.length} lines` );\\n  }\\n}\\nfunction generateNodeState( gen, ni ) {\\n  gen.lines.push( `const node_${ni.key} = {` );\\n  gen.lines.push( `  in_:  {}, // Input` );\\n  gen.lines.push( `  st_:  {}, // Storage` );\\n  gen.lines.push( `  out_: {}, // Output` );\\n  gen.lines.push( `};` );\\n}\\nfunction generateNodeCompute( gen, ni ) {\\n  let isMainDeclSkipped = false;\\n  \\n  // Generate compute function\\n  gen.lines.push( `function compute_${ni.key}( name, value ) {` );\\n  gen.lines.push( `` );\\n  gen.lines.push( `  // Store new input` );\\n  gen.lines.push( `  node_setInput( node_${ni.key}, name, value );` );\\n  for( let line of ni.src ) {\\n    if( !isMainDeclSkipped ) {\\n      if( gen.declLine.test( line ) ) {\\n        isMainDeclSkipped = true;\\n      }\\n    } else {\\n      if( gen.fireLine.test( line ) ) {\\n        line = line.replace( gen.fireLine, `fire_${ni.key}(` );\\n      } else if( gen.getInLine.test( line ) ) {\\n        line = line.replace( gen.getInLine, `node_getInput( node_${ni.key},` );\\n      } else if( gen.getLine.test( line ) ) {\\n        line = line.replace( gen.getLine, `node_get( node_${ni.key},` );\\n      }\\n      gen.lines.push( `  ${line}` );\\n    }\\n  }\\n  gen.lines.push( `}` );\\n}\\nfunction generateNodeFire( gen, ni ) {\\n  // Get out port list\\n  const outPortList = gen.me.getOutPortNameList( 'main', ni.key );\\n  const portLen = outPortList.length\\n  if( portLen ) {\\n    // Generate fire function\\n    gen.lines.push( `function fire_${ni.key}( name, value ) {` );\\n    gen.lines.push( `  if( name == '${outPortList[0]}' ) {` );\\n    // Loop on each output port\\n    for( let i = 0; i < portLen; ++i ) {\\n      const portName = outPortList[i];\\n      if( i > 0 ) {\\n        gen.lines.push( `  } else if( name == '${portName}' ) {` );\\n      }\\n      \\n      // Get output links\\n      const linkList = gen.me.getLinkListFanOutByNodeKey( gen.modelId, ni.key, portName );\\n      for( const link of linkList ) {\\n        generateLinkCall( gen, '    ', link, 'value' );\\n      }\\n    }\\n    gen.lines.push( `  }` );\\n    gen.lines.push( `}` );\\n  }\\n}\\nfunction generateLinkCall( gen, indent, link, value ) {\\n  if( link.category == 'DataFlow_Log' ) {\\n      return;\\n  } else if( link.category == 'DataFlow_Pause') {\\n    gen.lines.push( `${indent}debugger` );\\n  }\\n  const toPortName = gen.me.getInPortName( gen.modelId, link.to, link.toPort );\\n  if( value ) {\\n    gen.lines.push( `${indent}compute_${link.to}( '${toPortName}', ${value} );` );\\n  } else {\\n    gen.lines.push( `${indent}compute_${link.to}( '${toPortName}' );` );\\n  }\\n}\\nfunction generateStartNode( gen, data ) {\\n  // Get output links\\n  const linkList = gen.me.getLinkListFanOutByNodeKey( gen.modelId, data.key, 'out' );\\n  for( const link of linkList ) {\\n    generateLinkCall( gen, '', link );\\n  }\\n}\\nfunction getNodeInfo( gen, data ) {\\n  const nodeInfo = {\\n    data,\\n    src: null,\\n    key: data.key,\\n    label: data.label,\\n    descr: ( data.label? data.label: data.key ),\\n  };\\n  \\n  if( data.fileContent ) {\\n    nodeInfo.src = data.fileContent.split( '\\\\n' );\\n    gen.lines.push( `// Node: ${nodeInfo.descr}` );\\n    \\n  } else if( data.category == 'DataFlow_Message' ) {\\n    gen.lines.push( `// Node: Message \\\"${nodeInfo.descr}\\\"` );\\n    //nodeInfo.src = globalThis[data.doCompute].toString().split( '\\\\n' );\\n    nodeInfo.src = [ \\n      `var nodeData, name, value;`,\\n      ``,\\n      `if( value == undefined ) {`,\\n      `  value = \\\"${nodeInfo.label}\\\";`,\\n      `  try {`,\\n      `    value = JSON.parse( value ); `,\\n      `  } catch( e ) {}`,\\n      `}`,\\n      `fire_${nodeInfo.key}( 'out', value );` \\n    ];\\n  }\\n  \\n  return( nodeInfo.src? nodeInfo: null );  \\n}\",\"fileTypeName\":\"JavaScript\",\"fileType\":\"text/javascript\",\"key\":72,\"location\":\"2410 1130\"},\n{\"label\":\"DFE Code Generator 1.1\",\"color\":\"orange\",\"size\":\"406 144\",\"category\":\"Hierarchy_CodeInGraph\",\"isIncludeScript\":false,\"isFile\":true,\"fileContent\":\"/**\\n * This is an example of Code Generator based on the conventions\\n * of the component model and the DataFlow Engine execution model\\n *\\n * The main function to start code generation is:\\n *    generationRoot( gen, callback )\\n * Where:\\n *   gen: is a data structure with the following information\\n *        {\\n *          name: 'GenDFE 1.0',  // Code generator name and version\\n *          groupKey: null,       // Group node key containing the Model to be generated\\n *          me: null,             // ModelExplorer loaded with the model\\n *          modelId: 'main',      // Model Id\\n *        };\\n * \\n *   callback: a function( source, msg ) executed at the end of\\n *             the generation process. Source is the generated source\\n *             code, while msg is a message starting with Success:/Error:\\n */\\n\\nfunction generationRoot( gen, onGenerated ) {\\n  console.log( 'Starting Generation...' );\\n  \\n  // If nodes are found ==> start generation\\n  if( gen.groupKey != null ) {\\n    // Extend generation info\\n    gen.lines = [];                      // Number of lines of code generate\\n    gen.date = new Date().toGMTString(); // Generation date info\\n    gen.startNodeList = [],              // Start nodes\\n    // Match line: var nodeData, name, value;\\n    gen.declLine = RegExp( /\\\\s*var\\\\s+nodeData\\\\s*,/ );\\n    // Match line: graphData.dfe.fireOutput( nodeData, ... );\\n    gen.fireLine = RegExp( /graphData.dfe.fireOutput\\\\(/ );\\n    // Match line: const lValue = graphData.dfe.getInput( nodeData, 'lValue', 0 );\\n    gen.getInLine = RegExp( /graphData.dfe.getInput\\\\(/ );\\n    // Match line: const s = graphData.dfe.get( nodeData, 'inputStat', {} );\\n    gen.getLine = RegExp( /graphData.dfe.get\\\\(/ );\\n    //gen.getInLine = RegExp( /graphData.dfe.getInput\\\\(\\\\s*nodeData\\\\s*,\\\\s*([^,]+),/ );  \\n    //line = line.replace( getInLine, `( node_${ni.key}[$1] != undefined? node_${ni.key}[$1]:` );\\n    \\n    // Start generation\\n    generateGroup( gen, onGenerated );\\n  } else {\\n    if( onGenerated ) {\\n      onGenerated( '', 'Error: group key not found in gen parameter' );\\n    }\\n  }\\n}\\nfunction generateGroup( gen, onGenerated ) {\\n  const header = [ \\n    '/*',\\n    ` * This file is code generated by ${gen.name}`,\\n    ' *',\\n    ` * Generated on ${gen.date}`,\\n    ' */',\\n    '',\\n    '/********************',\\n    ' * Node Functions',\\n    ' ********************/',\\n    '// System function for reading properties',\\n    'function nodeData_getProperty( nodeData, name, defaultValue ) {',\\n    '  // NOTE: this function access both nodeData fields and properties',\\n    '  if( nodeData.nd_[name] != undefined ) {',\\n    '    return( nodeData.nd_[name] );',\\n    '  } else if( nodeData.nd_.props_[name] != undefined ) {',\\n    '    return( nodeData.nd_.props_[name] );',\\n    '  } else {',\\n    '    return( defaultValue );',\\n    '  }',\\n    '}',\\n    '// System function for reading input',\\n    'function nodeData_getInput( nodeData, name, defaultValue ) {',\\n    '  if( nodeData.in_[name] == undefined ) {',\\n    '    nodeData.in_[name] = defaultValue;',\\n    '  }',\\n    '  return( nodeData.in_[name] );',\\n    '}',\\n    '// System function for storing access',\\n    'function nodeData_setInput( nodeData, name, value ) {',\\n    '  nodeData.in_[name] = value;',\\n    '}',\\n    '// System function for instance data access',\\n    'function nodeData_get( nodeData, name, defaultValue ) {',\\n    '  if( nodeData.st_[name] == undefined ) {',\\n    '    nodeData.st_[name] = defaultValue;',\\n    '  }',\\n    '  return( nodeData.st_[name] );',\\n    '}',\\n    '// System function for firing inputs',\\n    'function nodeData_fireInput( nodeData, name, value ) {',\\n    '  nodeData_setInput( nodeData, name, value );',\\n    '  nodeData.doCompute( nodeData, name, value );',\\n    '}',\\n    '',\\n    '/********************',\\n    ' * Model Functions',\\n    ' ********************/' ];\\n  // Add lines\\n  gen.lines = gen.lines.concat( header );\\n  \\n  // Get all nodes in the group\\n  const dataList = gen.me.getNodeListBy( 'main', 'group', gen.groupKey );\\n  \\n  // Generate instance data for all nodes\\n  for( const data of dataList ) {\\n    const nodeInfo = getNodeInfo( gen, data );\\n    if( nodeInfo ) {\\n      gen.lines.push( `// Node Info: ${nodeInfo.descr}` );\\n      generateNodeFire( gen, nodeInfo );\\n      generateNodeState( gen, nodeInfo );\\n    }\\n  }\\n  \\n  const funcHeader = [\\n    '',\\n    '/********************',\\n    ' * Compute Functions',\\n    ' ********************/' ];\\n  // Add lines\\n  gen.lines = gen.lines.concat( funcHeader );\\n  \\n  // Generate compute function for all nodes\\n  for( const data of dataList ) {\\n    // Get nodeInfo\\n    if( data.category == 'DataFlow_Start' ) {\\n      gen.startNodeList.push( data );\\n      continue;\\n    }\\n    \\n    const nodeInfo = getNodeInfo( gen, data );\\n    if( nodeInfo ) {\\n      gen.lines.push( `// Node Compute: ${nodeInfo.descr}` );\\n      generateNodeCompute( gen, nodeInfo );\\n    }\\n  }\\n  \\n  if( gen.startNodeList.length ) {\\n    // Generate start functions\\n    const sysStart =[\\n      '',\\n      '/********************',\\n      ' * System Start',\\n      ' ********************/' ];\\n    // Add lines\\n    gen.lines = gen.lines.concat( sysStart );\\n    // Generate Start Nodes\\n    for( const data of gen.startNodeList ) {\\n      generateStartNode( gen, data );\\n    }\\n    gen.lines.push( '' );\\n  }\\n  \\n  // Save source in target component\\n  const content = gen.lines.join( '\\\\n' );\\n  if( onGenerated ) {\\n    // Generate closing event\\n    onGenerated( content, `Success: ${gen.lines.length} lines` );\\n  }\\n}\\nfunction generateNodeState( gen, ni ) {\\n  const nodeDataObj = [\\n    `const nodeData_${ni.key} = {`,\\n    `  in_: {},     // Input`,\\n    `  st_: {},     // Storage`,\\n    `  nd_: { // Properties`,\\n    `    label: '${ni.data.label}',`, // Some fields could be put here\\n    '    props_: {}', // It could be translated here into key,value?\\n    `  },`,\\n    `  out_: {},     // Output`,\\n    `  fireOutput: fireOutput_${ni.key}, // Output fire function`,\\n    `  doCompute: compute_${ni.key},     // Node compute function`,\\n    `};` ];\\n  // Add lines\\n  gen.lines = gen.lines.concat( nodeDataObj );\\n}\\nfunction generateNodeFire( gen, ni ) {\\n  // Get out port list\\n  const outPortList = gen.me.getOutPortNameList( 'main', ni.key );\\n  const portLen = outPortList.length\\n  \\n  // Generate fire function\\n  gen.lines.push( `function fireOutput_${ni.key}( nodeData, name, value ) {` );\\n  // Generate fire body\\n  if( portLen ) {\\n    gen.lines.push( `  if( name == '${outPortList[0]}' ) {` );\\n    // Loop on each output port\\n    for( let i = 0; i < portLen; ++i ) {\\n      const portName = outPortList[i];\\n      if( i > 0 ) {\\n        gen.lines.push( `  } else if( name == '${portName}' ) {` );\\n      }\\n      \\n      // Get output links\\n      const linkList = gen.me.getLinkListFanOutByNodeKey( gen.modelId, ni.key, portName );\\n      for( const link of linkList ) {\\n        generateLinkCall( gen, ni, '    ', link, 'value' );\\n      }\\n    }\\n    gen.lines.push( `  }` );\\n  }\\n  gen.lines.push( `}` );\\n}\\nfunction generateLinkCall( gen, ni, indent, link, value ) {\\n  // Check link type\\n  if( link.category == 'DataFlow_Log' ) {\\n      return;\\n  } else if( link.category == 'DataFlow_Pause') {\\n    gen.lines.push( `${indent}debugger` );\\n  }\\n  \\n  // Get target input port name\\n  const toPortName = gen.me.getInPortName( gen.modelId, link.to, link.toPort );\\n  // Generate input update if node info is defined\\n  if( ni ) {\\n    gen.lines.push( `${indent}// Store new input` );\\n    gen.lines.push( `${indent}nodeData_setInput( nodeData_${link.to}, '${toPortName}', value );` );\\n  }\\n  // Generate compute call\\n  if( value ) {\\n    gen.lines.push( `${indent}nodeData_${link.to}.doCompute( nodeData_${link.to}, '${toPortName}', ${value} );` );\\n  } else {\\n    gen.lines.push( `${indent}nodeData_${link.to}.doCompute( nodeData_${link.to}, '${toPortName}' );` );\\n  }\\n}\\nfunction generateStartNode( gen, data ) {\\n  // Get output links\\n  const linkList = gen.me.getLinkListFanOutByNodeKey( gen.modelId, data.key, 'out' );\\n  for( const link of linkList ) {\\n    generateLinkCall( gen, null, '', link );\\n  }\\n}\\nfunction generateNodeCompute( gen, ni ) {\\n  let isMainDeclSkipped = false;\\n  \\n  // Generate compute function\\n  gen.lines.push( `function compute_${ni.key}( nodeData, name, value ) {` );\\n  for( let line of ni.src ) {\\n    if( !isMainDeclSkipped ) {\\n      if( gen.declLine.test( line ) ) {\\n        isMainDeclSkipped = true;\\n      }\\n    } else {\\n      if( gen.fireLine.test( line ) ) {\\n        line = line.replace( gen.fireLine, `nodeData.fireOutput(` );\\n      } else if( gen.getInLine.test( line ) ) {\\n        line = line.replace( gen.getInLine, `nodeData_getInput(` );\\n      } else if( gen.getLine.test( line ) ) {\\n        line = line.replace( gen.getLine, `nodeData_get(` );\\n      }\\n      gen.lines.push( `  ${line}` );\\n    }\\n  }\\n  gen.lines.push( `}` );\\n}\\nfunction getNodeInfo( gen, data ) {\\n  const nodeInfo = {\\n    data,\\n    src: null,\\n    key: data.key,\\n    label: data.label,\\n    descr: `[${data.category}] ${ data.label? data.label: data.key }`,\\n  };\\n  \\n  if( data.fileContent ) {\\n    nodeInfo.src = data.fileContent.split( '\\\\n' );\\n  } else if( data.category == 'DataFlow_Message' ) {\\n    //nodeInfo.src = globalThis[data.doCompute].toString().split( '\\\\n' );\\n    nodeInfo.src = [ \\n      `var nodeData, name, value;`,\\n      ``,\\n      `if( value == undefined ) {`,\\n      //`  value = \\\"${nodeInfo.label}\\\";`,\\n      `  value = nodeData_getProperty( nodeData, 'label', '' );`,\\n      `  try {`,\\n      `    value = JSON.parse( value ); `,\\n      `  } catch( e ) {}`,\\n      `}`,\\n      `nodeData.fireOutput( nodeData, 'out', value );` \\n    ];\\n  }\\n  \\n  return( nodeInfo.src? nodeInfo: null );  \\n}\",\"fileTypeName\":\"JavaScript\",\"fileType\":\"text/javascript\",\"key\":76,\"location\":\"2410 1300\",\"editorPosition\":[3188,1027,876,1871]},\n{\"label\":\"DFE Code Generator 1.2\",\"color\":\"orange\",\"size\":\"406 144\",\"category\":\"Hierarchy_CodeInGraph\",\"isIncludeScript\":false,\"isFile\":true,\"fileContent\":\"/**\\n * This is an example of Code Generator based on the conventions\\n * of the component model and the DataFlow Engine execution model\\n *\\n * The main function to start code generation is:\\n *    generationRoot( gen, callback )\\n * Where:\\n *   gen: is a data structure with the following information\\n *        {\\n *          name: 'GenDFE 1.0',  // Code generator name and version\\n *          groupKey: null,       // Group node key containing the Model to be generated\\n *          me: null,             // ModelExplorer loaded with the model\\n *          modelId: 'main',      // Model Id\\n *        };\\n * \\n *   callback: a function( source, msg ) executed at the end of\\n *             the generation process. Source is the generated source\\n *             code, while msg is a message starting with Success:/Error:\\n */\\n\\nfunction generationRoot( gen, onGenerated ) {\\n  console.log( 'Starting Generation...' );\\n  \\n  // If nodes are found ==> start generation\\n  if( gen.groupKey != null ) {\\n    // Extend generation info\\n    gen.lines = [];                      // Number of lines of code generate\\n    gen.date = new Date().toGMTString(); // Generation date info\\n    gen.startNodeList = [],              // Start nodes\\n    // Match line: var nodeData, name, value;\\n    gen.declLine = RegExp( /\\\\s*var\\\\s+nodeData\\\\s*,/ );\\n    // Match line: graphData.dfe.fireOutput( nodeData, 'out', value );\\n    gen.fireLine = RegExp( /graphData.dfe.fireOutput\\\\(\\\\s*nodeData\\\\s*,/ );\\n    // Match line: const lValue = graphData.dfe.getInput( nodeData, 'lValue', 0 );\\n    gen.getInLine = RegExp( /graphData.dfe.getInput\\\\(\\\\s*nodeData\\\\s*,/ );\\n    // Match line: const s = graphData.dfe.get( nodeData, 'inputStat', {} );\\n    gen.getLine = RegExp( /graphData.dfe.get\\\\(\\\\s*nodeData\\\\s*,/ );\\n    //gen.getInLine = RegExp( /graphData.dfe.getInput\\\\(\\\\s*nodeData\\\\s*,\\\\s*([^,]+),/ );  \\n    //line = line.replace( getInLine, `( node_${ni.key}[$1] != undefined? node_${ni.key}[$1]:` );\\n    \\n    // Start generation\\n    generateGroup( gen, onGenerated );\\n  } else {\\n    if( onGenerated ) {\\n      onGenerated( '', 'Error: group key not found in gen parameter' );\\n    }\\n  }\\n}\\nfunction generateGroup( gen, onGenerated ) {\\n  const header = [ \\n    '/*',\\n    ` * This file is code generated by ${gen.name}`,\\n    ' *',\\n    ` * Generated on ${gen.date}`,\\n    ' */',\\n    '',\\n    '/********************',\\n    ' * Node Functions',\\n    ' ********************/',\\n    '// System function for reading properties',\\n    'function nodeData_getProperty( nodeData, name, defaultValue ) {',\\n    '  // NOTE: this function access both nodeData fields and properties',\\n    '  if( nodeData.nd_[name] != undefined ) {',\\n    '    return( nodeData.nd_[name] );',\\n    '  } else if( nodeData.nd_.props_[name] != undefined ) {',\\n    '    return( nodeData.nd_.props_[name] );',\\n    '  } else {',\\n    '    return( defaultValue );',\\n    '  }',\\n    '}',\\n    '// System function for reading input',\\n    'function nodeData_getInput( nodeData, name, defaultValue ) {',\\n    '  if( nodeData.in_[name] == undefined ) {',\\n    '    nodeData.in_[name] = defaultValue;',\\n    '  }',\\n    '  return( nodeData.in_[name] );',\\n    '}',\\n    '// System function for storing access',\\n    'function nodeData_setInput( nodeData, name, value ) {',\\n    '  nodeData.in_[name] = value;',\\n    '}',\\n    '// System function for instance data access',\\n    'function nodeData_get( nodeData, name, defaultValue ) {',\\n    '  if( nodeData.st_[name] == undefined ) {',\\n    '    nodeData.st_[name] = defaultValue;',\\n    '  }',\\n    '  return( nodeData.st_[name] );',\\n    '}',\\n    '// System function for firing inputs',\\n    'function nodeData_fireInput( nodeData, name, value ) {',\\n    '  nodeData_setInput( nodeData, name, value );',\\n    '  nodeData.doCompute( name, value );',\\n    '}',\\n    '',\\n    '/********************',\\n    ' * Model Functions',\\n    ' ********************/' ];\\n  // Add lines\\n  gen.lines = gen.lines.concat( header );\\n  \\n  // Get all nodes in the group\\n  const dataList = gen.me.getNodeListBy( 'main', 'group', gen.groupKey );\\n  \\n  // Generate instance data for all nodes\\n  for( const data of dataList ) {\\n    const nodeInfo = getNodeInfo( gen, data );\\n    if( nodeInfo ) {\\n      gen.lines.push( `// Node Info: ${nodeInfo.descr}` );\\n      generateNodeFire( gen, nodeInfo );\\n      generateNodeState( gen, nodeInfo );\\n    }\\n  }\\n  \\n  const funcHeader = [\\n    '',\\n    '/********************',\\n    ' * Compute Functions',\\n    ' ********************/' ];\\n  // Add lines\\n  gen.lines = gen.lines.concat( funcHeader );\\n  \\n  // Generate compute function for all nodes\\n  for( const data of dataList ) {\\n    // Get nodeInfo\\n    if( data.category == 'DataFlow_Start' ) {\\n      gen.startNodeList.push( data );\\n      continue;\\n    }\\n    \\n    const nodeInfo = getNodeInfo( gen, data );\\n    if( nodeInfo ) {\\n      gen.lines.push( `// Node Compute: ${nodeInfo.descr}` );\\n      generateNodeCompute( gen, nodeInfo );\\n    }\\n  }\\n  \\n  if( gen.startNodeList.length ) {\\n    // Generate start functions\\n    const sysStart =[\\n      '',\\n      '/********************',\\n      ' * System Start',\\n      ' ********************/' ];\\n    // Add lines\\n    gen.lines = gen.lines.concat( sysStart );\\n    // Generate Start Nodes\\n    for( const data of gen.startNodeList ) {\\n      generateStartNode( gen, data );\\n    }\\n    gen.lines.push( '' );\\n  }\\n  \\n  // Save source in target component\\n  const content = gen.lines.join( '\\\\n' );\\n  if( onGenerated ) {\\n    // Generate closing event\\n    onGenerated( content, `Success: ${gen.lines.length} lines` );\\n  }\\n}\\nfunction generateNodeState( gen, ni ) {\\n  const nodeDataObjOpen = [\\n    `const nodeData_${ni.key} = {`,\\n    `  in_: {},     // Input`,\\n    `  st_: {},     // Storage`,\\n    `  nd_: { // Properties`,\\n    `    label: '${ni.data.label}',`, // Some fields could be put here\\n    '    props_: {}', // It could be translated here into key,value?\\n    `  },`,\\n    `  out_: {},     // Output`,\\n    `  fireOutput: fireOutput_${ni.key}, // Output fire function`,\\n    `  doCompute: compute_${ni.key},     // Node compute function`,\\n    `};` ];\\n  // Add lines\\n  gen.lines = gen.lines.concat( nodeDataObjOpen );\\n}\\nfunction generateNodeFire( gen, ni ) {\\n  // Get out port list\\n  const outPortList = gen.me.getOutPortNameList( 'main', ni.key );\\n  const portLen = outPortList.length\\n  \\n  // Generate fire function\\n  gen.lines.push( `function fireOutput_${ni.key}( name, value ) {` );\\n  // Generate fire body\\n  if( portLen ) {\\n    gen.lines.push( `  if( name == '${outPortList[0]}' ) {` );\\n    // Loop on each output port\\n    for( let i = 0; i < portLen; ++i ) {\\n      const portName = outPortList[i];\\n      if( i > 0 ) {\\n        gen.lines.push( `  } else if( name == '${portName}' ) {` );\\n      }\\n      \\n      // Get output links\\n      const linkList = gen.me.getLinkListFanOutByNodeKey( gen.modelId, ni.key, portName );\\n      for( const link of linkList ) {\\n        generateLinkCall( gen, ni, '    ', link, 'value' );\\n      }\\n    }\\n    gen.lines.push( `  }` );\\n  }\\n  gen.lines.push( `}` );\\n}\\nfunction generateLinkCall( gen, ni, indent, link, value ) {\\n  // Check link type\\n  if( link.category == 'DataFlow_Log' ) {\\n      return;\\n  } else if( link.category == 'DataFlow_Pause') {\\n    gen.lines.push( `${indent}debugger` );\\n  }\\n  \\n  // Get target input port name\\n  const toPortName = gen.me.getInPortName( gen.modelId, link.to, link.toPort );\\n  // Generate input update if node info is defined\\n  if( ni ) {\\n    gen.lines.push( `${indent}// Store new input` );\\n    gen.lines.push( `${indent}nodeData_setInput( nodeData_${link.to}, '${toPortName}', value );` );\\n  }\\n  // Generate compute call\\n  if( value ) {\\n    gen.lines.push( `${indent}nodeData_${link.to}.doCompute( '${toPortName}', ${value} );` );\\n  } else {\\n    gen.lines.push( `${indent}nodeData_${link.to}.doCompute( '${toPortName}' );` );\\n  }\\n}\\nfunction generateStartNode( gen, data ) {\\n  // Get output links\\n  const linkList = gen.me.getLinkListFanOutByNodeKey( gen.modelId, data.key, 'out' );\\n  for( const link of linkList ) {\\n    generateLinkCall( gen, null, '', link );\\n  }\\n}\\nfunction generateNodeCompute( gen, ni ) {\\n  let isMainDeclSkipped = false;\\n  \\n  // Generate compute function\\n  gen.lines.push( `function compute_${ni.key}( name, value ) {` );\\n  for( let line of ni.src ) {\\n    if( !isMainDeclSkipped ) {\\n      if( gen.declLine.test( line ) ) {\\n        isMainDeclSkipped = true;\\n      }\\n    } else {\\n      if( gen.fireLine.test( line ) ) {\\n        line = line.replace( gen.fireLine, `this.fireOutput(` );\\n      } else if( gen.getInLine.test( line ) ) {\\n        line = line.replace( gen.getInLine, `nodeData_getInput( this,` );\\n      } else if( gen.getLine.test( line ) ) {\\n        line = line.replace( gen.getLine, `nodeData_get( this,` );\\n      }\\n      gen.lines.push( `  ${line}` );\\n    }\\n  }\\n  gen.lines.push( `}` );\\n}\\nfunction getNodeInfo( gen, data ) {\\n  const nodeInfo = {\\n    data,\\n    src: null,\\n    key: data.key,\\n    label: data.label,\\n    descr: `[${data.category}] ${ data.label? data.label: data.key }`,\\n  };\\n  \\n  if( data.fileContent ) {\\n    nodeInfo.src = data.fileContent.split( '\\\\n' );\\n  } else if( data.category == 'DataFlow_Message' ) {\\n    //nodeInfo.src = globalThis[data.doCompute].toString().split( '\\\\n' );\\n    nodeInfo.src = [ \\n      `var nodeData, name, value;`,\\n      ``,\\n      `if( value == undefined ) {`,\\n      //`  value = \\\"${nodeInfo.label}\\\";`,\\n      `  value = nodeData_getProperty( this, 'label', '' );`,\\n      `  try {`,\\n      `    value = JSON.parse( value ); `,\\n      `  } catch( e ) {}`,\\n      `}`,\\n      `this.fireOutput( 'out', value );` \\n    ];\\n  }\\n  \\n  return( nodeInfo.src? nodeInfo: null );  \\n}\",\"fileTypeName\":\"JavaScript\",\"fileType\":\"text/javascript\",\"key\":74,\"location\":\"2420 1480\",\"editorPosition\":[3188,1027,876,1871]},\n{\"label\":\"DFEGen/1.3\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":78,\"location\":\"3000 2308.5\"},\n{\"label\":\"System Status: [DEPLOYED]\\ndone\\nFilesCount: 0 of 1\\nDirCount: 1 of 1\",\"category\":\"CodeFlow_Button\",\"color\":\"YellowGreen\",\"size\":\"390 120\",\"buttons_\":[{\"name\":\"Deploy\",\"checked\":true},{\"name\":\"Start\",\"checked\":true},{\"name\":\"Stop\",\"checked\":false}],\"props_\":[{\"name\":\"isOverwrite\",\"value\":\"true\",\"valueChanged\":\"true\"},{\"name\":\"scriptPath\",\"value\":\"DFEGen/1.3\",\"valueChanged\":\"true\"}],\"isFile\":true,\"fileContent\":\"var event, obj, nodeData;\\n  // Uncomment the next line to start debugging\\n  //debugger;\\n//console.log( 'NodeData Info: '+JSON.stringify( nodeData ) );\\n//console.log( 'Button Label: '+obj.data.name );\\n//console.log( 'Button Status: '+obj.data.checked );\\n\\nlet script = '';\\nlet params = '';\\nconst scriptPath = getProperty( 'scriptPath' );\\n//const g = getMainGraph();\\nlet onLoaded = function(){};\\n\\nswitch( obj.data.name ) {\\n  case 'Deploy':\\n    const modelFileURL = getMainGraphURL();\\n    const deployKey = nodeData.key;\\n    \\n    script = `generateSystemLib.js`;\\n    params = `modelFileURL=${modelFileURL}&deployKey=${deployKey}`;\\n    onLoaded = function( msg ) {\\n      setNodeDataField( nodeData, 'label', 'System Status: [DEPLOYED]\\\\n'+msg );\\n    }\\n    break;\\n  case 'Start':\\n    script = 'serverManager';\\n    params = 'start '+scriptPath;\\n    setNodeDataField( nodeData, 'label', 'System Status: [STARTED]' );\\n    break;\\n  case 'Stop':\\n    script = 'serverManager';\\n    params = 'stop '+scriptPath;\\n    setNodeDataField( nodeData, 'label', 'System Status: [STOPPED]' );\\n    break;\\n}\\n\\nif( script ) {\\n  const cmd = `${script}${( params? '?'+params: '')}`;\\n  executeScript( cmd, onLoaded );\\n}\\n\\nfunction getProperty( name ) {\\n  let result = '';\\n  if( nodeData.props_ ) {\\n    nodeData.props_.find( (p)=> { if( p.name == name ) { result = p.value; return( true ) } } );\\n  }\\n  return( result );\\n}\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":80,\"location\":\"4000 2110\",\"editorPosition\":[3132,1920,758,959]},\n{\"label\":\"This is the generated target program\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"391 58\",\"key\":82,\"location\":\"3440 2190\"},\n{\"label\":\"Releases & Features\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":81,\"location\":\"3440 1880\"},\n{\"label\":\"DFEGenerator 1.3\",\"category\":\"CodeFlow_FeatureOnOff\",\"size\":\"338 40\",\"color\":\"green\",\"buttons_\":[{\"name\":\"\",\"checked\":true,\"color\":\"RebeccaPurple\"}],\"key\":83,\"location\":\"3460 1880\",\"group\":81},\n{\"label\":\"DummyEnable\",\"category\":\"CodeFlow_Feature\",\"size\":\"180 40\",\"color\":\"green\",\"buttons_\":[{\"name\":\"\",\"checked\":true,\"color\":\"RebeccaPurple\"}],\"key\":84,\"location\":\"3860 1880\",\"group\":81},\n{\"label\":\"Dummy Enabled Component\",\"category\":\"CodeFlow_Code\",\"size\":\"180 100\",\"color\":\"orange\",\"props_\":[],\"in_\":[],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":86,\"location\":\"3010 1907.5000000000002\",\"group\":87},\n{\"label\":\"DummyEnable\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":87,\"location\":\"2990 1910.0000000000002\",\"color\":\"green\"},\n{\"label\":\"Equation Solver Model (Python)\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":85,\"location\":\"-7160 3084.799498666821\"},\n{\"label\":\"Equation Parser\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"def compute(self, name, value):\\n    if name == 'in':\\n        # Build the AST tree (recursive function)\\n        out_value = build_AST(value)\\n        self.fire_output('out', out_value)\\n\\n    def build_AST(token_list):\\n        if len(token_list) == 0:\\n            return None\\n        elif len(token_list) == 1:\\n            return token_list[0]\\n\\n        # Find the index of the lowest precedence operator\\n        index = -1\\n        min_precedence = float('inf')\\n        parenthesis = 0\\n        # Loop over all token_list\\n        for i in range(len(token_list)):\\n            if token_list[i] == '(':\\n                parenthesis += 1\\n            elif token_list[i] == ')':\\n                parenthesis -= 1\\n            elif parenthesis == 0:\\n                # Compute precedences\\n                operator = token_list[i]\\n                precedence = 0\\n                if operator in ('+', '-'):\\n                    precedence = 1\\n                elif operator in ('*', '/'):\\n                    precedence = 2\\n                else:\\n                    precedence = float('inf')\\n\\n                if precedence <= min_precedence:\\n                    min_precedence = precedence\\n                    index = i\\n\\n        # Handle subexpressions inside parentheses\\n        if index == -1:\\n            return build_AST(token_list[1:-1])\\n\\n        result = [\\n            token_list[index],\\n            build_AST(token_list[:index]),\\n            build_AST(token_list[index + 1:])\\n        ]\\n        return result\",\"fileTypeName\":\"EquationParser\",\"fileType\":\"text/python\",\"iconURL\":\"\",\"key\":88,\"location\":\"-5080.000237428416 3197.957701791821\",\"editorPosition\":[1964,1907,466,193],\"group\":85},\n{\"label\":\"Equation Tokenizer\",\"category\":\"DataFlow_Component\",\"size\":\"255 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"def compute(self, name, value):\\n    if name == 'in':\\n        # Tokenize the input equation\\n        regex = r'\\\\d+(\\\\.\\\\d+)?|[\\\\+\\\\-\\\\*\\\\/\\\\(\\\\)]|[=a-zA-Z]'\\n        token_list = []\\n        if value:\\n            token_list = [float(token) if token.isdigit() or (token[0] == '-' and token[1:].isdigit()) else token\\n                          for token in re.findall(regex, value)]\\n        self.fire_output('out', token_list)\\n\",\"fileTypeName\":\"Component\",\"fileType\":\"text/python\",\"iconURL\":\"\",\"key\":89,\"location\":\"-6170.000237428416 3107.957701791821\",\"group\":85,\"editorPosition\":[-4464,1910,494,263]},\n{\"label\":\"Equation Compute\",\"category\":\"DataFlow_Component\",\"size\":\"254 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"},{\"portId\":\"2in\",\"name\":\"variables\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"},{\"portId\":\"2out\",\"name\":\"status\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"def compute(self, name, value):\\n    if name == 'in':\\n        out_value = float('nan')\\n        out_status = 'Done'\\n        try:\\n            if value is None:\\n                out_value = ''\\n            else:\\n                out_value = evaluate_AST(value)\\n        except Exception as e:\\n            out_status = f'Syntax error in expression: {e}'\\n\\n        self.fire_output('out', out_value)\\n        self.fire_output('status', out_status)\\n\\n    def evaluate_AST(ast):\\n        if re.match(r'^[a-z]', ast, re.IGNORECASE):\\n            return ast\\n        elif isinstance(ast, (int, float)):\\n            # Base case: if the node is a number, return it.\\n            return ast\\n\\n        # Recursive case: evaluate the left and right operands.\\n        left = evaluate_AST(ast[1])\\n        right = evaluate_AST(ast[2])\\n\\n        # Compute the result based on the operator.\\n        operator = ast[0]\\n        if operator == '+':\\n            return left + right\\n        elif operator == '-':\\n            return left - right\\n        elif operator == '*':\\n            return left * right\\n        elif operator == '/':\\n            return left / right\\n        else:\\n            raise ValueError('Unknown operator: ' + operator)\",\"fileTypeName\":\"EquationCompute\",\"fileType\":\"text/python\",\"iconURL\":\"\",\"key\":90,\"location\":\"-4520.000237428416 3217.957701791821\",\"group\":85,\"editorPosition\":[2441,1906,560,417]},\n{\"label\":\"Equation Split\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"lEq\"},{\"portId\":\"2out\",\"name\":\"rEq\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"def compute(self, name, value):\\n    if name == 'in':\\n        i = value.find('=')\\n        if i == -1:\\n            i = len(value)\\n\\n        l_eq = value[:i]\\n        r_eq = value[i + 1:]\\n\\n        self.fire_output('lEq', l_eq)\\n        self.fire_output('rEq', r_eq)\",\"fileTypeName\":\"Component\",\"fileType\":\"text/python\",\"iconURL\":\"\",\"key\":91,\"location\":\"-5620.000237428416 3107.957701791821\",\"group\":85},\n{\"label\":\"Equation Parser\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"def compute(self, name, value):\\n    if name == 'in':\\n        # Build the AST tree (recursive function)\\n        out_value = build_AST(value)\\n        self.fire_output('out', out_value)\\n\\n    def build_AST(token_list):\\n        if len(token_list) == 0:\\n            return None\\n        elif len(token_list) == 1:\\n            return token_list[0]\\n\\n        # Find the index of the lowest precedence operator\\n        index = -1\\n        min_precedence = float('inf')\\n        parenthesis = 0\\n        # Loop over all token_list\\n        for i in range(len(token_list)):\\n            if token_list[i] == '(':\\n                parenthesis += 1\\n            elif token_list[i] == ')':\\n                parenthesis -= 1\\n            elif parenthesis == 0:\\n                # Compute precedences\\n                operator = token_list[i]\\n                precedence = 0\\n                if operator in ('+', '-'):\\n                    precedence = 1\\n                elif operator in ('*', '/'):\\n                    precedence = 2\\n                else:\\n                    precedence = float('inf')\\n\\n                if precedence <= min_precedence:\\n                    min_precedence = precedence\\n                    index = i\\n\\n        # Handle subexpressions inside parentheses\\n        if index == -1:\\n            return build_AST(token_list[1:-1])\\n\\n        result = [\\n            token_list[index],\\n            build_AST(token_list[:index]),\\n            build_AST(token_list[index + 1:])\\n        ]\\n        return result\",\"fileTypeName\":\"EquationParser\",\"fileType\":\"text/python\",\"iconURL\":\"\",\"key\":92,\"location\":\"-5060.000237428416 2947.957701791821\",\"editorPosition\":[1270,1836,523,943],\"group\":85},\n{\"label\":\"Equation Compute\",\"category\":\"DataFlow_Component\",\"size\":\"253 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"},{\"portId\":\"2in\",\"name\":\"variables\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"},{\"portId\":\"2out\",\"name\":\"status\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"\\nvar nodeData, name, value;\\n\\nif( name == 'in' ) {\\n  let outValue = NaN;\\n  let outStatus = 'Done';\\n  try {\\n    if( value == null ) {\\n      outValue = '';\\n    } else {\\n      const variables = graphData.dfe.getInput( nodeData, 'variables', '' );\\n      const variableValues = getVariableValues( variables );\\n\\n      outValue = evaluateAST( value, variableValues );\\n    }\\n  } catch( e ) {\\n    outStatus = `Syntax error in expression: ${e}`;\\n  }\\n  \\n  graphData.dfe.fireOutput( nodeData, 'out', outValue );\\n  graphData.dfe.fireOutput( nodeData, 'status', outStatus );\\n}\",\"fileTypeName\":\"EquationCompute\",\"fileType\":\"text/python\",\"iconURL\":\"\",\"key\":93,\"location\":\"-4520.000237428416 2957.957701791821\",\"group\":85},\n{\"label\":\"Equation Compare\",\"category\":\"DataFlow_Component\",\"size\":\"249 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"},{\"portId\":\"2out\",\"name\":\"variable\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"\",\"valueChanged\":true}],\"isFile\":true,\"fileContent\":\"def compute(self, name, value):\\n    if name == 'in':\\n        out_value = ''\\n        if value['lStatus'] == 'Done' and value['rStatus'] == 'Done':\\n            if value['lValue'] == '' or value['rValue'] == '':\\n                out_value = value['lValue'] or value['rValue']\\n            elif is_variable(value['lValue']):\\n                out_value = f'{value[\\\"lValue\\\"]} = {value[\\\"rValue\\\"]}'\\n            elif is_variable(value['rValue']):\\n                out_value = f'{value[\\\"rValue\\\"]} = {value[\\\"lValue\\\"]}'\\n            else:\\n                out_value = str(value['lValue'] == value['rValue'])\\n        else:\\n            out_value = value['lStatus'] if value['lStatus'] == 'Done' else value['rStatus']\\n\\n        self.fire_output('out', out_value)\\n\\n    def is_variable(s):\\n        return re.match(r'^[a-z]', s, re.IGNORECASE)\",\"fileTypeName\":\"Component\",\"fileType\":\"text/python\",\"iconURL\":\"\",\"key\":94,\"location\":\"-3620.000237428416 3127.957701791821\",\"group\":85,\"editorPosition\":[3690,1891,610,424]},\n{\"label\":\"var = 33\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"364 72\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":95,\"location\":\"-3200.000237428416 3107.957701791821\",\"group\":85},\n{\"label\":\"Log Result\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"*\"}],\"isFile\":true,\"fileContent\":\"def compute_component_45(self, name, value):\\n    print(value)\\n\",\"fileTypeName\":\"Component\",\"fileType\":\"text/python\",\"iconURL\":\"\",\"key\":98,\"location\":\"-3200.000237428416 3217.957701791821\",\"group\":85},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":99,\"location\":\"-4090.000721803416 2837.95770179182\",\"group\":85},\n{\"label\":\"var\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"247 68\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":100,\"location\":\"-4036.207237428416 2803.6157017918204\",\"group\":99},\n{\"label\":\"Done\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"617 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":101,\"location\":\"-4038.104237428416 2876.2997017918196\",\"group\":99},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":102,\"location\":\"-4770.000721803416 2597.957701791821\",\"group\":85},\n{\"label\":\"var\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"125 511\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":103,\"location\":\"-4718.104237428416 2597.957701791821\",\"font\":\"17px sans-serif\",\"labelFont\":\"17px sans-serif\",\"group\":102},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":104,\"location\":\"-5320.000721803416 2737.957701791821\",\"group\":85},\n{\"label\":\"[\\n  \\\"var\\\"\\n]\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"114 352\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":105,\"location\":\"-5268.104237428416 2737.957701791821\",\"font\":\"17px sans-serif\",\"labelFont\":\"17px sans-serif\",\"group\":104},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":106,\"location\":\"-5850.000721803416 3467.957701791821\",\"group\":85},\n{\"label\":\"[\\n  \\\"var\\\",\\n  \\\"=\\\",\\n  3,\\n  \\\"*\\\",\\n  5,\\n  \\\"+\\\",\\n  \\\"alpha\\\",\\n  \\\"+\\\",\\n  \\\"factor\\\"\\n]\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"114 451\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":107,\"location\":\"-5798.104237428416 3467.957701791821\",\"font\":\"17px sans-serif\",\"labelFont\":\"17px sans-serif\",\"group\":106},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":108,\"location\":\"-5320.000721803416 3437.957701791821\",\"group\":85},\n{\"label\":\"[\\n  3,\\n  \\\"*\\\",\\n  5,\\n  \\\"+\\\",\\n  \\\"alpha\\\",\\n  \\\"+\\\",\\n  \\\"factor\\\"\\n]\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"114 293\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":109,\"location\":\"-5268.104237428416 3437.957701791821\",\"font\":\"17px sans-serif\",\"labelFont\":\"17px sans-serif\",\"group\":108},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":110,\"location\":\"-4750.000721803416 3617.957701791821\",\"group\":85},\n{\"label\":\"[\\n  \\\"+\\\",\\n  [\\n    \\\"+\\\",\\n    [\\n      \\\"*\\\",\\n      3,\\n      5\\n    ],\\n    \\\"alpha\\\"\\n  ],\\n  \\\"factor\\\"\\n]\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"125 511\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":111,\"location\":\"-4698.104237428416 3617.957701791821\",\"font\":\"17px sans-serif\",\"labelFont\":\"17px sans-serif\",\"group\":110},\n{\"label\":\"Log\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":112,\"location\":\"-4090.000721803416 3407.95770179182\",\"group\":85},\n{\"label\":\"33\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"247 64\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":113,\"location\":\"-4036.207237428416 3373.6157017918204\",\"group\":112},\n{\"label\":\"Done\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"617 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":114,\"location\":\"-4038.104237428416 3444.2997017918196\",\"group\":112},\n{\"label\":\"Barrier\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"color\":\"LightSeaGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"lValue\"},{\"portId\":\"2in\",\"name\":\"lStatus\"},{\"portId\":\"3in\",\"name\":\"rValue\"},{\"portId\":\"4in\",\"name\":\"rStatus\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"def compute(self, name, value):\\n    default_input_stat = {\\n        'lValue': False,\\n        'lStatus': False,\\n        'rValue': False,\\n        'rStatus': False,\\n    }\\n    input_stat = self.get('inputStat', default_input_stat)\\n\\n    input_stat[name] = True\\n    is_object_ready = all(input_stat.values())\\n\\n    if is_object_ready:\\n        out_value = {}\\n        for in_name in input_stat:\\n            input_stat[in_name] = False\\n            out_value[in_name] = self.get_input(in_name, None)\\n        self.fire_input('out', out_value)\\n\",\"fileTypeName\":\"MakeObject\",\"fileType\":\"text/python\",\"iconURL\":\"\",\"key\":115,\"location\":\"-3990.000237428416 3127.957701791821\",\"group\":85,\"editorPosition\":[2146,2191,674,512]},\n{\"label\":\"2) The different components show examples of the component model usage. The code can be seen by clicking on the component's context menu and selecting \\\"Open File\\\"\",\"category\":\"TextLabels_Size2\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"698 145\",\"key\":117,\"location\":\"-6120.000237428416 2967.957701791821\",\"group\":85},\n{\"label\":\"NOTE: Log components are linked with a log link and are inserted into a group. These 2 choices make sure that such components are not included in the code-generation phase\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"613 145\",\"key\":118,\"location\":\"-3190.000237428416 2397.957701791821\",\"group\":85},\n{\"label\":\"89\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":121,\"location\":\"-6200 3060\",\"group\":85},\n{\"label\":\"91\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"45 35\",\"key\":122,\"location\":\"-5660 3070\",\"group\":85},\n{\"label\":\"92\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"49 35\",\"key\":123,\"location\":\"-5090 2910\",\"group\":85},\n{\"label\":\"88\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"46 35\",\"key\":124,\"location\":\"-5122.000237428416 3149.99970179182\",\"group\":85},\n{\"label\":\"93\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"44 35\",\"key\":125,\"location\":\"-4560.000237428416 2907.9577017918205\",\"group\":85},\n{\"label\":\"90\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"47 35\",\"key\":126,\"location\":\"-4563.000237428416 3167.9577017918205\",\"group\":85},\n{\"label\":\"115\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"45 35\",\"key\":127,\"location\":\"-4031.000237428416 3067.9577017918205\",\"group\":85},\n{\"label\":\"94\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"42 35\",\"key\":128,\"location\":\"-3660.000237428416 3079.9997017918204\",\"group\":85},\n{\"label\":\"98\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":129,\"location\":\"-3244.000237428416 3169.99970179182\",\"group\":85},\n{\"label\":\"95\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":138,\"location\":\"-3234.000237428416 3057.9577017918205\",\"group\":85},\n{\"label\":\"3) The system can be executed by pressing the start buttons\",\"category\":\"TextLabels_Size2\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"501 102\",\"key\":145,\"location\":\"-7050 2840\",\"group\":85},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":146,\"location\":\"-7070 2960\",\"group\":85},\n{\"label\":\"2+3*5-(2+20*0.5)+1\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"569 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":147,\"location\":\"-6860 2959.9\",\"group\":85},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":148,\"location\":\"-7070 3280\",\"group\":85},\n{\"label\":\"y=3*5+10\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"569 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":149,\"location\":\"-6860 3279.9\",\"group\":85},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":150,\"location\":\"-7070 3200\",\"group\":85},\n{\"label\":\"2+3*5-(2+20*0.5)+1=10-1\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"569 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":151,\"location\":\"-6860 3199.9\",\"group\":85},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":152,\"location\":\"-7070 3120\",\"group\":85},\n{\"label\":\"2+3*5-(2+20*0.5)+1=10-4\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"569 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":153,\"location\":\"-6860 3119.9\",\"group\":85},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":154,\"location\":\"-7070 3040\",\"group\":85},\n{\"label\":\"2+3*5-(2+20*0.5)+1=z\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"569 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":155,\"location\":\"-6860 3039.9\",\"group\":85},\n{\"label\":\"147\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":157,\"location\":\"-6900 2900\"},\n{\"label\":\"155\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":159,\"location\":\"-6910 2990\"},\n{\"label\":\"153\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":161,\"location\":\"-6910 3070\"},\n{\"label\":\"151\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":163,\"location\":\"-6910 3160\"},\n{\"label\":\"149\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":165,\"location\":\"-6910 3240\"},\n{\"label\":\"148\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":171,\"location\":\"-7130 3260\",\"group\":85},\n{\"label\":\"150\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":172,\"location\":\"-7130 3180\",\"group\":85},\n{\"label\":\"152\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":173,\"location\":\"-7130 3090\",\"group\":85},\n{\"label\":\"154\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":174,\"location\":\"-7130 3010\",\"group\":85},\n{\"label\":\"146\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":175,\"location\":\"-7120 2920\",\"group\":85},\n{\"label\":\"85\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"48 35\",\"key\":177,\"location\":\"-7170 2190\"},\n{\"label\":\"\",\"category\":\"Pictures_Basic\",\"size\":\"1462 865\",\"isFile\":true,\"fileTypeName\":\"Image\",\"fileType\":\"image/png\",\"fileURL\":\"/fileServer/pictures/Test DataFlow & Code Generation-py-0.png\",\"key\":179,\"location\":\"7410 2590\"}\n],\n  \"linkDataArray\": [\n{\"category\":\"DataFlow_Standard\",\"from\":7,\"to\":15,\"points\":[-1580.5380859375,2846.316,-1570.5380859375,2846.316,-1531.896484375,2956.316,-1521.896484375,2956.316],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-1},\n{\"category\":\"DataFlow_Log\",\"from\":9,\"to\":11,\"points\":[-99.5380859375,3046.316,-89.5380859375,3046.316,-60,3423.158,-50,3423.158],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-2},\n{\"category\":\"DataFlow_Standard\",\"from\":13,\"to\":7,\"points\":[-2279.5380859375,2846.316,-2269.5380859375,2846.316,-2231.896484375,2846.316,-2221.896484375,2846.316],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-3},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":15,\"to\":18,\"points\":[-1194.5380859375,2956.316,-1184.5380859375,2956.316,-981.896484375,2955.916,-971.896484375,2955.916],\"key\":-4},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":15,\"to\":17,\"points\":[-1194.5380859375,2956.316,-1184.5380859375,2956.316,-1160,3310,-1150,3310],\"key\":-5},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":9,\"to\":19,\"points\":[-99.5380859375,3046.316,-89.5380859375,3046.316,118.103515625,3046.016,128.103515625,3046.016],\"key\":-6},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":19,\"to\":21,\"points\":[472.3515625,3036.016,482.3515625,3036.016,600,3219.316,610,3219.316],\"key\":-7},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":19,\"to\":23,\"points\":[472.3515625,3056.016,482.3515625,3056.016,598.103515625,3290,608.103515625,3290],\"key\":-8},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":26,\"to\":27,\"points\":[-99.5380859375,2886.316,-89.5380859375,2886.316,118.103515625,2885.8160000000003,128.103515625,2885.8160000000003],\"key\":-10},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":27,\"to\":28,\"points\":[471.3515625,2875.8160000000003,481.3515625,2875.8160000000003,600,2737.316,610,2737.316],\"key\":-11},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":27,\"to\":29,\"points\":[471.3515625,2895.8160000000003,481.3515625,2895.8160000000003,598.103515625,2810,608.103515625,2810],\"key\":-12},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":26,\"to\":31,\"points\":[-99.5380859375,2886.316,-89.5380859375,2886.316,-80,2583.158,-70,2583.158],\"key\":-14},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":18,\"to\":33,\"points\":[-657.2138671875,2945.916,-647.2138671875,2945.916,-631.896484375,2681.316,-621.896484375,2681.316],\"key\":-15},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":18,\"to\":35,\"points\":[-657.2138671875,2965.916,-647.2138671875,2965.916,-630,3281.316,-620,3281.316],\"key\":-16},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":27,\"to\":58,\"points\":[471.3515625,2875.8160000000003,481.3515625,2875.8160000000003,614.6484375,2943.058,624.6484375,2943.058],\"key\":-17},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"2in\",\"from\":27,\"to\":58,\"points\":[471.3515625,2895.8160000000003,481.3515625,2895.8160000000003,614.6484375,2963.058,624.6484375,2963.058],\"key\":-18},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"3in\",\"from\":19,\"to\":58,\"points\":[472.3515625,3036.016,482.3515625,3036.016,614.6484375,2983.058,624.6484375,2983.058],\"key\":-19},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"4in\",\"from\":19,\"to\":58,\"points\":[472.3515625,3056.016,482.3515625,3056.016,614.6484375,3003.058,624.6484375,3003.058],\"key\":-20},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":18,\"to\":9,\"points\":[-657.2138671875,2965.916,-647.2138671875,2965.916,-421.896484375,3046.316,-411.896484375,3046.316],\"key\":-21},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":18,\"to\":26,\"points\":[-657.2138671875,2945.916,-647.2138671875,2945.916,-421.896484375,2886.316,-411.896484375,2886.316],\"key\":-22},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":25,\"to\":34,\"points\":[1349.4619140625,2973.158,1359.4619140625,2973.158,1408.103515625,2967.158,1418.103515625,2967.158],\"key\":-23},\n{\"category\":\"DataFlow_Standard\",\"from\":39,\"to\":38,\"points\":[-2279.5380859375,2926.316,-2269.5380859375,2926.316,-2231.896484375,2926.216,-2221.896484375,2926.216],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-24},\n{\"category\":\"DataFlow_Standard\",\"from\":43,\"to\":42,\"points\":[-2279.5380859375,3006.316,-2269.5380859375,3006.316,-2231.896484375,3006.216,-2221.896484375,3006.216],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-25},\n{\"category\":\"DataFlow_Standard\",\"from\":47,\"to\":46,\"points\":[-2279.5380859375,3086.316,-2269.5380859375,3086.316,-2231.896484375,3086.316,-2221.896484375,3086.316],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-26},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":38,\"to\":15,\"points\":[-1580.5380859375,2926.216,-1570.5380859375,2926.216,-1531.896484375,2956.316,-1521.896484375,2956.316],\"key\":-27},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":42,\"to\":15,\"points\":[-1580.5380859375,3006.216,-1570.5380859375,3006.216,-1531.896484375,2956.316,-1521.896484375,2956.316],\"key\":-28},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":46,\"to\":15,\"points\":[-1580.5380859375,3086.316,-1570.5380859375,3086.316,-1531.896484375,2956.316,-1521.896484375,2956.316],\"key\":-29},\n{\"category\":\"DataFlow_Standard\",\"from\":51,\"to\":50,\"points\":[-2279.5380859375,2766.316,-2269.5380859375,2766.316,-2231.896484375,2766.316,-2221.896484375,2766.316],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-30},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":50,\"to\":15,\"points\":[-1580.5380859375,2766.316,-1570.5380859375,2766.316,-1531.896484375,2956.316,-1521.896484375,2956.316],\"key\":-31},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"\",\"toPort\":\"\",\"from\":37,\"to\":36,\"points\":[1820,2219.7540913196653,1753.5,2219.6747081777125],\"key\":-32,\"color\":\"YellowGreen\"},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"\",\"toPort\":\"\",\"from\":37,\"to\":44,\"points\":[2232,2220,3110,2220],\"key\":-33,\"color\":\"YellowGreen\"},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"label\":\"log\",\"from\":25,\"to\":45,\"points\":[1349.4619140625,2973.158,1359.4619140625,2973.158,1408.103515625,3073.158,1418.103515625,3073.158],\"key\":-34},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":58,\"to\":25,\"points\":[970.4619140625,2973.058,980.4619140625,2973.058,1018.103515625,2973.158,1028.103515625,2973.158],\"key\":-35},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"\",\"toPort\":\"\",\"from\":80,\"to\":78,\"points\":[4000,2110.2161295465767,3871.5,2110.3585533759874],\"key\":-36,\"color\":\"YellowGreen\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"Feature\",\"toPort\":\"Feature\",\"from\":83,\"to\":84,\"points\":[3798,1880,3850,1880,3860,1880],\"key\":-37,\"color\":\"RebeccaPurple\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"1out\",\"toPort\":\"\",\"from\":86,\"to\":44,\"points\":[3230.4619140625,1907.5000000000002,3240.4619140625,1907.5000000000002,3218.8923580741703,2157.5005345577338],\"key\":-38,\"color\":\"orange\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"1out\",\"toPort\":\"\",\"from\":86,\"to\":62,\"points\":[3230.4619140625,1907.5000000000002,3240.4619140625,1907.5000000000002,3224.5460899631817,2317.500052039712],\"key\":-39,\"color\":\"orange\"},\n{\"category\":\"DataFlow_Log\",\"from\":88,\"to\":111,\"points\":[-4799.538323365916,3197.957701791821,-4789.538323365916,3197.957701791821,-4750.000721803416,3607.957701791821,-4740.000721803416,3607.957701791821],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-40},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":89,\"to\":107,\"points\":[-5874.538323365916,3107.957701791821,-5864.538323365916,3107.957701791821,-5850.000721803416,3457.957701791821,-5840.000721803416,3457.957701791821],\"key\":-41},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":88,\"to\":90,\"points\":[-4799.538323365916,3197.957701791821,-4789.538323365916,3197.957701791821,-4607.027581178416,3207.957701791821,-4597.027581178416,3207.957701791821],\"key\":-42},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":90,\"to\":113,\"points\":[-4207.648674928416,3207.957701791821,-4197.648674928416,3207.957701791821,-4088.103721803416,3363.6157017918204,-4078.103721803416,3363.6157017918204],\"key\":-43},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":90,\"to\":114,\"points\":[-4207.648674928416,3227.957701791821,-4197.648674928416,3227.957701791821,-4090.000721803416,3434.2997017918196,-4080.000721803416,3434.2997017918196],\"key\":-44},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":92,\"to\":93,\"points\":[-4779.538323365916,2947.957701791821,-4769.538323365916,2947.957701791821,-4607.027581178416,2947.957701791821,-4597.027581178416,2947.957701791821],\"key\":-45},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":93,\"to\":100,\"points\":[-4208.648674928416,2947.957701791821,-4198.648674928416,2947.957701791821,-4088.103721803416,2793.6157017918204,-4078.103721803416,2793.6157017918204],\"key\":-46},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":93,\"to\":101,\"points\":[-4208.648674928416,2967.957701791821,-4198.648674928416,2967.957701791821,-4090.000721803416,2866.2997017918196,-4080.000721803416,2866.2997017918196],\"key\":-47},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":92,\"to\":103,\"points\":[-4779.538323365916,2947.957701791821,-4769.538323365916,2947.957701791821,-4770.000721803416,2587.957701791821,-4760.000721803416,2587.957701791821],\"key\":-48},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":91,\"to\":105,\"points\":[-5337.214104615916,3097.957701791821,-5327.214104615916,3097.957701791821,-5320.000721803416,2727.957701791821,-5310.000721803416,2727.957701791821],\"key\":-49},\n{\"category\":\"DataFlow_Log\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":91,\"to\":109,\"points\":[-5337.214104615916,3117.957701791821,-5327.214104615916,3117.957701791821,-5320.000721803416,3427.957701791821,-5310.000721803416,3427.957701791821],\"key\":-50},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":93,\"to\":115,\"points\":[-4208.648674928416,2947.957701791821,-4198.648674928416,2947.957701791821,-4065.351799928416,3097.957701791821,-4055.351799928416,3097.957701791821],\"key\":-51},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"2in\",\"from\":93,\"to\":115,\"points\":[-4208.648674928416,2967.957701791821,-4198.648674928416,2967.957701791821,-4065.351799928416,3117.957701791821,-4055.351799928416,3117.957701791821],\"key\":-52},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"3in\",\"from\":90,\"to\":115,\"points\":[-4207.648674928416,3207.957701791821,-4197.648674928416,3207.957701791821,-4065.351799928416,3137.957701791821,-4055.351799928416,3137.957701791821],\"key\":-53},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"4in\",\"from\":90,\"to\":115,\"points\":[-4207.648674928416,3227.957701791821,-4197.648674928416,3227.957701791821,-4065.351799928416,3157.957701791821,-4055.351799928416,3157.957701791821],\"key\":-54},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":91,\"to\":88,\"points\":[-5337.214104615916,3117.957701791821,-5327.214104615916,3117.957701791821,-5121.896721803416,3197.957701791821,-5111.896721803416,3197.957701791821],\"key\":-55},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":91,\"to\":92,\"points\":[-5337.214104615916,3097.957701791821,-5327.214104615916,3097.957701791821,-5101.896721803416,2947.957701791821,-5091.896721803416,2947.957701791821],\"key\":-56},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":94,\"to\":95,\"points\":[-3300.972893678416,3117.957701791821,-3290.972893678416,3117.957701791821,-3251.896721803416,3097.957701791821,-3241.896721803416,3097.957701791821],\"key\":-57},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"label\":\"log\",\"from\":94,\"to\":98,\"points\":[-3300.972893678416,3117.957701791821,-3290.972893678416,3117.957701791821,-3241.896721803416,3217.957701791821,-3231.896721803416,3217.957701791821],\"key\":-59},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":115,\"to\":94,\"points\":[-3709.538323365916,3127.957701791821,-3699.538323365916,3127.957701791821,-3661.896721803416,3127.957701791821,-3651.896721803416,3127.957701791821],\"key\":-60},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":89,\"to\":91,\"points\":[-5874.538323365916,3107.957701791821,-5864.538323365916,3107.957701791821,-5661.896721803416,3107.957701791821,-5651.896721803416,3107.957701791821],\"key\":-61},\n{\"category\":\"DataFlow_Standard\",\"from\":146,\"to\":147,\"points\":[-6959.5380859375,2950,-6949.5380859375,2950,-6911.896484375,2949.9,-6901.896484375,2949.9],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-63},\n{\"category\":\"DataFlow_Standard\",\"from\":148,\"to\":149,\"points\":[-6959.5380859375,3270,-6949.5380859375,3270,-6911.896484375,3269.9,-6901.896484375,3269.9],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-67},\n{\"category\":\"DataFlow_Standard\",\"from\":150,\"to\":151,\"points\":[-6959.5380859375,3190,-6949.5380859375,3190,-6911.896484375,3189.9,-6901.896484375,3189.9],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-68},\n{\"category\":\"DataFlow_Standard\",\"from\":152,\"to\":153,\"points\":[-6959.5380859375,3110,-6949.5380859375,3110,-6911.896484375,3109.9,-6901.896484375,3109.9],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-69},\n{\"category\":\"DataFlow_Standard\",\"from\":154,\"to\":155,\"points\":[-6959.5380859375,3030,-6949.5380859375,3030,-6911.896484375,3029.9,-6901.896484375,3029.9],\"fromPort\":\"1out\",\"toPort\":\"1in\",\"key\":-71},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":147,\"to\":89,\"points\":[-6260.5380859375,2949.9,-6250.5380859375,2949.9,-6211.896721803416,3107.957701791821,-6201.896721803416,3107.957701791821],\"key\":-65},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":155,\"to\":89,\"points\":[-6260.5380859375,3029.9,-6250.5380859375,3029.9,-6212.896721803416,3107.957701791821,-6211.896721803416,3107.957701791821,-6201.896721803416,3107.957701791821],\"key\":-66},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":153,\"to\":89,\"points\":[-6260.5380859375,3109.9,-6250.5380859375,3109.9,-6211.896721803416,3107.957701791821,-6201.896721803416,3107.957701791821],\"key\":-72},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":151,\"to\":89,\"points\":[-6260.5380859375,3189.9,-6250.5380859375,3189.9,-6211.896721803416,3107.957701791821,-6201.896721803416,3107.957701791821],\"key\":-73},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":149,\"to\":89,\"points\":[-6260.5380859375,3269.9,-6250.5380859375,3269.9,-6211.896721803416,3107.957701791821,-6201.896721803416,3107.957701791821],\"key\":-74}\n]}"
}