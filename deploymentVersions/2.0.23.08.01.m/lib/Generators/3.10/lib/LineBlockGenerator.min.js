var window;if(!window){const a="./";generatorsConfig=require(a+"/generatorsConfig.js")}class LineBlockGenerator{constructor(){this.template="",this.data={},this.output=[],this.conf={beginTag:"# Begin ",endTag:"# End ",insertTag:"# Insert "},generatorsConfig("",this.conf),this.property={language:"JavaScript"}}setLanguage(t){this.property.language=t,generatorsConfig(t,this.conf)}setTemplate(t){Array.isArray(t)?this.template=t:this.template=t.split("\n"),this.output=[]}getOutput(){return this.output}getOutputStr(){return this.output.join("\n")}process(t,e){this.data=t;let i=0;for(var n=this.template.length;i<n;){var s=this.template[i++],r=s.match(this.conf.blockLineExp);if(r&&r[1]){var r=r[1],a=this._getLineIndentation(s);if(r.startsWith(this.conf.beginTag)){var h=r.substring(this.conf.beginTag.length,r.length-1).trim();if(null!=this._getKeyValue(h,e))for(;i<n;){var o=this.template[i++].match(this.conf.blockLineExp);if(o&&o[1]){o=o[1];if(o.startsWith(this.conf.endTag))if(h==o.substring(this.conf.endTag.length,o.length-1).trim()){this._appendToOutput(h,a,e);break}}}else this.output.push(s)}else r.startsWith(this.conf.insertTag)?(r=r.substring(this.conf.insertTag.length,r.length-1).trim(),this._appendToOutput(r,a,e)):this.output.push(s)}else this.output.push(s)}}extractLineBlock(t,e,i,n){let s=0;var r=this.output.length,a=[];let h=!1;for(i&&a.push(i);s<r;){var o=this.output[s++].match(this.conf.blockLineExp);if(o&&o[1]){o=o[1];if(o.startsWith(this.conf.beginTag)){var g=o.substring(this.conf.beginTag.length,o.length-1).trim();if(g==t)for(;s<r;){var u=this.output[s++],l=u.match(this.conf.blockLineExp);if(l&&l[1]){l=l[1];if(l.startsWith(this.conf.endTag)&&g==l.substring(this.conf.endTag.length,l.length-1).trim()){h=!0;break}}a.push(u)}}}if(h)break}return n&&a.push(n),e&&this._reIndent(a,0),a}_appendToOutput(t,e,i){let n=this._getKeyValue(t,i);null!=n&&null!=n&&(Array.isArray(n)||(n="string"==typeof n?n.split("\n"):[String(n)]),this._reIndent(n,0),this._reIndent(n,e),this.output.push(...n))}_getKeyValue(t,e){return e?e(this.data,t):t in this.data?this.data[t]:void 0}_reIndent(e,t){var i=t-this._getIndent(e),n=0<i?" ".repeat(i):"";if(0!=i&&e)for(let t=0;t<e.length;++t)e[t].trim()&&(e[t]=0<i?n+e[t]:e[t].substring(-i))}_getIndent(e){let t=0,i=1/0;if(e){for(let t=0;t<e.length;++t){var n=e[t];if(n.trim()){n=this._getLineIndentation(n);if(n<i&&0==(i=n))break}}i!=1/0&&(t=i)}return t}_getLineIndentation(t){return t?t.search(/\S/):0}}window||(module.exports=LineBlockGenerator);