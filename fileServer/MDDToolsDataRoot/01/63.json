{
  "dslNameList": [
    "DefaultDSL",
    "HierarchyDSL",
    "ThinkingDSL",
    "TextLabelsDSL",
    "CodeFlowDSL",
    "ConnectorsDSL",
    "PicturesDSL",
    "TreeDSL",
    "KanbanDSL",
    "AIFlowDSL"
  ],
  "view": {
    "scale": 0.6380015211676622,
    "position": [
      1558.066611797688,
      -1603.268720786552
    ],
    "isGridOn": true
  },
  "model": "{ \"class\": \"GraphLinksModel\",\n  \"copiesArrays\": true,\n  \"copiesArrayObjects\": true,\n  \"copiesKey\": false,\n  \"linkKeyProperty\": \"key\",\n  \"linkFromPortIdProperty\": \"fromPort\",\n  \"linkToPortIdProperty\": \"toPort\",\n  \"nodeDataArray\": [\n{\"label\":\"Graph Info\",\"category\":\"Hierarchy_GraphInfo\",\"size\":\"180 80\",\"rows\":[{\"name\":\"Name\",\"value\":\"tbd\"},{\"name\":\"Version\",\"value\":\"1.0\"},{\"name\":\"Date\",\"value\":\"@getDate()\"},{\"name\":\"Path\",\"value\":\"./\"},{\"name\":\"Authors\",\"value\":\"Frankonello\"}],\"key\":0,\"location\":\"6120 -780\"},\n{\"label\":\"Model\",\"size\":\"180 60\",\"category\":\"Hierarchy_Model\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphModel$\",\"key\":2,\"location\":\"5900 -780\"},\n{\"label\":\"Selection\",\"size\":\"180 60\",\"category\":\"Hierarchy_Selection\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphSelection$\",\"key\":4,\"location\":\"5900 -690\"},\n{\"label\":\"Coloris Color Picker\",\"category\":\"TextLabels_Size5\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"1190 130\",\"key\":6,\"location\":\"6390 -730\"},\n{\"label\":\"App Demo Src\\n(Link)\",\"color\":\"lightsalmon\",\"size\":\"180 170\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<html>\\n  <head>\\n    <!--link rel=\\\"stylesheet\\\" href=\\\"coloris.min.css\\\" />\\n    <script src=\\\"coloris.min.js\\\"></script-->\\n    \\n    <style>\\n      /* This is the readable content of coloris.min.css */\\n      \\n      .clr-picker {\\n        display: none;\\n        flex-wrap: wrap;\\n        position: absolute;\\n        width: 200px;\\n        z-index: 1000;\\n        border-radius: 10px;\\n        background-color: #fff;\\n        justify-content: flex-end;\\n        direction: ltr;\\n        box-shadow: 0 0 5px rgba(0,0,0,.05), 0 5px 20px rgba(0,0,0,.1);\\n        -moz-user-select: none;\\n        -webkit-user-select: none;\\n        user-select: none;\\n      }\\n      \\n      .clr-picker.clr-open,\\n      .clr-picker[data-inline=\\\"true\\\"] {\\n        display: flex;\\n      }\\n      \\n      .clr-picker[data-inline=\\\"true\\\"] {\\n        position: relative;\\n      }\\n      \\n      .clr-gradient {\\n        position: relative;\\n        width: 100%;\\n        height: 100px;\\n        margin-bottom: 15px;\\n        border-radius: 3px 3px 0 0;\\n        background-image: linear-gradient(rgba(0,0,0,0), #000), linear-gradient(90deg, #fff, currentColor);\\n        cursor: pointer;\\n      }\\n      \\n      .clr-marker {\\n        position: absolute;\\n        width: 12px;\\n        height: 12px;\\n        margin: -6px 0 0 -6px;\\n        border: 1px solid #fff;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-webkit-slider-runnable-track {\\n        width: 100%;\\n        height: 16px;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-webkit-slider-thumb {\\n        width: 16px;\\n        height: 16px;\\n        -webkit-appearance: none;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-moz-range-track {\\n        width: 100%;\\n        height: 16px;\\n        border: 0;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-moz-range-thumb {\\n        width: 16px;\\n        height: 16px;\\n        border: 0;\\n      }\\n      \\n      .clr-hue {\\n        background-image: linear-gradient(to right, #f00 0%, #ff0 16.66%, #0f0 33.33%, #0ff 50%, #00f 66.66%, #f0f 83.33%, #f00 100%);\\n      }\\n      \\n      .clr-hue,\\n      .clr-alpha {\\n        position: relative;\\n        width: calc(100% - 40px);\\n        height: 8px;\\n        margin: 5px 20px;\\n        border-radius: 4px;\\n      }\\n      \\n      .clr-alpha span {\\n        display: block;\\n        height: 100%;\\n        width: 100%;\\n        border-radius: inherit;\\n        background-image: linear-gradient(90deg, rgba(0,0,0,0), currentColor);\\n      }\\n      \\n      .clr-hue input,\\n      .clr-alpha input {\\n        position: absolute;\\n        width: calc(100% + 32px);\\n        height: 16px;\\n        left: -16px;\\n        top: -4px;\\n        margin: 0;\\n        background-color: transparent;\\n        opacity: 0;\\n        cursor: pointer;\\n        appearance: none;\\n        -webkit-appearance: none;\\n      }\\n      \\n      .clr-hue div,\\n      .clr-alpha div {\\n        position: absolute;\\n        width: 16px;\\n        height: 16px;\\n        left: 0;\\n        top: 50%;\\n        margin-left: -8px;\\n        transform: translateY(-50%);\\n        border: 2px solid #fff;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n        box-shadow: 0 0 1px #888;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-alpha div:before {\\n        content: '';\\n        position: absolute;\\n        height: 100%;\\n        width: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n      }\\n      \\n      .clr-format {\\n        display: none;\\n        order: 1;\\n        width: calc(100% - 40px);\\n        margin: 0 20px 20px;\\n      }\\n      \\n      .clr-segmented {\\n        display: flex;\\n        position: relative;\\n        width: 100%;\\n        margin: 0;\\n        padding: 0;\\n        border: 1px solid #ddd;\\n        border-radius: 15px;\\n        box-sizing: border-box;\\n        color: #999;\\n        font-size: 12px;\\n      }\\n      \\n      .clr-segmented input,\\n      .clr-segmented legend {\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        left: 0;\\n        top: 0;\\n        opacity: 0;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-segmented label {\\n        flex-grow: 1;\\n        margin: 0;\\n        padding: 4px 0;\\n        font-size: inherit;\\n        font-weight: normal;\\n        line-height: initial;\\n        text-align: center;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-segmented label:first-of-type {\\n        border-radius: 10px 0 0 10px;\\n      }\\n      \\n      .clr-segmented label:last-of-type {\\n        border-radius: 0 10px 10px 0;\\n      }\\n      \\n      .clr-segmented input:checked + label {\\n        color: #fff;\\n        background-color: #666;\\n      }\\n      \\n      .clr-swatches {\\n        order: 2;\\n        width: calc(100% - 32px);\\n        margin: 0 16px;\\n      }\\n      \\n      .clr-swatches div {\\n        display: flex;\\n        flex-wrap: wrap;\\n        padding-bottom: 12px;\\n        justify-content: center;\\n      }\\n      \\n      .clr-swatches button {\\n        position: relative;\\n        width: 20px;\\n        height: 20px;\\n        margin: 0 4px 6px 4px;\\n        padding: 0;\\n        border: 0;\\n        border-radius: 50%;\\n        color: inherit;\\n        text-indent: -1000px;\\n        white-space: nowrap;\\n        overflow: hidden;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-swatches button:after {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: inherit;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);\\n      }\\n      \\n      input.clr-color {\\n        order: 1;\\n        width: calc(100% - 80px);\\n        height: 32px;\\n        margin: 15px 20px 20px auto;\\n        padding: 0 10px;\\n        border: 1px solid #ddd;\\n        border-radius: 16px;\\n        color: #444;\\n        background-color: #fff;\\n        font-family: sans-serif;\\n        font-size: 14px;\\n        text-align: center;\\n        box-shadow: none;\\n      }\\n      \\n      input.clr-color:focus {\\n        outline: none;\\n        border: 1px solid #1e90ff;\\n      }\\n      \\n      .clr-close,\\n      .clr-clear {\\n        display: none;\\n        order: 2;\\n        height: 24px;\\n        margin: 0 20px 20px;\\n        padding: 0 20px;\\n        border: 0;\\n        border-radius: 12px;\\n        color: #fff;\\n        background-color: #666;\\n        font-family: inherit;\\n        font-size: 12px;\\n        font-weight: 400;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-close {\\n        display: block;\\n        margin: 0 20px 20px auto;\\n      }\\n      \\n      .clr-preview {\\n        position: relative;\\n        width: 32px;\\n        height: 32px;\\n        margin: 15px 0 20px 20px;\\n        border-radius: 50%;\\n        overflow: hidden;\\n      }\\n      \\n      .clr-preview:before,\\n      .clr-preview:after {\\n        content: '';\\n        position: absolute;\\n        height: 100%;\\n        width: 100%;\\n        left: 0;\\n        top: 0;\\n        border: 1px solid #fff;\\n        border-radius: 50%;\\n      }\\n      \\n      .clr-preview:after {\\n        border: 0;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);\\n      }\\n      \\n      .clr-preview button {\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        z-index: 1;\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        border-radius: 50%;\\n        outline-offset: -2px;\\n        background-color: transparent;\\n        text-indent: -9999px;\\n        cursor: pointer;\\n        overflow: hidden;\\n      }\\n      \\n      .clr-marker,\\n      .clr-hue div,\\n      .clr-alpha div,\\n      .clr-color {\\n        box-sizing: border-box;\\n      }\\n      \\n      .clr-field {\\n        display: inline-block;\\n        position: relative;\\n        color: transparent;\\n      }\\n      \\n      .clr-field input {\\n        margin: 0;\\n        direction: ltr;\\n      }\\n      \\n      .clr-field.clr-rtl input {\\n        text-align: right;\\n      }\\n      \\n      .clr-field button {\\n        position: absolute;\\n        width: 30px;\\n        height: 100%;\\n        right: 0;\\n        top: 50%;\\n        transform: translateY(-50%);\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        color: inherit;\\n        text-indent: -1000px;\\n        white-space: nowrap;\\n        overflow: hidden;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-field.clr-rtl button {\\n        right: auto;\\n        left: 0;\\n      }\\n      \\n      .clr-field button:after {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: inherit;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 1px rgba(0,0,0,.5);\\n      }\\n      \\n      .clr-alpha,\\n      .clr-alpha div,\\n      .clr-swatches button,\\n      .clr-preview:before,\\n      .clr-field button {\\n        background-image: repeating-linear-gradient(45deg, #aaa 25%, transparent 25%, transparent 75%, #aaa 75%, #aaa), repeating-linear-gradient(45deg, #aaa 25%, #fff 25%, #fff 75%, #aaa 75%, #aaa);\\n        background-position: 0 0, 4px 4px;\\n        background-size: 8px 8px;\\n      }\\n      \\n      .clr-marker:focus {\\n        outline: none;\\n      }\\n      \\n      .clr-keyboard-nav .clr-marker:focus,\\n      .clr-keyboard-nav .clr-hue input:focus + div,\\n      .clr-keyboard-nav .clr-alpha input:focus + div,\\n      .clr-keyboard-nav .clr-segmented input:focus + label {\\n        outline: none;\\n        box-shadow: 0 0 0 2px #1e90ff, 0 0 2px 2px #fff;\\n      }\\n      \\n      .clr-picker[data-alpha=\\\"false\\\"] .clr-alpha {\\n        display: none;\\n      }\\n      \\n      .clr-picker[data-minimal=\\\"true\\\"] {\\n        padding-top: 16px;\\n      }\\n      \\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-gradient,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-hue,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-alpha,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-color,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-preview {\\n        display: none;\\n      }\\n      \\n      /** Dark theme **/\\n      \\n      .clr-dark {\\n        background-color: #444;\\n      }\\n      \\n      .clr-dark .clr-segmented {\\n        border-color: #777;\\n      }\\n      \\n      .clr-dark .clr-swatches button:after {\\n        box-shadow: inset 0 0 0 1px rgba(255,255,255,.3);\\n      }\\n      \\n      .clr-dark input.clr-color {\\n        color: #fff;\\n        border-color: #777;\\n        background-color: #555;\\n      }\\n      \\n      .clr-dark input.clr-color:focus {\\n        border-color: #1e90ff;\\n      }\\n      \\n      .clr-dark .clr-preview:after {\\n        box-shadow: inset 0 0 0 1px rgba(255,255,255,.5);\\n      }\\n      \\n      .clr-dark .clr-alpha,\\n      .clr-dark .clr-alpha div,\\n      .clr-dark .clr-swatches button,\\n      .clr-dark .clr-preview:before {\\n        background-image: repeating-linear-gradient(45deg, #666 25%, transparent 25%, transparent 75%, #888 75%, #888), repeating-linear-gradient(45deg, #888 25%, #444 25%, #444 75%, #888 75%, #888);\\n      }\\n      \\n      /** Polaroid theme **/\\n      \\n      .clr-picker.clr-polaroid {\\n        border-radius: 6px;\\n        box-shadow: 0 0 5px rgba(0,0,0,.1), 0 5px 30px rgba(0,0,0,.2);\\n      }\\n      \\n      .clr-picker.clr-polaroid:before {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 16px;\\n        height: 10px;\\n        left: 20px;\\n        top: -10px;\\n        border: solid transparent;\\n        border-width: 0 8px 10px 8px;\\n        border-bottom-color: currentColor;\\n        box-sizing: border-box;\\n        color: #fff;\\n        filter: drop-shadow(0 -4px 3px rgba(0,0,0,.1));\\n        pointer-events: none;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-dark:before {\\n        color: #444;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-left:before {\\n        left: auto;\\n        right: 20px;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-top:before {\\n        top: auto;\\n        bottom: -10px;\\n        transform: rotateZ(180deg);\\n      }\\n      \\n      .clr-polaroid .clr-gradient {\\n        width: calc(100% - 20px);\\n        height: 120px;\\n        margin: 10px;\\n        border-radius: 3px;\\n      }\\n      \\n      .clr-polaroid .clr-hue,\\n      .clr-polaroid .clr-alpha {\\n        width: calc(100% - 30px);\\n        height: 10px;\\n        margin: 6px 15px;\\n        border-radius: 5px;\\n      }\\n      \\n      .clr-polaroid .clr-hue div,\\n      .clr-polaroid .clr-alpha div {\\n        box-shadow: 0 0 5px rgba(0,0,0,.2);\\n      }\\n      \\n      .clr-polaroid .clr-format {\\n        width: calc(100% - 20px);\\n        margin: 0 10px 15px;\\n      }\\n      \\n      .clr-polaroid .clr-swatches {\\n        width: calc(100% - 12px);\\n        margin: 0 6px;\\n      }\\n      .clr-polaroid .clr-swatches div {\\n        padding-bottom: 10px;\\n      }\\n      \\n      .clr-polaroid .clr-swatches button {\\n        width: 22px;\\n        height: 22px;\\n      }\\n      \\n      .clr-polaroid input.clr-color {\\n        width: calc(100% - 60px);\\n        margin: 10px 10px 15px auto;\\n      }\\n      \\n      .clr-polaroid .clr-clear {\\n        margin: 0 10px 15px 10px;\\n      }\\n      \\n      .clr-polaroid .clr-close {\\n        margin: 0 10px 15px auto;\\n      }\\n      \\n      .clr-polaroid .clr-preview {\\n        margin: 10px 0 15px 10px;\\n      }\\n      \\n      /** Large theme **/\\n      \\n      .clr-picker.clr-large {\\n        width: 275px;\\n      }\\n      \\n      .clr-large .clr-gradient {\\n        height: 150px;\\n      }\\n      \\n      .clr-large .clr-swatches button {\\n        width: 22px;\\n        height: 22px;\\n      }\\n      \\n      /** Pill (horizontal) theme **/\\n      \\n      .clr-picker.clr-pill {\\n        width: 380px;\\n        padding-left: 180px;\\n        box-sizing: border-box;\\n      }\\n      \\n      .clr-pill .clr-gradient {\\n        position: absolute;\\n        width: 180px;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        margin-bottom: 0;\\n        border-radius: 3px 0 0 3px;\\n      }\\n      \\n      .clr-pill .clr-hue {\\n        margin-top: 20px;\\n      }\\n    </style>\\n    \\n    <!-- Example code -->\\n    <style type=\\\"text/css\\\">\\n    @import url(https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap);\\n\\n    body {\\n      height: 120vh;\\n      margin: 30px;\\n      color: #444;\\n      background-color: #fff;\\n      font-family: 'Lato', sans-serif;\\n    }\\n\\n    h1 {\\n      margin-bottom: 1.5em;\\n    }\\n\\n    input {\\n      width: 150px;\\n      height: 32px;\\n      padding: 0 10px;\\n      border: 1px solid #ccc;\\n      border-radius: 5px;\\n      font-family: inherit;\\n      font-size: inherit;\\n      font-weight: inherit;\\n      box-sizing: border-box;\\n    }\\n      \\n    .examples {\\n      display: flex;\\n      flex-wrap: wrap;\\n    }\\n\\n    .example {\\n      flex-shrink: 0;\\n      width: 300px;\\n      margin-bottom: 30px;\\n    }\\n\\n    .square .clr-field button,\\n    .circle .clr-field button {\\n      width: 22px;\\n      height: 22px;\\n      left: 5px;\\n      right: auto;\\n      border-radius: 5px;\\n    }\\n\\n    .square .clr-field input,\\n    .circle .clr-field input {\\n      padding-left: 36px;\\n    }\\n\\n    .circle .clr-field button {\\n      border-radius: 50%;\\n    }\\n\\n    .full .clr-field button {\\n      width: 100%;\\n      height: 100%;\\n      border-radius: 5px;\\n    }\\n\\n    </style>\\n  </head>\\n<body onload=\\\"onLoad()\\\">\\n  <script>\\n    /* This is the readable content of coloris.min.js */\\n    \\n    /*!\\n     * Copyright (c) 2021 Momo Bassit.\\n     * Licensed under the MIT License (MIT)\\n     * https://github.com/mdbassit/Coloris\\n     */\\n    \\n    (function (window, document, Math, undefined) {\\n      var ctx = document.createElement('canvas').getContext('2d');\\n      var currentColor = { r: 0, g: 0, b: 0, h: 0, s: 0, v: 0, a: 1 };\\n      var container, picker, colorArea, colorAreaDims, colorMarker, colorPreview, colorValue, clearButton, closeButton,\\n      hueSlider, hueMarker, alphaSlider, alphaMarker, currentEl, currentFormat, oldColor, keyboardNav;\\n    \\n      // Default settings\\n      var settings = {\\n        el: '[data-coloris]',\\n        parent: 'body',\\n        theme: 'default',\\n        themeMode: 'light',\\n        rtl: false,\\n        wrap: true,\\n        margin: 2,\\n        format: 'hex',\\n        formatToggle: false,\\n        swatches: [],\\n        swatchesOnly: false,\\n        alpha: true,\\n        forceAlpha: false,\\n        focusInput: true,\\n        selectInput: false,\\n        inline: false,\\n        defaultColor: '#000000',\\n        clearButton: false,\\n        clearLabel: 'Clear',\\n        closeButton: false,\\n        closeLabel: 'Close',\\n        onChange: function onChange() {return undefined;},\\n        a11y: {\\n          open: 'Open color picker',\\n          close: 'Close color picker',\\n          clear: 'Clear the selected color',\\n          marker: 'Saturation: {s}. Brightness: {v}.',\\n          hueSlider: 'Hue slider',\\n          alphaSlider: 'Opacity slider',\\n          input: 'Color value field',\\n          format: 'Color format',\\n          swatch: 'Color swatch',\\n          instruction: 'Saturation and brightness selector. Use up, down, left and right arrow keys to select.' } };\\n    \\n    \\n    \\n      // Virtual instances cache\\n      var instances = {};\\n      var currentInstanceId = '';\\n      var defaultInstance = {};\\n      var hasInstance = false;\\n    \\n      /**\\n       * Configure the color picker.\\n       * @param {object} options Configuration options.\\n       */\\n      function configure(options) {\\n        if (typeof options !== 'object') {\\n          return;\\n        }\\n    \\n        for (var key in options) {\\n          switch (key) {\\n            case 'el':\\n              bindFields(options.el);\\n              if (options.wrap !== false) {\\n                wrapFields(options.el);\\n              }\\n              break;\\n            case 'parent':\\n              container = document.querySelector(options.parent);\\n              if (container) {\\n                container.appendChild(picker);\\n                settings.parent = options.parent;\\n    \\n                // document.body is special\\n                if (container === document.body) {\\n                  container = undefined;\\n                }\\n              }\\n              break;\\n            case 'themeMode':\\n              settings.themeMode = options.themeMode;\\n              if (options.themeMode === 'auto' && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\\n                settings.themeMode = 'dark';\\n              }\\n            // The lack of a break statement is intentional\\n            case 'theme':\\n              if (options.theme) {\\n                settings.theme = options.theme;\\n              }\\n    \\n              // Set the theme and color scheme\\n              picker.className = \\\"clr-picker clr-\\\" + settings.theme + \\\" clr-\\\" + settings.themeMode;\\n    \\n              // Update the color picker's position if inline mode is in use\\n              if (settings.inline) {\\n                updatePickerPosition();\\n              }\\n              break;\\n            case 'rtl':\\n              settings.rtl = !!options.rtl;\\n              document.querySelectorAll('.clr-field').forEach(function (field) {return field.classList.toggle('clr-rtl', settings.rtl);});\\n              break;\\n            case 'margin':\\n              options.margin *= 1;\\n              settings.margin = !isNaN(options.margin) ? options.margin : settings.margin;\\n              break;\\n            case 'wrap':\\n              if (options.el && options.wrap) {\\n                wrapFields(options.el);\\n              }\\n              break;\\n            case 'formatToggle':\\n              settings.formatToggle = !!options.formatToggle;\\n              getEl('clr-format').style.display = settings.formatToggle ? 'block' : 'none';\\n              if (settings.formatToggle) {\\n                settings.format = 'auto';\\n              }\\n              break;\\n            case 'swatches':\\n              if (Array.isArray(options.swatches)) {(function () {\\n                  var swatches = [];\\n    \\n                  options.swatches.forEach(function (swatch, i) {\\n                    swatches.push(\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-swatch-\\\" + i + \\\"\\\\\\\" aria-labelledby=\\\\\\\"clr-swatch-label clr-swatch-\\\" + i + \\\"\\\\\\\" style=\\\\\\\"color: \\\" + swatch + \\\";\\\\\\\">\\\" + swatch + \\\"</button>\\\");\\n                  });\\n    \\n                  getEl('clr-swatches').innerHTML = swatches.length ? \\\"<div>\\\" + swatches.join('') + \\\"</div>\\\" : '';\\n                  settings.swatches = options.swatches.slice();})();\\n              }\\n              break;\\n            case 'swatchesOnly':\\n              settings.swatchesOnly = !!options.swatchesOnly;\\n              picker.setAttribute('data-minimal', settings.swatchesOnly);\\n              break;\\n            case 'alpha':\\n              settings.alpha = !!options.alpha;\\n              picker.setAttribute('data-alpha', settings.alpha);\\n              break;\\n            case 'inline':\\n              settings.inline = !!options.inline;\\n              picker.setAttribute('data-inline', settings.inline);\\n    \\n              if (settings.inline) {\\n                var defaultColor = options.defaultColor || settings.defaultColor;\\n    \\n                currentFormat = getColorFormatFromStr(defaultColor);\\n                updatePickerPosition();\\n                setColorFromStr(defaultColor);\\n              }\\n              break;\\n            case 'clearButton':\\n              // Backward compatibility\\n              if (typeof options.clearButton === 'object') {\\n                if (options.clearButton.label) {\\n                  settings.clearLabel = options.clearButton.label;\\n                  clearButton.innerHTML = settings.clearLabel;\\n                }\\n    \\n                options.clearButton = options.clearButton.show;\\n              }\\n    \\n              settings.clearButton = !!options.clearButton;\\n              clearButton.style.display = settings.clearButton ? 'block' : 'none';\\n              break;\\n            case 'clearLabel':\\n              settings.clearLabel = options.clearLabel;\\n              clearButton.innerHTML = settings.clearLabel;\\n              break;\\n            case 'closeButton':\\n              settings.closeButton = !!options.closeButton;\\n    \\n              if (settings.closeButton) {\\n                picker.insertBefore(closeButton, colorPreview);\\n              } else {\\n                colorPreview.appendChild(closeButton);\\n              }\\n    \\n              break;\\n            case 'closeLabel':\\n              settings.closeLabel = options.closeLabel;\\n              closeButton.innerHTML = settings.closeLabel;\\n              break;\\n            case 'a11y':\\n              var labels = options.a11y;\\n              var update = false;\\n    \\n              if (typeof labels === 'object') {\\n                for (var label in labels) {\\n                  if (labels[label] && settings.a11y[label]) {\\n                    settings.a11y[label] = labels[label];\\n                    update = true;\\n                  }\\n                }\\n              }\\n    \\n              if (update) {\\n                var openLabel = getEl('clr-open-label');\\n                var swatchLabel = getEl('clr-swatch-label');\\n    \\n                openLabel.innerHTML = settings.a11y.open;\\n                swatchLabel.innerHTML = settings.a11y.swatch;\\n                closeButton.setAttribute('aria-label', settings.a11y.close);\\n                clearButton.setAttribute('aria-label', settings.a11y.clear);\\n                hueSlider.setAttribute('aria-label', settings.a11y.hueSlider);\\n                alphaSlider.setAttribute('aria-label', settings.a11y.alphaSlider);\\n                colorValue.setAttribute('aria-label', settings.a11y.input);\\n                colorArea.setAttribute('aria-label', settings.a11y.instruction);\\n              }\\n              break;\\n            default:\\n              settings[key] = options[key];}\\n    \\n        }\\n      }\\n    \\n      /**\\n       * Add or update a virtual instance.\\n       * @param {String} selector The CSS selector of the elements to which the instance is attached.\\n       * @param {Object} options Per-instance options to apply.\\n       */\\n      function setVirtualInstance(selector, options) {\\n        if (typeof selector === 'string' && typeof options === 'object') {\\n          instances[selector] = options;\\n          hasInstance = true;\\n        }\\n      }\\n    \\n      /**\\n       * Remove a virtual instance.\\n       * @param {String} selector The CSS selector of the elements to which the instance is attached.\\n       */\\n      function removeVirtualInstance(selector) {\\n        delete instances[selector];\\n    \\n        if (Object.keys(instances).length === 0) {\\n          hasInstance = false;\\n    \\n          if (selector === currentInstanceId) {\\n            resetVirtualInstance();\\n          }\\n        }\\n      }\\n    \\n      /**\\n       * Attach a virtual instance to an element if it matches a selector.\\n       * @param {Object} element Target element that will receive a virtual instance if applicable.\\n       */\\n      function attachVirtualInstance(element) {\\n        if (hasInstance) {\\n          // These options can only be set globally, not per instance\\n          var unsupportedOptions = ['el', 'wrap', 'rtl', 'inline', 'defaultColor', 'a11y'];var _loop = function _loop(\\n    \\n          selector) {\\n            var options = instances[selector];\\n    \\n            // If the element matches an instance's CSS selector\\n            if (element.matches(selector)) {\\n              currentInstanceId = selector;\\n              defaultInstance = {};\\n    \\n              // Delete unsupported options\\n              unsupportedOptions.forEach(function (option) {return delete options[option];});\\n    \\n              // Back up the default options so we can restore them later\\n              for (var option in options) {\\n                defaultInstance[option] = Array.isArray(settings[option]) ? settings[option].slice() : settings[option];\\n              }\\n    \\n              // Set the instance's options\\n              configure(options);\\n              return \\\"break\\\";\\n            }};for (var selector in instances) {var _ret = _loop(selector);if (_ret === \\\"break\\\") break;\\n          }\\n        }\\n      }\\n    \\n      /**\\n       * Revert any per-instance options that were previously applied.\\n       */\\n      function resetVirtualInstance() {\\n        if (Object.keys(defaultInstance).length > 0) {\\n          configure(defaultInstance);\\n          currentInstanceId = '';\\n          defaultInstance = {};\\n        }\\n      }\\n    \\n      /**\\n       * Bind the color picker to input fields that match the selector.\\n       * @param {string} selector One or more selectors pointing to input fields.\\n       */\\n      function bindFields(selector) {\\n        // Show the color picker on click on the input fields that match the selector\\n        addListener(document, 'click', selector, function (event) {\\n          // Skip if inline mode is in use\\n          if (settings.inline) {\\n            return;\\n          }\\n    \\n          // Apply any per-instance options first\\n          attachVirtualInstance(event.target);\\n    \\n          currentEl = event.target;\\n          oldColor = currentEl.value;\\n          currentFormat = getColorFormatFromStr(oldColor);\\n          picker.classList.add('clr-open');\\n    \\n          updatePickerPosition();\\n          setColorFromStr(oldColor);\\n    \\n          if (settings.focusInput || settings.selectInput) {\\n            colorValue.focus({ preventScroll: true });\\n            colorValue.setSelectionRange(currentEl.selectionStart, currentEl.selectionEnd);\\n          }\\n    \\n          if (settings.selectInput) {\\n            colorValue.select();\\n          }\\n    \\n          // Always focus the first element when using keyboard navigation\\n          if (keyboardNav || settings.swatchesOnly) {\\n            getFocusableElements().shift().focus();\\n          }\\n    \\n          // Trigger an \\\"open\\\" event\\n          currentEl.dispatchEvent(new Event('open', { bubbles: true }));\\n        });\\n    \\n        // Update the color preview of the input fields that match the selector\\n        addListener(document, 'input', selector, function (event) {\\n          var parent = event.target.parentNode;\\n    \\n          // Only update the preview if the field has been previously wrapped\\n          if (parent.classList.contains('clr-field')) {\\n            parent.style.color = event.target.value;\\n          }\\n        });\\n      }\\n    \\n      /**\\n       * Update the color picker's position and the color gradient's offset\\n       */\\n      function updatePickerPosition() {\\n        var parent = container;\\n        var scrollY = window.scrollY;\\n        var pickerWidth = picker.offsetWidth;\\n        var pickerHeight = picker.offsetHeight;\\n        var reposition = { left: false, top: false };\\n        var parentStyle, parentMarginTop, parentBorderTop;\\n        var offset = { x: 0, y: 0 };\\n    \\n        if (parent) {\\n          parentStyle = window.getComputedStyle(parent);\\n          parentMarginTop = parseFloat(parentStyle.marginTop);\\n          parentBorderTop = parseFloat(parentStyle.borderTopWidth);\\n    \\n          offset = parent.getBoundingClientRect();\\n          offset.y += parentBorderTop + scrollY;\\n        }\\n    \\n        if (!settings.inline) {\\n          var coords = currentEl.getBoundingClientRect();\\n          var left = coords.x;\\n          var top = scrollY + coords.y + coords.height + settings.margin;\\n    \\n          // If the color picker is inside a custom container\\n          // set the position relative to it\\n          if (parent) {\\n            left -= offset.x;\\n            top -= offset.y;\\n    \\n            if (left + pickerWidth > parent.clientWidth) {\\n              left += coords.width - pickerWidth;\\n              reposition.left = true;\\n            }\\n    \\n            if (top + pickerHeight > parent.clientHeight - parentMarginTop) {\\n              if (pickerHeight + settings.margin <= coords.top - (offset.y - scrollY)) {\\n                top -= coords.height + pickerHeight + settings.margin * 2;\\n                reposition.top = true;\\n              }\\n            }\\n    \\n            top += parent.scrollTop;\\n    \\n            // Otherwise set the position relative to the whole document\\n          } else {\\n            if (left + pickerWidth > document.documentElement.clientWidth) {\\n              left += coords.width - pickerWidth;\\n              reposition.left = true;\\n            }\\n    \\n            if (top + pickerHeight - scrollY > document.documentElement.clientHeight) {\\n              if (pickerHeight + settings.margin <= coords.top) {\\n                top = scrollY + coords.y - pickerHeight - settings.margin;\\n                reposition.top = true;\\n              }\\n            }\\n          }\\n    \\n          picker.classList.toggle('clr-left', reposition.left);\\n          picker.classList.toggle('clr-top', reposition.top);\\n          picker.style.left = left + \\\"px\\\";\\n          picker.style.top = top + \\\"px\\\";\\n          offset.x += picker.offsetLeft;\\n          offset.y += picker.offsetTop;\\n        }\\n    \\n        colorAreaDims = {\\n          width: colorArea.offsetWidth,\\n          height: colorArea.offsetHeight,\\n          x: colorArea.offsetLeft + offset.x,\\n          y: colorArea.offsetTop + offset.y };\\n    \\n      }\\n    \\n      /**\\n       * Wrap the linked input fields in a div that adds a color preview.\\n       * @param {string} selector One or more selectors pointing to input fields.\\n       */\\n      function wrapFields(selector) {\\n        document.querySelectorAll(selector).forEach(function (field) {\\n          var parentNode = field.parentNode;\\n    \\n          if (!parentNode.classList.contains('clr-field')) {\\n            var wrapper = document.createElement('div');\\n            var classes = 'clr-field';\\n    \\n            if (settings.rtl || field.classList.contains('clr-rtl')) {\\n              classes += ' clr-rtl';\\n            }\\n    \\n            wrapper.innerHTML = \\\"<button type=\\\\\\\"button\\\\\\\" aria-labelledby=\\\\\\\"clr-open-label\\\\\\\"></button>\\\";\\n            parentNode.insertBefore(wrapper, field);\\n            wrapper.setAttribute('class', classes);\\n            wrapper.style.color = field.value;\\n            wrapper.appendChild(field);\\n          }\\n        });\\n      }\\n    \\n      /**\\n       * Close the color picker.\\n       * @param {boolean} [revert] If true, revert the color to the original value.\\n       */\\n      function closePicker(revert) {\\n        if (currentEl && !settings.inline) {\\n          var prevEl = currentEl;\\n    \\n          // Revert the color to the original value if needed\\n          if (revert) {\\n            // This will prevent the \\\"change\\\" event on the colorValue input to execute its handler\\n            currentEl = undefined;\\n    \\n            if (oldColor !== prevEl.value) {\\n              prevEl.value = oldColor;\\n    \\n              // Trigger an \\\"input\\\" event to force update the thumbnail next to the input field\\n              prevEl.dispatchEvent(new Event('input', { bubbles: true }));\\n            }\\n          }\\n    \\n          // Trigger a \\\"change\\\" event if needed\\n          setTimeout(function () {// Add this to the end of the event loop\\n            if (oldColor !== prevEl.value) {\\n              prevEl.dispatchEvent(new Event('change', { bubbles: true }));\\n            }\\n          });\\n    \\n          // Hide the picker dialog\\n          picker.classList.remove('clr-open');\\n    \\n          // Reset any previously set per-instance options\\n          if (hasInstance) {\\n            resetVirtualInstance();\\n          }\\n    \\n          // Trigger a \\\"close\\\" event\\n          prevEl.dispatchEvent(new Event('close', { bubbles: true }));\\n    \\n          if (settings.focusInput) {\\n            prevEl.focus({ preventScroll: true });\\n          }\\n    \\n          // This essentially marks the picker as closed\\n          currentEl = undefined;\\n        }\\n      }\\n    \\n      /**\\n       * Set the active color from a string.\\n       * @param {string} str String representing a color.\\n       */\\n      function setColorFromStr(str) {\\n        var rgba = strToRGBA(str);\\n        var hsva = RGBAtoHSVA(rgba);\\n    \\n        updateMarkerA11yLabel(hsva.s, hsva.v);\\n        updateColor(rgba, hsva);\\n    \\n        // Update the UI\\n        hueSlider.value = hsva.h;\\n        picker.style.color = \\\"hsl(\\\" + hsva.h + \\\", 100%, 50%)\\\";\\n        hueMarker.style.left = hsva.h / 360 * 100 + \\\"%\\\";\\n    \\n        colorMarker.style.left = colorAreaDims.width * hsva.s / 100 + \\\"px\\\";\\n        colorMarker.style.top = colorAreaDims.height - colorAreaDims.height * hsva.v / 100 + \\\"px\\\";\\n    \\n        alphaSlider.value = hsva.a * 100;\\n        alphaMarker.style.left = hsva.a * 100 + \\\"%\\\";\\n      }\\n    \\n      /**\\n       * Guess the color format from a string.\\n       * @param {string} str String representing a color.\\n       * @return {string} The color format.\\n       */\\n      function getColorFormatFromStr(str) {\\n        var format = str.substring(0, 3).toLowerCase();\\n    \\n        if (format === 'rgb' || format === 'hsl') {\\n          return format;\\n        }\\n    \\n        return 'hex';\\n      }\\n    \\n      /**\\n       * Copy the active color to the linked input field.\\n       * @param {number} [color] Color value to override the active color.\\n       */\\n      function pickColor(color) {\\n        color = color !== undefined ? color : colorValue.value;\\n    \\n        if (currentEl) {\\n          currentEl.value = color;\\n          currentEl.dispatchEvent(new Event('input', { bubbles: true }));\\n        }\\n    \\n        if (settings.onChange) {\\n          settings.onChange.call(window, color, currentEl);\\n        }\\n    \\n        document.dispatchEvent(new CustomEvent('coloris:pick', { detail: { color: color, currentEl: currentEl } }));\\n      }\\n    \\n      /**\\n       * Set the active color based on a specific point in the color gradient.\\n       * @param {number} x Left position.\\n       * @param {number} y Top position.\\n       */\\n      function setColorAtPosition(x, y) {\\n        var hsva = {\\n          h: hueSlider.value * 1,\\n          s: x / colorAreaDims.width * 100,\\n          v: 100 - y / colorAreaDims.height * 100,\\n          a: alphaSlider.value / 100 };\\n    \\n        var rgba = HSVAtoRGBA(hsva);\\n    \\n        updateMarkerA11yLabel(hsva.s, hsva.v);\\n        updateColor(rgba, hsva);\\n        pickColor();\\n      }\\n    \\n      /**\\n       * Update the color marker's accessibility label.\\n       * @param {number} saturation\\n       * @param {number} value\\n       */\\n      function updateMarkerA11yLabel(saturation, value) {\\n        var label = settings.a11y.marker;\\n    \\n        saturation = saturation.toFixed(1) * 1;\\n        value = value.toFixed(1) * 1;\\n        label = label.replace('{s}', saturation);\\n        label = label.replace('{v}', value);\\n        colorMarker.setAttribute('aria-label', label);\\n      }\\n    \\n      //\\n      /**\\n       * Get the pageX and pageY positions of the pointer.\\n       * @param {object} event The MouseEvent or TouchEvent object.\\n       * @return {object} The pageX and pageY positions.\\n       */\\n      function getPointerPosition(event) {\\n        return {\\n          pageX: event.changedTouches ? event.changedTouches[0].pageX : event.pageX,\\n          pageY: event.changedTouches ? event.changedTouches[0].pageY : event.pageY };\\n    \\n      }\\n    \\n      /**\\n       * Move the color marker when dragged.\\n       * @param {object} event The MouseEvent object.\\n       */\\n      function moveMarker(event) {\\n        var pointer = getPointerPosition(event);\\n        var x = pointer.pageX - colorAreaDims.x;\\n        var y = pointer.pageY - colorAreaDims.y;\\n    \\n        if (container) {\\n          y += container.scrollTop;\\n        }\\n    \\n        setMarkerPosition(x, y);\\n    \\n        // Prevent scrolling while dragging the marker\\n        event.preventDefault();\\n        event.stopPropagation();\\n      }\\n    \\n      /**\\n       * Move the color marker when the arrow keys are pressed.\\n       * @param {number} offsetX The horizontal amount to move.\\n       * @param {number} offsetY The vertical amount to move.\\n       */\\n      function moveMarkerOnKeydown(offsetX, offsetY) {\\n        var x = colorMarker.style.left.replace('px', '') * 1 + offsetX;\\n        var y = colorMarker.style.top.replace('px', '') * 1 + offsetY;\\n    \\n        setMarkerPosition(x, y);\\n      }\\n    \\n      /**\\n       * Set the color marker's position.\\n       * @param {number} x Left position.\\n       * @param {number} y Top position.\\n       */\\n      function setMarkerPosition(x, y) {\\n        // Make sure the marker doesn't go out of bounds\\n        x = x < 0 ? 0 : x > colorAreaDims.width ? colorAreaDims.width : x;\\n        y = y < 0 ? 0 : y > colorAreaDims.height ? colorAreaDims.height : y;\\n    \\n        // Set the position\\n        colorMarker.style.left = x + \\\"px\\\";\\n        colorMarker.style.top = y + \\\"px\\\";\\n    \\n        // Update the color\\n        setColorAtPosition(x, y);\\n    \\n        // Make sure the marker is focused\\n        colorMarker.focus();\\n      }\\n    \\n      /**\\n       * Update the color picker's input field and preview thumb.\\n       * @param {Object} rgba Red, green, blue and alpha values.\\n       * @param {Object} [hsva] Hue, saturation, value and alpha values.\\n       */\\n      function updateColor(rgba, hsva) {if (rgba === void 0) {rgba = {};}if (hsva === void 0) {hsva = {};}\\n        var format = settings.format;\\n    \\n        for (var key in rgba) {\\n          currentColor[key] = rgba[key];\\n        }\\n    \\n        for (var _key in hsva) {\\n          currentColor[_key] = hsva[_key];\\n        }\\n    \\n        var hex = RGBAToHex(currentColor);\\n        var opaqueHex = hex.substring(0, 7);\\n    \\n        colorMarker.style.color = opaqueHex;\\n        alphaMarker.parentNode.style.color = opaqueHex;\\n        alphaMarker.style.color = hex;\\n        colorPreview.style.color = hex;\\n    \\n        // Force repaint the color and alpha gradients as a workaround for a Google Chrome bug\\n        colorArea.style.display = 'none';\\n        colorArea.offsetHeight;\\n        colorArea.style.display = '';\\n        alphaMarker.nextElementSibling.style.display = 'none';\\n        alphaMarker.nextElementSibling.offsetHeight;\\n        alphaMarker.nextElementSibling.style.display = '';\\n    \\n        if (format === 'mixed') {\\n          format = currentColor.a === 1 ? 'hex' : 'rgb';\\n        } else if (format === 'auto') {\\n          format = currentFormat;\\n        }\\n    \\n        switch (format) {\\n          case 'hex':\\n            colorValue.value = hex;\\n            break;\\n          case 'rgb':\\n            colorValue.value = RGBAToStr(currentColor);\\n            break;\\n          case 'hsl':\\n            colorValue.value = HSLAToStr(HSVAtoHSLA(currentColor));\\n            break;}\\n    \\n    \\n        // Select the current format in the format switcher\\n        document.querySelector(\\\".clr-format [value=\\\\\\\"\\\" + format + \\\"\\\\\\\"]\\\").checked = true;\\n      }\\n    \\n      /**\\n       * Set the hue when its slider is moved.\\n       */\\n      function setHue() {\\n        var hue = hueSlider.value * 1;\\n        var x = colorMarker.style.left.replace('px', '') * 1;\\n        var y = colorMarker.style.top.replace('px', '') * 1;\\n    \\n        picker.style.color = \\\"hsl(\\\" + hue + \\\", 100%, 50%)\\\";\\n        hueMarker.style.left = hue / 360 * 100 + \\\"%\\\";\\n    \\n        setColorAtPosition(x, y);\\n      }\\n    \\n      /**\\n       * Set the alpha when its slider is moved.\\n       */\\n      function setAlpha() {\\n        var alpha = alphaSlider.value / 100;\\n    \\n        alphaMarker.style.left = alpha * 100 + \\\"%\\\";\\n        updateColor({ a: alpha });\\n        pickColor();\\n      }\\n    \\n      /**\\n       * Convert HSVA to RGBA.\\n       * @param {object} hsva Hue, saturation, value and alpha values.\\n       * @return {object} Red, green, blue and alpha values.\\n       */\\n      function HSVAtoRGBA(hsva) {\\n        var saturation = hsva.s / 100;\\n        var value = hsva.v / 100;\\n        var chroma = saturation * value;\\n        var hueBy60 = hsva.h / 60;\\n        var x = chroma * (1 - Math.abs(hueBy60 % 2 - 1));\\n        var m = value - chroma;\\n    \\n        chroma = chroma + m;\\n        x = x + m;\\n    \\n        var index = Math.floor(hueBy60) % 6;\\n        var red = [chroma, x, m, m, x, chroma][index];\\n        var green = [x, chroma, chroma, x, m, m][index];\\n        var blue = [m, m, x, chroma, chroma, x][index];\\n    \\n        return {\\n          r: Math.round(red * 255),\\n          g: Math.round(green * 255),\\n          b: Math.round(blue * 255),\\n          a: hsva.a };\\n    \\n      }\\n    \\n      /**\\n       * Convert HSVA to HSLA.\\n       * @param {object} hsva Hue, saturation, value and alpha values.\\n       * @return {object} Hue, saturation, lightness and alpha values.\\n       */\\n      function HSVAtoHSLA(hsva) {\\n        var value = hsva.v / 100;\\n        var lightness = value * (1 - hsva.s / 100 / 2);\\n        var saturation;\\n    \\n        if (lightness > 0 && lightness < 1) {\\n          saturation = Math.round((value - lightness) / Math.min(lightness, 1 - lightness) * 100);\\n        }\\n    \\n        return {\\n          h: hsva.h,\\n          s: saturation || 0,\\n          l: Math.round(lightness * 100),\\n          a: hsva.a };\\n    \\n      }\\n    \\n      /**\\n       * Convert RGBA to HSVA.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {object} Hue, saturation, value and alpha values.\\n       */\\n      function RGBAtoHSVA(rgba) {\\n        var red = rgba.r / 255;\\n        var green = rgba.g / 255;\\n        var blue = rgba.b / 255;\\n        var xmax = Math.max(red, green, blue);\\n        var xmin = Math.min(red, green, blue);\\n        var chroma = xmax - xmin;\\n        var value = xmax;\\n        var hue = 0;\\n        var saturation = 0;\\n    \\n        if (chroma) {\\n          if (xmax === red) {hue = (green - blue) / chroma;}\\n          if (xmax === green) {hue = 2 + (blue - red) / chroma;}\\n          if (xmax === blue) {hue = 4 + (red - green) / chroma;}\\n          if (xmax) {saturation = chroma / xmax;}\\n        }\\n    \\n        hue = Math.floor(hue * 60);\\n    \\n        return {\\n          h: hue < 0 ? hue + 360 : hue,\\n          s: Math.round(saturation * 100),\\n          v: Math.round(value * 100),\\n          a: rgba.a };\\n    \\n      }\\n    \\n      /**\\n       * Parse a string to RGBA.\\n       * @param {string} str String representing a color.\\n       * @return {object} Red, green, blue and alpha values.\\n       */\\n      function strToRGBA(str) {\\n        var regex = /^((rgba)|rgb)[\\\\D]+([\\\\d.]+)[\\\\D]+([\\\\d.]+)[\\\\D]+([\\\\d.]+)[\\\\D]*?([\\\\d.]+|$)/i;\\n        var match, rgba;\\n    \\n        // Default to black for invalid color strings\\n        ctx.fillStyle = '#000';\\n    \\n        // Use canvas to convert the string to a valid color string\\n        ctx.fillStyle = str;\\n        match = regex.exec(ctx.fillStyle);\\n    \\n        if (match) {\\n          rgba = {\\n            r: match[3] * 1,\\n            g: match[4] * 1,\\n            b: match[5] * 1,\\n            a: match[6] * 1 };\\n    \\n    \\n          // Workaround to mitigate a Chromium bug where the alpha value is rounded incorrectly\\n          rgba.a = +rgba.a.toFixed(2);\\n    \\n        } else {\\n          match = ctx.fillStyle.replace('#', '').match(/.{2}/g).map(function (h) {return parseInt(h, 16);});\\n          rgba = {\\n            r: match[0],\\n            g: match[1],\\n            b: match[2],\\n            a: 1 };\\n    \\n        }\\n    \\n        return rgba;\\n      }\\n    \\n      /**\\n       * Convert RGBA to Hex.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {string} Hex color string.\\n       */\\n      function RGBAToHex(rgba) {\\n        var R = rgba.r.toString(16);\\n        var G = rgba.g.toString(16);\\n        var B = rgba.b.toString(16);\\n        var A = '';\\n    \\n        if (rgba.r < 16) {\\n          R = '0' + R;\\n        }\\n    \\n        if (rgba.g < 16) {\\n          G = '0' + G;\\n        }\\n    \\n        if (rgba.b < 16) {\\n          B = '0' + B;\\n        }\\n    \\n        if (settings.alpha && (rgba.a < 1 || settings.forceAlpha)) {\\n          var alpha = rgba.a * 255 | 0;\\n          A = alpha.toString(16);\\n    \\n          if (alpha < 16) {\\n            A = '0' + A;\\n          }\\n        }\\n    \\n        return '#' + R + G + B + A;\\n      }\\n    \\n      /**\\n       * Convert RGBA values to a CSS rgb/rgba string.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {string} CSS color string.\\n       */\\n      function RGBAToStr(rgba) {\\n        if (!settings.alpha || rgba.a === 1 && !settings.forceAlpha) {\\n          return \\\"rgb(\\\" + rgba.r + \\\", \\\" + rgba.g + \\\", \\\" + rgba.b + \\\")\\\";\\n        } else {\\n          return \\\"rgba(\\\" + rgba.r + \\\", \\\" + rgba.g + \\\", \\\" + rgba.b + \\\", \\\" + rgba.a + \\\")\\\";\\n        }\\n      }\\n    \\n      /**\\n       * Convert HSLA values to a CSS hsl/hsla string.\\n       * @param {object} hsla Hue, saturation, lightness and alpha values.\\n       * @return {string} CSS color string.\\n       */\\n      function HSLAToStr(hsla) {\\n        if (!settings.alpha || hsla.a === 1 && !settings.forceAlpha) {\\n          return \\\"hsl(\\\" + hsla.h + \\\", \\\" + hsla.s + \\\"%, \\\" + hsla.l + \\\"%)\\\";\\n        } else {\\n          return \\\"hsla(\\\" + hsla.h + \\\", \\\" + hsla.s + \\\"%, \\\" + hsla.l + \\\"%, \\\" + hsla.a + \\\")\\\";\\n        }\\n      }\\n    \\n      /**\\n       * Init the color picker.\\n       */\\n      function init() {\\n        // Render the UI\\n        container = undefined;\\n        picker = document.createElement('div');\\n        picker.setAttribute('id', 'clr-picker');\\n        picker.className = 'clr-picker';\\n        picker.innerHTML =\\n        \\\"<input id=\\\\\\\"clr-color-value\\\\\\\" name=\\\\\\\"clr-color-value\\\\\\\" class=\\\\\\\"clr-color\\\\\\\" type=\\\\\\\"text\\\\\\\" value=\\\\\\\"\\\\\\\" spellcheck=\\\\\\\"false\\\\\\\" aria-label=\\\\\\\"\\\" + settings.a11y.input + \\\"\\\\\\\">\\\" + (\\\"<div id=\\\\\\\"clr-color-area\\\\\\\" class=\\\\\\\"clr-gradient\\\\\\\" role=\\\\\\\"application\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.instruction + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-color-marker\\\" class=\\\"clr-marker\\\" tabindex=\\\"0\\\"></div>' +\\n        '</div>' +\\n        '<div class=\\\"clr-hue\\\">' + (\\\"<input id=\\\\\\\"clr-hue-slider\\\\\\\" name=\\\\\\\"clr-hue-slider\\\\\\\" type=\\\\\\\"range\\\\\\\" min=\\\\\\\"0\\\\\\\" max=\\\\\\\"360\\\\\\\" step=\\\\\\\"1\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.hueSlider + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-hue-marker\\\"></div>' +\\n        '</div>' +\\n        '<div class=\\\"clr-alpha\\\">' + (\\\"<input id=\\\\\\\"clr-alpha-slider\\\\\\\" name=\\\\\\\"clr-alpha-slider\\\\\\\" type=\\\\\\\"range\\\\\\\" min=\\\\\\\"0\\\\\\\" max=\\\\\\\"100\\\\\\\" step=\\\\\\\"1\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.alphaSlider + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-alpha-marker\\\"></div>' +\\n        '<span></span>' +\\n        '</div>' +\\n        '<div id=\\\"clr-format\\\" class=\\\"clr-format\\\">' +\\n        '<fieldset class=\\\"clr-segmented\\\">' + (\\\"<legend>\\\" +\\n        settings.a11y.format + \\\"</legend>\\\") +\\n        '<input id=\\\"clr-f1\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"hex\\\">' +\\n        '<label for=\\\"clr-f1\\\">Hex</label>' +\\n        '<input id=\\\"clr-f2\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"rgb\\\">' +\\n        '<label for=\\\"clr-f2\\\">RGB</label>' +\\n        '<input id=\\\"clr-f3\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"hsl\\\">' +\\n        '<label for=\\\"clr-f3\\\">HSL</label>' +\\n        '<span></span>' +\\n        '</fieldset>' +\\n        '</div>' +\\n        '<div id=\\\"clr-swatches\\\" class=\\\"clr-swatches\\\"></div>' + (\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-clear\\\\\\\" class=\\\\\\\"clr-clear\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.clear + \\\"\\\\\\\">\\\" + settings.clearLabel + \\\"</button>\\\") +\\n        '<div id=\\\"clr-color-preview\\\" class=\\\"clr-preview\\\">' + (\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-close\\\\\\\" class=\\\\\\\"clr-close\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.close + \\\"\\\\\\\">\\\" + settings.closeLabel + \\\"</button>\\\") +\\n        '</div>' + (\\\"<span id=\\\\\\\"clr-open-label\\\\\\\" hidden>\\\" +\\n        settings.a11y.open + \\\"</span>\\\") + (\\\"<span id=\\\\\\\"clr-swatch-label\\\\\\\" hidden>\\\" +\\n        settings.a11y.swatch + \\\"</span>\\\");\\n    \\n        // Append the color picker to the DOM\\n        document.body.appendChild(picker);\\n    \\n        // Reference the UI elements\\n        colorArea = getEl('clr-color-area');\\n        colorMarker = getEl('clr-color-marker');\\n        clearButton = getEl('clr-clear');\\n        closeButton = getEl('clr-close');\\n        colorPreview = getEl('clr-color-preview');\\n        colorValue = getEl('clr-color-value');\\n        hueSlider = getEl('clr-hue-slider');\\n        hueMarker = getEl('clr-hue-marker');\\n        alphaSlider = getEl('clr-alpha-slider');\\n        alphaMarker = getEl('clr-alpha-marker');\\n    \\n        // Bind the picker to the default selector\\n        bindFields(settings.el);\\n        wrapFields(settings.el);\\n    \\n        addListener(picker, 'mousedown', function (event) {\\n          picker.classList.remove('clr-keyboard-nav');\\n          event.stopPropagation();\\n        });\\n    \\n        addListener(colorArea, 'mousedown', function (event) {\\n          addListener(document, 'mousemove', moveMarker);\\n        });\\n    \\n        addListener(colorArea, 'touchstart', function (event) {\\n          document.addEventListener('touchmove', moveMarker, { passive: false });\\n        });\\n    \\n        addListener(colorMarker, 'mousedown', function (event) {\\n          addListener(document, 'mousemove', moveMarker);\\n        });\\n    \\n        addListener(colorMarker, 'touchstart', function (event) {\\n          document.addEventListener('touchmove', moveMarker, { passive: false });\\n        });\\n    \\n        addListener(colorValue, 'change', function (event) {\\n          var value = colorValue.value;\\n    \\n          if (currentEl || settings.inline) {\\n            var color = value === '' ? value : setColorFromStr(value);\\n            pickColor(color);\\n          }\\n        });\\n    \\n        addListener(clearButton, 'click', function (event) {\\n          pickColor('');\\n          closePicker();\\n        });\\n    \\n        addListener(closeButton, 'click', function (event) {\\n          pickColor();\\n          closePicker();\\n        });\\n    \\n        addListener(getEl('clr-format'), 'click', '.clr-format input', function (event) {\\n          currentFormat = event.target.value;\\n          updateColor();\\n          pickColor();\\n        });\\n    \\n        addListener(picker, 'click', '.clr-swatches button', function (event) {\\n          setColorFromStr(event.target.textContent);\\n          pickColor();\\n    \\n          if (settings.swatchesOnly) {\\n            closePicker();\\n          }\\n        });\\n    \\n        addListener(document, 'mouseup', function (event) {\\n          document.removeEventListener('mousemove', moveMarker);\\n        });\\n    \\n        addListener(document, 'touchend', function (event) {\\n          document.removeEventListener('touchmove', moveMarker);\\n        });\\n    \\n        addListener(document, 'mousedown', function (event) {\\n          keyboardNav = false;\\n          picker.classList.remove('clr-keyboard-nav');\\n          closePicker();\\n        });\\n    \\n        addListener(document, 'keydown', function (event) {\\n          var key = event.key;\\n          var target = event.target;\\n          var shiftKey = event.shiftKey;\\n          var navKeys = ['Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\\n    \\n          if (key === 'Escape') {\\n            closePicker(true);\\n    \\n            // Display focus rings when using the keyboard\\n          } else if (navKeys.includes(key)) {\\n            keyboardNav = true;\\n            picker.classList.add('clr-keyboard-nav');\\n          }\\n    \\n          // Trap the focus within the color picker while it's open\\n          if (key === 'Tab' && target.matches('.clr-picker *')) {\\n            var focusables = getFocusableElements();\\n            var firstFocusable = focusables.shift();\\n            var lastFocusable = focusables.pop();\\n    \\n            if (shiftKey && target === firstFocusable) {\\n              lastFocusable.focus();\\n              event.preventDefault();\\n            } else if (!shiftKey && target === lastFocusable) {\\n              firstFocusable.focus();\\n              event.preventDefault();\\n            }\\n          }\\n        });\\n    \\n        addListener(document, 'click', '.clr-field button', function (event) {\\n          // Reset any previously set per-instance options\\n          if (hasInstance) {\\n            resetVirtualInstance();\\n          }\\n    \\n          // Open the color picker\\n          event.target.nextElementSibling.dispatchEvent(new Event('click', { bubbles: true }));\\n        });\\n    \\n        addListener(colorMarker, 'keydown', function (event) {\\n          var movements = {\\n            ArrowUp: [0, -1],\\n            ArrowDown: [0, 1],\\n            ArrowLeft: [-1, 0],\\n            ArrowRight: [1, 0] };\\n    \\n    \\n          if (Object.keys(movements).includes(event.key)) {\\n            moveMarkerOnKeydown.apply(void 0, movements[event.key]);\\n            event.preventDefault();\\n          }\\n        });\\n    \\n        addListener(colorArea, 'click', moveMarker);\\n        addListener(hueSlider, 'input', setHue);\\n        addListener(alphaSlider, 'input', setAlpha);\\n      }\\n    \\n      /**\\n       * Return a list of focusable elements within the color picker.\\n       * @return {array} The list of focusable DOM elemnts.\\n       */\\n      function getFocusableElements() {\\n        var controls = Array.from(picker.querySelectorAll('input, button'));\\n        var focusables = controls.filter(function (node) {return !!node.offsetWidth;});\\n    \\n        return focusables;\\n      }\\n    \\n      /**\\n       * Shortcut for getElementById to optimize the minified JS.\\n       * @param {string} id The element id.\\n       * @return {object} The DOM element with the provided id.\\n       */\\n      function getEl(id) {\\n        return document.getElementById(id);\\n      }\\n    \\n      /**\\n       * Shortcut for addEventListener to optimize the minified JS.\\n       * @param {object} context The context to which the listener is attached.\\n       * @param {string} type Event type.\\n       * @param {(string|function)} selector Event target if delegation is used, event handler if not.\\n       * @param {function} [fn] Event handler if delegation is used.\\n       */\\n      function addListener(context, type, selector, fn) {\\n        var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\\n    \\n        // Delegate event to the target of the selector\\n        if (typeof selector === 'string') {\\n          context.addEventListener(type, function (event) {\\n            if (matches.call(event.target, selector)) {\\n              fn.call(event.target, event);\\n            }\\n          });\\n    \\n          // If the selector is not a string then it's a function\\n          // in which case we need a regular event listener\\n        } else {\\n          fn = selector;\\n          context.addEventListener(type, fn);\\n        }\\n      }\\n    \\n      /**\\n       * Call a function only when the DOM is ready.\\n       * @param {function} fn The function to call.\\n       * @param {array} [args] Arguments to pass to the function.\\n       */\\n      function DOMReady(fn, args) {\\n        args = args !== undefined ? args : [];\\n    \\n        if (document.readyState !== 'loading') {\\n          fn.apply(void 0, args);\\n        } else {\\n          document.addEventListener('DOMContentLoaded', function () {\\n            fn.apply(void 0, args);\\n          });\\n        }\\n      }\\n    \\n      // Polyfill for Nodelist.forEach\\n      if (NodeList !== undefined && NodeList.prototype && !NodeList.prototype.forEach) {\\n        NodeList.prototype.forEach = Array.prototype.forEach;\\n      }\\n    \\n      // Expose the color picker to the global scope\\n      window.Coloris = function () {\\n        var methods = {\\n          set: configure,\\n          wrap: wrapFields,\\n          close: closePicker,\\n          setInstance: setVirtualInstance,\\n          removeInstance: removeVirtualInstance,\\n          updatePosition: updatePickerPosition };\\n    \\n    \\n        function Coloris(options) {\\n          DOMReady(function () {\\n            if (options) {\\n              if (typeof options === 'string') {\\n                bindFields(options);\\n              } else {\\n                configure(options);\\n              }\\n            }\\n          });\\n        }var _loop2 = function _loop2(\\n    \\n        key) {\\n          Coloris[key] = function () {for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {args[_key2] = arguments[_key2];}\\n            DOMReady(methods[key], args);\\n          };};for (var key in methods) {_loop2(key);\\n        }\\n    \\n        return Coloris;\\n      }();\\n    \\n      // Init the color picker when the DOM is ready\\n      DOMReady(init);\\n    \\n    })(window, document, Math);\\n  </script>\\n  \\n  <!-- Example code -->\\n  <a href=\\\"https://github.com/mdbassit/Coloris\\\">View <b>Coloris</b> on GitHub</a>\\n    <h1>Coloris examples</h1>\\n    <div class=\\\"examples\\\">\\n      <div class=\\\"example\\\">\\n        <p>Default color thumbnail</p>\\n        <input type=\\\"text\\\" value=\\\"green\\\" data-coloris>\\n      </div>\\n      <div class=\\\"example square\\\">\\n        <p>Rounded square thumbnail</p>\\n        <input type=\\\"text\\\" class=\\\"coloris instance1\\\" value=\\\"rgb(255, 0, 0)\\\">\\n      </div>\\n      <div class=\\\"example circle\\\">\\n        <p>Circular thumbnail</p>\\n        <input type=\\\"text\\\" class=\\\"coloris instance2\\\" value=\\\"#cc458faa\\\">\\n      </div>\\n      <div class=\\\"example full\\\">\\n        <p>Full size thumbnail</p>\\n        <input type=\\\"text\\\" class=\\\"coloris instance3\\\" value=\\\"#ffcc00\\\">\\n      </div>\\n      <div class=\\\"example square\\\" style=\\\"position: relative; top: 300px; padding-bottom: 30px;\\\">\\n        <p>The dialog will appear on top of this field for lack of space under it.</p>\\n        <input type=\\\"text\\\" class=\\\"coloris\\\" value=\\\"#00a5cc\\\">\\n      </div>\\n    </div>\\n    <!--script type=\\\"text/javascript\\\" src=\\\"coloris.min.js\\\"></script-->\\n    <script type=\\\"text/javascript\\\">\\n\\n    /** Default configuration **/\\n\\n    Coloris({\\n      el: '.coloris',\\n      swatches: [\\n        '#264653',\\n        '#2a9d8f',\\n        '#e9c46a',\\n        '#f4a261',\\n        '#e76f51',\\n        '#d62828',\\n        '#023e8a',\\n        '#0077b6',\\n        '#0096c7',\\n        '#00b4d8',\\n        '#48cae4',\\n        '#264653',\\n        '#2a9d8f',\\n        '#e9c46a',\\n        '#f4a261',\\n        '#e76f51',\\n        '#d62828',\\n        '#023e8a',\\n        '#0077b6',\\n        '#0096c7',\\n        '#00b4d8',\\n        '#48cae4',\\n      ]\\n    });\\n\\n    /** Instances **/\\n\\n    Coloris.setInstance('.instance1', {\\n      theme: 'pill',\\n      themeMode: 'dark',\\n      formatToggle: true,\\n      closeButton: true,\\n      clearButton: true,\\n      swatches: [\\n        // Row 1\\n        '#067bc2',\\n        '#84bcda',\\n        '#80e377',\\n        '#ecc30b',\\n        '#f37748',\\n        '#d56062',\\n        // Row 2\\n        '#067bc2',\\n        '#84bcda',\\n        '#80e377',\\n        '#ecc30b',\\n        '#f37748',\\n        '#d56062',\\n      ]\\n    });\\n\\n    Coloris.setInstance('.instance2', { theme: 'polaroid' });\\n\\n    Coloris.setInstance('.instance3', {\\n      theme: 'polaroid',\\n      swatchesOnly: true\\n    });\\n\\n    </script>\\n\\n</body>\\n</html>\",\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":8,\"location\":\"6300 -282.5\",\"linkToKey\":17,\"editorPosition\":[3600,1316,835,1595]},\n{\"label\":\"Documentation\",\"category\":\"TextLabels_Size4\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"530 30\",\"key\":10,\"location\":\"5100 -580\"},\n{\"label\":\"https://www.cssscript.com/color-picker-coloris/\",\"category\":\"TextLabels_Size3\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"950 30\",\"key\":12,\"location\":\"5110 -490\"},\n{\"label\":\"\",\"category\":\"Pictures_Basic\",\"size\":\"650 1050\",\"isFile\":true,\"fileTypeName\":\"Image\",\"fileType\":\"image/png\",\"fileURL\":\"/fileServer/pictures/ColorisDemo.png\",\"key\":15,\"location\":\"7210 460\"},\n{\"label\":\"coloris.min.css\",\"color\":\"peachpuff\",\"size\":\"180 170\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\".clr-picker{display:none;flex-wrap:wrap;position:absolute;width:200px;z-index:1000;border-radius:10px;background-color:#fff;justify-content:flex-end;direction:ltr;box-shadow:0 0 5px rgba(0,0,0,.05),0 5px 20px rgba(0,0,0,.1);-moz-user-select:none;-webkit-user-select:none;user-select:none}.clr-picker.clr-open,.clr-picker[data-inline=true]{display:flex}.clr-picker[data-inline=true]{position:relative}.clr-gradient{position:relative;width:100%;height:100px;margin-bottom:15px;border-radius:3px 3px 0 0;background-image:linear-gradient(rgba(0,0,0,0),#000),linear-gradient(90deg,#fff,currentColor);cursor:pointer}.clr-marker{position:absolute;width:12px;height:12px;margin:-6px 0 0 -6px;border:1px solid #fff;border-radius:50%;background-color:currentColor;cursor:pointer}.clr-picker input[type=range]::-webkit-slider-runnable-track{width:100%;height:16px}.clr-picker input[type=range]::-webkit-slider-thumb{width:16px;height:16px;-webkit-appearance:none}.clr-picker input[type=range]::-moz-range-track{width:100%;height:16px;border:0}.clr-picker input[type=range]::-moz-range-thumb{width:16px;height:16px;border:0}.clr-hue{background-image:linear-gradient(to right,red 0,#ff0 16.66%,#0f0 33.33%,#0ff 50%,#00f 66.66%,#f0f 83.33%,red 100%)}.clr-alpha,.clr-hue{position:relative;width:calc(100% - 40px);height:8px;margin:5px 20px;border-radius:4px}.clr-alpha span{display:block;height:100%;width:100%;border-radius:inherit;background-image:linear-gradient(90deg,rgba(0,0,0,0),currentColor)}.clr-alpha input,.clr-hue input{position:absolute;width:calc(100% + 32px);height:16px;left:-16px;top:-4px;margin:0;background-color:transparent;opacity:0;cursor:pointer;appearance:none;-webkit-appearance:none}.clr-alpha div,.clr-hue div{position:absolute;width:16px;height:16px;left:0;top:50%;margin-left:-8px;transform:translateY(-50%);border:2px solid #fff;border-radius:50%;background-color:currentColor;box-shadow:0 0 1px #888;pointer-events:none}.clr-alpha div:before{content:'';position:absolute;height:100%;width:100%;left:0;top:0;border-radius:50%;background-color:currentColor}.clr-format{display:none;order:1;width:calc(100% - 40px);margin:0 20px 20px}.clr-segmented{display:flex;position:relative;width:100%;margin:0;padding:0;border:1px solid #ddd;border-radius:15px;box-sizing:border-box;color:#999;font-size:12px}.clr-segmented input,.clr-segmented legend{position:absolute;width:100%;height:100%;margin:0;padding:0;border:0;left:0;top:0;opacity:0;pointer-events:none}.clr-segmented label{flex-grow:1;margin:0;padding:4px 0;font-size:inherit;font-weight:400;line-height:initial;text-align:center;cursor:pointer}.clr-segmented label:first-of-type{border-radius:10px 0 0 10px}.clr-segmented label:last-of-type{border-radius:0 10px 10px 0}.clr-segmented input:checked+label{color:#fff;background-color:#666}.clr-swatches{order:2;width:calc(100% - 32px);margin:0 16px}.clr-swatches div{display:flex;flex-wrap:wrap;padding-bottom:12px;justify-content:center}.clr-swatches button{position:relative;width:20px;height:20px;margin:0 4px 6px 4px;padding:0;border:0;border-radius:50%;color:inherit;text-indent:-1000px;white-space:nowrap;overflow:hidden;cursor:pointer}.clr-swatches button:after{content:'';display:block;position:absolute;width:100%;height:100%;left:0;top:0;border-radius:inherit;background-color:currentColor;box-shadow:inset 0 0 0 1px rgba(0,0,0,.1)}input.clr-color{order:1;width:calc(100% - 80px);height:32px;margin:15px 20px 20px auto;padding:0 10px;border:1px solid #ddd;border-radius:16px;color:#444;background-color:#fff;font-family:sans-serif;font-size:14px;text-align:center;box-shadow:none}input.clr-color:focus{outline:0;border:1px solid #1e90ff}.clr-clear,.clr-close{display:none;order:2;height:24px;margin:0 20px 20px;padding:0 20px;border:0;border-radius:12px;color:#fff;background-color:#666;font-family:inherit;font-size:12px;font-weight:400;cursor:pointer}.clr-close{display:block;margin:0 20px 20px auto}.clr-preview{position:relative;width:32px;height:32px;margin:15px 0 20px 20px;border-radius:50%;overflow:hidden}.clr-preview:after,.clr-preview:before{content:'';position:absolute;height:100%;width:100%;left:0;top:0;border:1px solid #fff;border-radius:50%}.clr-preview:after{border:0;background-color:currentColor;box-shadow:inset 0 0 0 1px rgba(0,0,0,.1)}.clr-preview button{position:absolute;width:100%;height:100%;z-index:1;margin:0;padding:0;border:0;border-radius:50%;outline-offset:-2px;background-color:transparent;text-indent:-9999px;cursor:pointer;overflow:hidden}.clr-alpha div,.clr-color,.clr-hue div,.clr-marker{box-sizing:border-box}.clr-field{display:inline-block;position:relative;color:transparent}.clr-field input{margin:0;direction:ltr}.clr-field.clr-rtl input{text-align:right}.clr-field button{position:absolute;width:30px;height:100%;right:0;top:50%;transform:translateY(-50%);margin:0;padding:0;border:0;color:inherit;text-indent:-1000px;white-space:nowrap;overflow:hidden;pointer-events:none}.clr-field.clr-rtl button{right:auto;left:0}.clr-field button:after{content:'';display:block;position:absolute;width:100%;height:100%;left:0;top:0;border-radius:inherit;background-color:currentColor;box-shadow:inset 0 0 1px rgba(0,0,0,.5)}.clr-alpha,.clr-alpha div,.clr-field button,.clr-preview:before,.clr-swatches button{background-image:repeating-linear-gradient(45deg,#aaa 25%,transparent 25%,transparent 75%,#aaa 75%,#aaa),repeating-linear-gradient(45deg,#aaa 25%,#fff 25%,#fff 75%,#aaa 75%,#aaa);background-position:0 0,4px 4px;background-size:8px 8px}.clr-marker:focus{outline:0}.clr-keyboard-nav .clr-alpha input:focus+div,.clr-keyboard-nav .clr-hue input:focus+div,.clr-keyboard-nav .clr-marker:focus,.clr-keyboard-nav .clr-segmented input:focus+label{outline:0;box-shadow:0 0 0 2px #1e90ff,0 0 2px 2px #fff}.clr-picker[data-alpha=false] .clr-alpha{display:none}.clr-picker[data-minimal=true]{padding-top:16px}.clr-picker[data-minimal=true] .clr-alpha,.clr-picker[data-minimal=true] .clr-color,.clr-picker[data-minimal=true] .clr-gradient,.clr-picker[data-minimal=true] .clr-hue,.clr-picker[data-minimal=true] .clr-preview{display:none}.clr-dark{background-color:#444}.clr-dark .clr-segmented{border-color:#777}.clr-dark .clr-swatches button:after{box-shadow:inset 0 0 0 1px rgba(255,255,255,.3)}.clr-dark input.clr-color{color:#fff;border-color:#777;background-color:#555}.clr-dark input.clr-color:focus{border-color:#1e90ff}.clr-dark .clr-preview:after{box-shadow:inset 0 0 0 1px rgba(255,255,255,.5)}.clr-dark .clr-alpha,.clr-dark .clr-alpha div,.clr-dark .clr-preview:before,.clr-dark .clr-swatches button{background-image:repeating-linear-gradient(45deg,#666 25%,transparent 25%,transparent 75%,#888 75%,#888),repeating-linear-gradient(45deg,#888 25%,#444 25%,#444 75%,#888 75%,#888)}.clr-picker.clr-polaroid{border-radius:6px;box-shadow:0 0 5px rgba(0,0,0,.1),0 5px 30px rgba(0,0,0,.2)}.clr-picker.clr-polaroid:before{content:'';display:block;position:absolute;width:16px;height:10px;left:20px;top:-10px;border:solid transparent;border-width:0 8px 10px 8px;border-bottom-color:currentColor;box-sizing:border-box;color:#fff;filter:drop-shadow(0 -4px 3px rgba(0,0,0,.1));pointer-events:none}.clr-picker.clr-polaroid.clr-dark:before{color:#444}.clr-picker.clr-polaroid.clr-left:before{left:auto;right:20px}.clr-picker.clr-polaroid.clr-top:before{top:auto;bottom:-10px;transform:rotateZ(180deg)}.clr-polaroid .clr-gradient{width:calc(100% - 20px);height:120px;margin:10px;border-radius:3px}.clr-polaroid .clr-alpha,.clr-polaroid .clr-hue{width:calc(100% - 30px);height:10px;margin:6px 15px;border-radius:5px}.clr-polaroid .clr-alpha div,.clr-polaroid .clr-hue div{box-shadow:0 0 5px rgba(0,0,0,.2)}.clr-polaroid .clr-format{width:calc(100% - 20px);margin:0 10px 15px}.clr-polaroid .clr-swatches{width:calc(100% - 12px);margin:0 6px}.clr-polaroid .clr-swatches div{padding-bottom:10px}.clr-polaroid .clr-swatches button{width:22px;height:22px}.clr-polaroid input.clr-color{width:calc(100% - 60px);margin:10px 10px 15px auto}.clr-polaroid .clr-clear{margin:0 10px 15px 10px}.clr-polaroid .clr-close{margin:0 10px 15px auto}.clr-polaroid .clr-preview{margin:10px 0 15px 10px}.clr-picker.clr-large{width:275px}.clr-large .clr-gradient{height:150px}.clr-large .clr-swatches button{width:22px;height:22px}.clr-picker.clr-pill{width:380px;padding-left:180px;box-sizing:border-box}.clr-pill .clr-gradient{position:absolute;width:180px;height:100%;left:0;top:0;margin-bottom:0;border-radius:3px 0 0 3px}.clr-pill .clr-hue{margin-top:20px}\",\"fileTypeName\":\"CSS\",\"fileType\":\"text/css\",\"key\":11,\"location\":\"5130 -190\"},\n{\"label\":\"coloris.min.js\",\"color\":\"orange\",\"size\":\"180 170\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"/*!\\n * Copyright (c) 2021 Momo Bassit.\\n * Licensed under the MIT License (MIT)\\n * https://github.com/mdbassit/Coloris\\n */\\n!function(u,d,s,c){var p,f,h,b,i,v,y,g,m,w,l,k,L,E,x,a,n,r=d.createElement(\\\"canvas\\\").getContext(\\\"2d\\\"),A={r:0,g:0,b:0,h:0,s:0,v:0,a:1},S={el:\\\"[data-coloris]\\\",parent:\\\"body\\\",theme:\\\"default\\\",themeMode:\\\"light\\\",rtl:!1,wrap:!0,margin:2,format:\\\"hex\\\",formatToggle:!1,swatches:[],swatchesOnly:!1,alpha:!0,forceAlpha:!1,focusInput:!0,selectInput:!1,inline:!1,defaultColor:\\\"#000000\\\",clearButton:!1,clearLabel:\\\"Clear\\\",closeButton:!1,closeLabel:\\\"Close\\\",onChange:function(){return c},a11y:{open:\\\"Open color picker\\\",close:\\\"Close color picker\\\",clear:\\\"Clear the selected color\\\",marker:\\\"Saturation: {s}. Brightness: {v}.\\\",hueSlider:\\\"Hue slider\\\",alphaSlider:\\\"Opacity slider\\\",input:\\\"Color value field\\\",format:\\\"Color format\\\",swatch:\\\"Color swatch\\\",instruction:\\\"Saturation and brightness selector. Use up, down, left and right arrow keys to select.\\\"}},o={},C=\\\"\\\",T={},B=!1;function M(e){if(\\\"object\\\"==typeof e)for(var t in e)switch(t){case\\\"el\\\":N(e.el),!1!==e.wrap&&j(e.el);break;case\\\"parent\\\":(p=d.querySelector(e.parent))&&(p.appendChild(f),S.parent=e.parent,p===d.body&&(p=c));break;case\\\"themeMode\\\":S.themeMode=e.themeMode,\\\"auto\\\"===e.themeMode&&u.matchMedia&&u.matchMedia(\\\"(prefers-color-scheme: dark)\\\").matches&&(S.themeMode=\\\"dark\\\");case\\\"theme\\\":e.theme&&(S.theme=e.theme),f.className=\\\"clr-picker clr-\\\"+S.theme+\\\" clr-\\\"+S.themeMode,S.inline&&I();break;case\\\"rtl\\\":S.rtl=!!e.rtl,d.querySelectorAll(\\\".clr-field\\\").forEach(function(e){return e.classList.toggle(\\\"clr-rtl\\\",S.rtl)});break;case\\\"margin\\\":e.margin*=1,S.margin=(isNaN(e.margin)?S:e).margin;break;case\\\"wrap\\\":e.el&&e.wrap&&j(e.el);break;case\\\"formatToggle\\\":S.formatToggle=!!e.formatToggle,z(\\\"clr-format\\\").style.display=S.formatToggle?\\\"block\\\":\\\"none\\\",S.formatToggle&&(S.format=\\\"auto\\\");break;case\\\"swatches\\\":Array.isArray(e.swatches)&&function(){var a=[];e.swatches.forEach(function(e,t){a.push('<button type=\\\"button\\\" id=\\\"clr-swatch-'+t+'\\\" aria-labelledby=\\\"clr-swatch-label clr-swatch-'+t+'\\\" style=\\\"color: '+e+';\\\">'+e+\\\"</button>\\\")}),z(\\\"clr-swatches\\\").innerHTML=a.length?\\\"<div>\\\"+a.join(\\\"\\\")+\\\"</div>\\\":\\\"\\\",S.swatches=e.swatches.slice()}();break;case\\\"swatchesOnly\\\":S.swatchesOnly=!!e.swatchesOnly,f.setAttribute(\\\"data-minimal\\\",S.swatchesOnly);break;case\\\"alpha\\\":S.alpha=!!e.alpha,f.setAttribute(\\\"data-alpha\\\",S.alpha);break;case\\\"inline\\\":S.inline=!!e.inline,f.setAttribute(\\\"data-inline\\\",S.inline),S.inline&&(l=e.defaultColor||S.defaultColor,x=q(l),I(),W(l));break;case\\\"clearButton\\\":\\\"object\\\"==typeof e.clearButton&&(e.clearButton.label&&(S.clearLabel=e.clearButton.label,g.innerHTML=S.clearLabel),e.clearButton=e.clearButton.show),S.clearButton=!!e.clearButton,g.style.display=S.clearButton?\\\"block\\\":\\\"none\\\";break;case\\\"clearLabel\\\":S.clearLabel=e.clearLabel,g.innerHTML=S.clearLabel;break;case\\\"closeButton\\\":S.closeButton=!!e.closeButton,S.closeButton?f.insertBefore(m,v):v.appendChild(m);break;case\\\"closeLabel\\\":S.closeLabel=e.closeLabel,m.innerHTML=S.closeLabel;break;case\\\"a11y\\\":var a,l,r=e.a11y,n=!1;if(\\\"object\\\"==typeof r)for(var o in r)r[o]&&S.a11y[o]&&(S.a11y[o]=r[o],n=!0);n&&(a=z(\\\"clr-open-label\\\"),l=z(\\\"clr-swatch-label\\\"),a.innerHTML=S.a11y.open,l.innerHTML=S.a11y.swatch,m.setAttribute(\\\"aria-label\\\",S.a11y.close),g.setAttribute(\\\"aria-label\\\",S.a11y.clear),w.setAttribute(\\\"aria-label\\\",S.a11y.hueSlider),k.setAttribute(\\\"aria-label\\\",S.a11y.alphaSlider),y.setAttribute(\\\"aria-label\\\",S.a11y.input),h.setAttribute(\\\"aria-label\\\",S.a11y.instruction));break;default:S[t]=e[t]}}function H(e,t){\\\"string\\\"==typeof e&&\\\"object\\\"==typeof t&&(o[e]=t,B=!0)}function O(e){delete o[e],0===Object.keys(o).length&&(B=!1,e===C&&D())}function t(l){if(B){var e,r=[\\\"el\\\",\\\"wrap\\\",\\\"rtl\\\",\\\"inline\\\",\\\"defaultColor\\\",\\\"a11y\\\"];for(e in o)if(\\\"break\\\"===function(e){var t=o[e];if(l.matches(e)){for(var a in C=e,T={},r.forEach(function(e){return delete t[e]}),t)T[a]=Array.isArray(S[a])?S[a].slice():S[a];return M(t),\\\"break\\\"}}(e))break}}function D(){0<Object.keys(T).length&&(M(T),C=\\\"\\\",T={})}function N(e){J(d,\\\"click\\\",e,function(e){S.inline||(t(e.target),E=e.target,a=E.value,x=q(a),f.classList.add(\\\"clr-open\\\"),I(),W(a),(S.focusInput||S.selectInput)&&(y.focus({preventScroll:!0}),y.setSelectionRange(E.selectionStart,E.selectionEnd)),S.selectInput&&y.select(),(n||S.swatchesOnly)&&$().shift().focus(),E.dispatchEvent(new Event(\\\"open\\\",{bubbles:!0})))}),J(d,\\\"input\\\",e,function(e){var t=e.target.parentNode;t.classList.contains(\\\"clr-field\\\")&&(t.style.color=e.target.value)})}function I(){var e,t,a,l,r=p,n=u.scrollY,o=f.offsetWidth,c=f.offsetHeight,i={left:!1,top:!1},s={x:0,y:0};r&&(a=u.getComputedStyle(r),e=parseFloat(a.marginTop),l=parseFloat(a.borderTopWidth),(s=r.getBoundingClientRect()).y+=l+n),S.inline||(a=(t=E.getBoundingClientRect()).x,l=n+t.y+t.height+S.margin,r?(a-=s.x,l-=s.y,a+o>r.clientWidth&&(a+=t.width-o,i.left=!0),l+c>r.clientHeight-e&&c+S.margin<=t.top-(s.y-n)&&(l-=t.height+c+2*S.margin,i.top=!0),l+=r.scrollTop):(a+o>d.documentElement.clientWidth&&(a+=t.width-o,i.left=!0),l+c-n>d.documentElement.clientHeight&&c+S.margin<=t.top&&(l=n+t.y-c-S.margin,i.top=!0)),f.classList.toggle(\\\"clr-left\\\",i.left),f.classList.toggle(\\\"clr-top\\\",i.top),f.style.left=a+\\\"px\\\",f.style.top=l+\\\"px\\\",s.x+=f.offsetLeft,s.y+=f.offsetTop),b={width:h.offsetWidth,height:h.offsetHeight,x:h.offsetLeft+s.x,y:h.offsetTop+s.y}}function j(e){d.querySelectorAll(e).forEach(function(e){var t,a,l=e.parentNode;l.classList.contains(\\\"clr-field\\\")||(t=d.createElement(\\\"div\\\"),a=\\\"clr-field\\\",(S.rtl||e.classList.contains(\\\"clr-rtl\\\"))&&(a+=\\\" clr-rtl\\\"),t.innerHTML='<button type=\\\"button\\\" aria-labelledby=\\\"clr-open-label\\\"></button>',l.insertBefore(t,e),t.setAttribute(\\\"class\\\",a),t.style.color=e.value,t.appendChild(e))})}function R(e){var t;E&&!S.inline&&(t=E,e&&(E=c,a!==t.value&&(t.value=a,t.dispatchEvent(new Event(\\\"input\\\",{bubbles:!0})))),setTimeout(function(){a!==t.value&&t.dispatchEvent(new Event(\\\"change\\\",{bubbles:!0}))}),f.classList.remove(\\\"clr-open\\\"),B&&D(),t.dispatchEvent(new Event(\\\"close\\\",{bubbles:!0})),S.focusInput&&t.focus({preventScroll:!0}),E=c)}function W(e){var t=function(e){var t;r.fillStyle=\\\"#000\\\",r.fillStyle=e,(e=/^((rgba)|rgb)[\\\\D]+([\\\\d.]+)[\\\\D]+([\\\\d.]+)[\\\\D]+([\\\\d.]+)[\\\\D]*?([\\\\d.]+|$)/i.exec(r.fillStyle))?(t={r:+e[3],g:+e[4],b:+e[5],a:+e[6]}).a=+t.a.toFixed(2):(e=r.fillStyle.replace(\\\"#\\\",\\\"\\\").match(/.{2}/g).map(function(e){return parseInt(e,16)}),t={r:e[0],g:e[1],b:e[2],a:1});return t}(e),e=function(e){var t=e.r/255,a=e.g/255,l=e.b/255,r=s.max(t,a,l),n=s.min(t,a,l),o=r-n,c=r,i=0,n=0;o&&(r===t&&(i=(a-l)/o),r===a&&(i=2+(l-t)/o),r===l&&(i=4+(t-a)/o),r&&(n=o/r));return{h:(i=s.floor(60*i))<0?i+360:i,s:s.round(100*n),v:s.round(100*c),a:e.a}}(t);P(e.s,e.v),G(t,e),w.value=e.h,f.style.color=\\\"hsl(\\\"+e.h+\\\", 100%, 50%)\\\",l.style.left=e.h/360*100+\\\"%\\\",i.style.left=b.width*e.s/100+\\\"px\\\",i.style.top=b.height-b.height*e.v/100+\\\"px\\\",k.value=100*e.a,L.style.left=100*e.a+\\\"%\\\"}function q(e){e=e.substring(0,3).toLowerCase();return\\\"rgb\\\"===e||\\\"hsl\\\"===e?e:\\\"hex\\\"}function F(e){e=e!==c?e:y.value,E&&(E.value=e,E.dispatchEvent(new Event(\\\"input\\\",{bubbles:!0}))),S.onChange&&S.onChange.call(u,e,E),d.dispatchEvent(new CustomEvent(\\\"coloris:pick\\\",{detail:{color:e,currentEl:E}}))}function Y(e,t){e={h:+w.value,s:e/b.width*100,v:100-t/b.height*100,a:k.value/100},t=function(e){var t=e.s/100,a=e.v/100,l=t*a,r=e.h/60,n=l*(1-s.abs(r%2-1)),o=a-l;l+=o,n+=o;t=s.floor(r)%6,a=[l,n,o,o,n,l][t],r=[n,l,l,n,o,o][t],t=[o,o,n,l,l,n][t];return{r:s.round(255*a),g:s.round(255*r),b:s.round(255*t),a:e.a}}(e);P(e.s,e.v),G(t,e),F()}function P(e,t){var a=S.a11y.marker;e=+e.toFixed(1),t=+t.toFixed(1),a=(a=a.replace(\\\"{s}\\\",e)).replace(\\\"{v}\\\",t),i.setAttribute(\\\"aria-label\\\",a)}function U(e){var t={pageX:((a=e).changedTouches?a.changedTouches[0]:a).pageX,pageY:(a.changedTouches?a.changedTouches[0]:a).pageY},a=t.pageX-b.x,t=t.pageY-b.y;p&&(t+=p.scrollTop),X(a,t),e.preventDefault(),e.stopPropagation()}function X(e,t){e=e<0?0:e>b.width?b.width:e,t=t<0?0:t>b.height?b.height:t,i.style.left=e+\\\"px\\\",i.style.top=t+\\\"px\\\",Y(e,t),i.focus()}function G(e,t){void 0===t&&(t={});var a,l,r=S.format;for(a in e=void 0===e?{}:e)A[a]=e[a];for(l in t)A[l]=t[l];var n,o=function(e){var t=e.r.toString(16),a=e.g.toString(16),l=e.b.toString(16),r=\\\"\\\";e.r<16&&(t=\\\"0\\\"+t);e.g<16&&(a=\\\"0\\\"+a);e.b<16&&(l=\\\"0\\\"+l);S.alpha&&(e.a<1||S.forceAlpha)&&(e=255*e.a|0,r=e.toString(16),e<16&&(r=\\\"0\\\"+r));return\\\"#\\\"+t+a+l+r}(A),c=o.substring(0,7);switch(i.style.color=c,L.parentNode.style.color=c,L.style.color=o,v.style.color=o,h.style.display=\\\"none\\\",h.offsetHeight,h.style.display=\\\"\\\",L.nextElementSibling.style.display=\\\"none\\\",L.nextElementSibling.offsetHeight,L.nextElementSibling.style.display=\\\"\\\",\\\"mixed\\\"===r?r=1===A.a?\\\"hex\\\":\\\"rgb\\\":\\\"auto\\\"===r&&(r=x),r){case\\\"hex\\\":y.value=o;break;case\\\"rgb\\\":y.value=(n=A,!S.alpha||1===n.a&&!S.forceAlpha?\\\"rgb(\\\"+n.r+\\\", \\\"+n.g+\\\", \\\"+n.b+\\\")\\\":\\\"rgba(\\\"+n.r+\\\", \\\"+n.g+\\\", \\\"+n.b+\\\", \\\"+n.a+\\\")\\\");break;case\\\"hsl\\\":y.value=(n=function(e){var t,a=e.v/100,l=a*(1-e.s/100/2);0<l&&l<1&&(t=s.round((a-l)/s.min(l,1-l)*100));return{h:e.h,s:t||0,l:s.round(100*l),a:e.a}}(A),!S.alpha||1===n.a&&!S.forceAlpha?\\\"hsl(\\\"+n.h+\\\", \\\"+n.s+\\\"%, \\\"+n.l+\\\"%)\\\":\\\"hsla(\\\"+n.h+\\\", \\\"+n.s+\\\"%, \\\"+n.l+\\\"%, \\\"+n.a+\\\")\\\")}d.querySelector('.clr-format [value=\\\"'+r+'\\\"]').checked=!0}function e(){var e=+w.value,t=+i.style.left.replace(\\\"px\\\",\\\"\\\"),a=+i.style.top.replace(\\\"px\\\",\\\"\\\");f.style.color=\\\"hsl(\\\"+e+\\\", 100%, 50%)\\\",l.style.left=e/360*100+\\\"%\\\",Y(t,a)}function K(){var e=k.value/100;L.style.left=100*e+\\\"%\\\",G({a:e}),F()}function $(){return Array.from(f.querySelectorAll(\\\"input, button\\\")).filter(function(e){return!!e.offsetWidth})}function z(e){return d.getElementById(e)}function J(e,t,a,l){var r=Element.prototype.matches||Element.prototype.msMatchesSelector;\\\"string\\\"==typeof a?e.addEventListener(t,function(e){r.call(e.target,a)&&l.call(e.target,e)}):(l=a,e.addEventListener(t,l))}function Q(e,t){t=t!==c?t:[],\\\"loading\\\"!==d.readyState?e.apply(void 0,t):d.addEventListener(\\\"DOMContentLoaded\\\",function(){e.apply(void 0,t)})}NodeList!==c&&NodeList.prototype&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=Array.prototype.forEach),u.Coloris=function(){var r={set:M,wrap:j,close:R,setInstance:H,removeInstance:O,updatePosition:I};function e(e){Q(function(){e&&(\\\"string\\\"==typeof e?N:M)(e)})}for(var t in r)!function(l){e[l]=function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];Q(r[l],t)}}(t);return e}(),Q(function(){p=c,(f=d.createElement(\\\"div\\\")).setAttribute(\\\"id\\\",\\\"clr-picker\\\"),f.className=\\\"clr-picker\\\",f.innerHTML='<input id=\\\"clr-color-value\\\" name=\\\"clr-color-value\\\" class=\\\"clr-color\\\" type=\\\"text\\\" value=\\\"\\\" spellcheck=\\\"false\\\" aria-label=\\\"'+S.a11y.input+'\\\"><div id=\\\"clr-color-area\\\" class=\\\"clr-gradient\\\" role=\\\"application\\\" aria-label=\\\"'+S.a11y.instruction+'\\\"><div id=\\\"clr-color-marker\\\" class=\\\"clr-marker\\\" tabindex=\\\"0\\\"></div></div><div class=\\\"clr-hue\\\"><input id=\\\"clr-hue-slider\\\" name=\\\"clr-hue-slider\\\" type=\\\"range\\\" min=\\\"0\\\" max=\\\"360\\\" step=\\\"1\\\" aria-label=\\\"'+S.a11y.hueSlider+'\\\"><div id=\\\"clr-hue-marker\\\"></div></div><div class=\\\"clr-alpha\\\"><input id=\\\"clr-alpha-slider\\\" name=\\\"clr-alpha-slider\\\" type=\\\"range\\\" min=\\\"0\\\" max=\\\"100\\\" step=\\\"1\\\" aria-label=\\\"'+S.a11y.alphaSlider+'\\\"><div id=\\\"clr-alpha-marker\\\"></div><span></span></div><div id=\\\"clr-format\\\" class=\\\"clr-format\\\"><fieldset class=\\\"clr-segmented\\\"><legend>'+S.a11y.format+'</legend><input id=\\\"clr-f1\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"hex\\\"><label for=\\\"clr-f1\\\">Hex</label><input id=\\\"clr-f2\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"rgb\\\"><label for=\\\"clr-f2\\\">RGB</label><input id=\\\"clr-f3\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"hsl\\\"><label for=\\\"clr-f3\\\">HSL</label><span></span></fieldset></div><div id=\\\"clr-swatches\\\" class=\\\"clr-swatches\\\"></div><button type=\\\"button\\\" id=\\\"clr-clear\\\" class=\\\"clr-clear\\\" aria-label=\\\"'+S.a11y.clear+'\\\">'+S.clearLabel+'</button><div id=\\\"clr-color-preview\\\" class=\\\"clr-preview\\\"><button type=\\\"button\\\" id=\\\"clr-close\\\" class=\\\"clr-close\\\" aria-label=\\\"'+S.a11y.close+'\\\">'+S.closeLabel+'</button></div><span id=\\\"clr-open-label\\\" hidden>'+S.a11y.open+'</span><span id=\\\"clr-swatch-label\\\" hidden>'+S.a11y.swatch+\\\"</span>\\\",d.body.appendChild(f),h=z(\\\"clr-color-area\\\"),i=z(\\\"clr-color-marker\\\"),g=z(\\\"clr-clear\\\"),m=z(\\\"clr-close\\\"),v=z(\\\"clr-color-preview\\\"),y=z(\\\"clr-color-value\\\"),w=z(\\\"clr-hue-slider\\\"),l=z(\\\"clr-hue-marker\\\"),k=z(\\\"clr-alpha-slider\\\"),L=z(\\\"clr-alpha-marker\\\"),N(S.el),j(S.el),J(f,\\\"mousedown\\\",function(e){f.classList.remove(\\\"clr-keyboard-nav\\\"),e.stopPropagation()}),J(h,\\\"mousedown\\\",function(e){J(d,\\\"mousemove\\\",U)}),J(h,\\\"touchstart\\\",function(e){d.addEventListener(\\\"touchmove\\\",U,{passive:!1})}),J(i,\\\"mousedown\\\",function(e){J(d,\\\"mousemove\\\",U)}),J(i,\\\"touchstart\\\",function(e){d.addEventListener(\\\"touchmove\\\",U,{passive:!1})}),J(y,\\\"change\\\",function(e){var t=y.value;(E||S.inline)&&F(\\\"\\\"===t?t:W(t))}),J(g,\\\"click\\\",function(e){F(\\\"\\\"),R()}),J(m,\\\"click\\\",function(e){F(),R()}),J(z(\\\"clr-format\\\"),\\\"click\\\",\\\".clr-format input\\\",function(e){x=e.target.value,G(),F()}),J(f,\\\"click\\\",\\\".clr-swatches button\\\",function(e){W(e.target.textContent),F(),S.swatchesOnly&&R()}),J(d,\\\"mouseup\\\",function(e){d.removeEventListener(\\\"mousemove\\\",U)}),J(d,\\\"touchend\\\",function(e){d.removeEventListener(\\\"touchmove\\\",U)}),J(d,\\\"mousedown\\\",function(e){n=!1,f.classList.remove(\\\"clr-keyboard-nav\\\"),R()}),J(d,\\\"keydown\\\",function(e){var t,a=e.key,l=e.target,r=e.shiftKey;\\\"Escape\\\"===a?R(!0):[\\\"Tab\\\",\\\"ArrowUp\\\",\\\"ArrowDown\\\",\\\"ArrowLeft\\\",\\\"ArrowRight\\\"].includes(a)&&(n=!0,f.classList.add(\\\"clr-keyboard-nav\\\")),\\\"Tab\\\"===a&&l.matches(\\\".clr-picker *\\\")&&(a=(t=$()).shift(),t=t.pop(),r&&l===a?(t.focus(),e.preventDefault()):r||l!==t||(a.focus(),e.preventDefault()))}),J(d,\\\"click\\\",\\\".clr-field button\\\",function(e){B&&D(),e.target.nextElementSibling.dispatchEvent(new Event(\\\"click\\\",{bubbles:!0}))}),J(i,\\\"keydown\\\",function(e){var t={ArrowUp:[0,-1],ArrowDown:[0,1],ArrowLeft:[-1,0],ArrowRight:[1,0]};Object.keys(t).includes(e.key)&&(!function(e,t){X(+i.style.left.replace(\\\"px\\\",\\\"\\\")+e,+i.style.top.replace(\\\"px\\\",\\\"\\\")+t)}.apply(void 0,t[e.key]),e.preventDefault())}),J(h,\\\"click\\\",U),J(w,\\\"input\\\",e),J(k,\\\"input\\\",K)})}(window,document,Math);\",\"fileTypeName\":\"JavaScript\",\"fileType\":\"text/javascript\",\"key\":14,\"location\":\"5380 -190\"},\n{\"label\":\"App Demo Page\",\"color\":\"lightsalmon\",\"size\":\"180 170\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<html>\\n  <head>\\n    <!--link rel=\\\"stylesheet\\\" href=\\\"coloris.min.css\\\" />\\n    <script src=\\\"coloris.min.js\\\"></script-->\\n    \\n    <style>\\n      /* This is the readable content of coloris.min.css */\\n      \\n      .clr-picker {\\n        display: none;\\n        flex-wrap: wrap;\\n        position: absolute;\\n        width: 200px;\\n        z-index: 1000;\\n        border-radius: 10px;\\n        background-color: #fff;\\n        justify-content: flex-end;\\n        direction: ltr;\\n        box-shadow: 0 0 5px rgba(0,0,0,.05), 0 5px 20px rgba(0,0,0,.1);\\n        -moz-user-select: none;\\n        -webkit-user-select: none;\\n        user-select: none;\\n      }\\n      \\n      .clr-picker.clr-open,\\n      .clr-picker[data-inline=\\\"true\\\"] {\\n        display: flex;\\n      }\\n      \\n      .clr-picker[data-inline=\\\"true\\\"] {\\n        position: relative;\\n      }\\n      \\n      .clr-gradient {\\n        position: relative;\\n        width: 100%;\\n        height: 100px;\\n        margin-bottom: 15px;\\n        border-radius: 3px 3px 0 0;\\n        background-image: linear-gradient(rgba(0,0,0,0), #000), linear-gradient(90deg, #fff, currentColor);\\n        cursor: pointer;\\n      }\\n      \\n      .clr-marker {\\n        position: absolute;\\n        width: 12px;\\n        height: 12px;\\n        margin: -6px 0 0 -6px;\\n        border: 1px solid #fff;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-webkit-slider-runnable-track {\\n        width: 100%;\\n        height: 16px;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-webkit-slider-thumb {\\n        width: 16px;\\n        height: 16px;\\n        -webkit-appearance: none;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-moz-range-track {\\n        width: 100%;\\n        height: 16px;\\n        border: 0;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-moz-range-thumb {\\n        width: 16px;\\n        height: 16px;\\n        border: 0;\\n      }\\n      \\n      .clr-hue {\\n        background-image: linear-gradient(to right, #f00 0%, #ff0 16.66%, #0f0 33.33%, #0ff 50%, #00f 66.66%, #f0f 83.33%, #f00 100%);\\n      }\\n      \\n      .clr-hue,\\n      .clr-alpha {\\n        position: relative;\\n        width: calc(100% - 40px);\\n        height: 8px;\\n        margin: 5px 20px;\\n        border-radius: 4px;\\n      }\\n      \\n      .clr-alpha span {\\n        display: block;\\n        height: 100%;\\n        width: 100%;\\n        border-radius: inherit;\\n        background-image: linear-gradient(90deg, rgba(0,0,0,0), currentColor);\\n      }\\n      \\n      .clr-hue input,\\n      .clr-alpha input {\\n        position: absolute;\\n        width: calc(100% + 32px);\\n        height: 16px;\\n        left: -16px;\\n        top: -4px;\\n        margin: 0;\\n        background-color: transparent;\\n        opacity: 0;\\n        cursor: pointer;\\n        appearance: none;\\n        -webkit-appearance: none;\\n      }\\n      \\n      .clr-hue div,\\n      .clr-alpha div {\\n        position: absolute;\\n        width: 16px;\\n        height: 16px;\\n        left: 0;\\n        top: 50%;\\n        margin-left: -8px;\\n        transform: translateY(-50%);\\n        border: 2px solid #fff;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n        box-shadow: 0 0 1px #888;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-alpha div:before {\\n        content: '';\\n        position: absolute;\\n        height: 100%;\\n        width: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n      }\\n      \\n      .clr-format {\\n        display: none;\\n        order: 1;\\n        width: calc(100% - 40px);\\n        margin: 0 20px 20px;\\n      }\\n      \\n      .clr-segmented {\\n        display: flex;\\n        position: relative;\\n        width: 100%;\\n        margin: 0;\\n        padding: 0;\\n        border: 1px solid #ddd;\\n        border-radius: 15px;\\n        box-sizing: border-box;\\n        color: #999;\\n        font-size: 12px;\\n      }\\n      \\n      .clr-segmented input,\\n      .clr-segmented legend {\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        left: 0;\\n        top: 0;\\n        opacity: 0;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-segmented label {\\n        flex-grow: 1;\\n        margin: 0;\\n        padding: 4px 0;\\n        font-size: inherit;\\n        font-weight: normal;\\n        line-height: initial;\\n        text-align: center;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-segmented label:first-of-type {\\n        border-radius: 10px 0 0 10px;\\n      }\\n      \\n      .clr-segmented label:last-of-type {\\n        border-radius: 0 10px 10px 0;\\n      }\\n      \\n      .clr-segmented input:checked + label {\\n        color: #fff;\\n        background-color: #666;\\n      }\\n      \\n      .clr-swatches {\\n        order: 2;\\n        width: calc(100% - 32px);\\n        margin: 0 16px;\\n      }\\n      \\n      .clr-swatches div {\\n        display: flex;\\n        flex-wrap: wrap;\\n        padding-bottom: 12px;\\n        justify-content: center;\\n      }\\n      \\n      .clr-swatches button {\\n        position: relative;\\n        width: 20px;\\n        height: 20px;\\n        margin: 0 4px 6px 4px;\\n        padding: 0;\\n        border: 0;\\n        border-radius: 50%;\\n        color: inherit;\\n        text-indent: -1000px;\\n        white-space: nowrap;\\n        overflow: hidden;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-swatches button:after {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: inherit;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);\\n      }\\n      \\n      input.clr-color {\\n        order: 1;\\n        width: calc(100% - 80px);\\n        height: 32px;\\n        margin: 15px 20px 20px auto;\\n        padding: 0 10px;\\n        border: 1px solid #ddd;\\n        border-radius: 16px;\\n        color: #444;\\n        background-color: #fff;\\n        font-family: sans-serif;\\n        font-size: 14px;\\n        text-align: center;\\n        box-shadow: none;\\n      }\\n      \\n      input.clr-color:focus {\\n        outline: none;\\n        border: 1px solid #1e90ff;\\n      }\\n      \\n      .clr-close,\\n      .clr-clear {\\n        display: none;\\n        order: 2;\\n        height: 24px;\\n        margin: 0 20px 20px;\\n        padding: 0 20px;\\n        border: 0;\\n        border-radius: 12px;\\n        color: #fff;\\n        background-color: #666;\\n        font-family: inherit;\\n        font-size: 12px;\\n        font-weight: 400;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-close {\\n        display: block;\\n        margin: 0 20px 20px auto;\\n      }\\n      \\n      .clr-preview {\\n        position: relative;\\n        width: 32px;\\n        height: 32px;\\n        margin: 15px 0 20px 20px;\\n        border-radius: 50%;\\n        overflow: hidden;\\n      }\\n      \\n      .clr-preview:before,\\n      .clr-preview:after {\\n        content: '';\\n        position: absolute;\\n        height: 100%;\\n        width: 100%;\\n        left: 0;\\n        top: 0;\\n        border: 1px solid #fff;\\n        border-radius: 50%;\\n      }\\n      \\n      .clr-preview:after {\\n        border: 0;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);\\n      }\\n      \\n      .clr-preview button {\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        z-index: 1;\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        border-radius: 50%;\\n        outline-offset: -2px;\\n        background-color: transparent;\\n        text-indent: -9999px;\\n        cursor: pointer;\\n        overflow: hidden;\\n      }\\n      \\n      .clr-marker,\\n      .clr-hue div,\\n      .clr-alpha div,\\n      .clr-color {\\n        box-sizing: border-box;\\n      }\\n      \\n      .clr-field {\\n        display: inline-block;\\n        position: relative;\\n        color: transparent;\\n      }\\n      \\n      .clr-field input {\\n        margin: 0;\\n        direction: ltr;\\n      }\\n      \\n      .clr-field.clr-rtl input {\\n        text-align: right;\\n      }\\n      \\n      .clr-field button {\\n        position: absolute;\\n        width: 30px;\\n        height: 100%;\\n        right: 0;\\n        top: 50%;\\n        transform: translateY(-50%);\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        color: inherit;\\n        text-indent: -1000px;\\n        white-space: nowrap;\\n        overflow: hidden;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-field.clr-rtl button {\\n        right: auto;\\n        left: 0;\\n      }\\n      \\n      .clr-field button:after {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: inherit;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 1px rgba(0,0,0,.5);\\n      }\\n      \\n      .clr-alpha,\\n      .clr-alpha div,\\n      .clr-swatches button,\\n      .clr-preview:before,\\n      .clr-field button {\\n        background-image: repeating-linear-gradient(45deg, #aaa 25%, transparent 25%, transparent 75%, #aaa 75%, #aaa), repeating-linear-gradient(45deg, #aaa 25%, #fff 25%, #fff 75%, #aaa 75%, #aaa);\\n        background-position: 0 0, 4px 4px;\\n        background-size: 8px 8px;\\n      }\\n      \\n      .clr-marker:focus {\\n        outline: none;\\n      }\\n      \\n      .clr-keyboard-nav .clr-marker:focus,\\n      .clr-keyboard-nav .clr-hue input:focus + div,\\n      .clr-keyboard-nav .clr-alpha input:focus + div,\\n      .clr-keyboard-nav .clr-segmented input:focus + label {\\n        outline: none;\\n        box-shadow: 0 0 0 2px #1e90ff, 0 0 2px 2px #fff;\\n      }\\n      \\n      .clr-picker[data-alpha=\\\"false\\\"] .clr-alpha {\\n        display: none;\\n      }\\n      \\n      .clr-picker[data-minimal=\\\"true\\\"] {\\n        padding-top: 16px;\\n      }\\n      \\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-gradient,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-hue,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-alpha,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-color,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-preview {\\n        display: none;\\n      }\\n      \\n      /** Dark theme **/\\n      \\n      .clr-dark {\\n        background-color: #444;\\n      }\\n      \\n      .clr-dark .clr-segmented {\\n        border-color: #777;\\n      }\\n      \\n      .clr-dark .clr-swatches button:after {\\n        box-shadow: inset 0 0 0 1px rgba(255,255,255,.3);\\n      }\\n      \\n      .clr-dark input.clr-color {\\n        color: #fff;\\n        border-color: #777;\\n        background-color: #555;\\n      }\\n      \\n      .clr-dark input.clr-color:focus {\\n        border-color: #1e90ff;\\n      }\\n      \\n      .clr-dark .clr-preview:after {\\n        box-shadow: inset 0 0 0 1px rgba(255,255,255,.5);\\n      }\\n      \\n      .clr-dark .clr-alpha,\\n      .clr-dark .clr-alpha div,\\n      .clr-dark .clr-swatches button,\\n      .clr-dark .clr-preview:before {\\n        background-image: repeating-linear-gradient(45deg, #666 25%, transparent 25%, transparent 75%, #888 75%, #888), repeating-linear-gradient(45deg, #888 25%, #444 25%, #444 75%, #888 75%, #888);\\n      }\\n      \\n      /** Polaroid theme **/\\n      \\n      .clr-picker.clr-polaroid {\\n        border-radius: 6px;\\n        box-shadow: 0 0 5px rgba(0,0,0,.1), 0 5px 30px rgba(0,0,0,.2);\\n      }\\n      \\n      .clr-picker.clr-polaroid:before {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 16px;\\n        height: 10px;\\n        left: 20px;\\n        top: -10px;\\n        border: solid transparent;\\n        border-width: 0 8px 10px 8px;\\n        border-bottom-color: currentColor;\\n        box-sizing: border-box;\\n        color: #fff;\\n        filter: drop-shadow(0 -4px 3px rgba(0,0,0,.1));\\n        pointer-events: none;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-dark:before {\\n        color: #444;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-left:before {\\n        left: auto;\\n        right: 20px;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-top:before {\\n        top: auto;\\n        bottom: -10px;\\n        transform: rotateZ(180deg);\\n      }\\n      \\n      .clr-polaroid .clr-gradient {\\n        width: calc(100% - 20px);\\n        height: 120px;\\n        margin: 10px;\\n        border-radius: 3px;\\n      }\\n      \\n      .clr-polaroid .clr-hue,\\n      .clr-polaroid .clr-alpha {\\n        width: calc(100% - 30px);\\n        height: 10px;\\n        margin: 6px 15px;\\n        border-radius: 5px;\\n      }\\n      \\n      .clr-polaroid .clr-hue div,\\n      .clr-polaroid .clr-alpha div {\\n        box-shadow: 0 0 5px rgba(0,0,0,.2);\\n      }\\n      \\n      .clr-polaroid .clr-format {\\n        width: calc(100% - 20px);\\n        margin: 0 10px 15px;\\n      }\\n      \\n      .clr-polaroid .clr-swatches {\\n        width: calc(100% - 12px);\\n        margin: 0 6px;\\n      }\\n      .clr-polaroid .clr-swatches div {\\n        padding-bottom: 10px;\\n      }\\n      \\n      .clr-polaroid .clr-swatches button {\\n        width: 22px;\\n        height: 22px;\\n      }\\n      \\n      .clr-polaroid input.clr-color {\\n        width: calc(100% - 60px);\\n        margin: 10px 10px 15px auto;\\n      }\\n      \\n      .clr-polaroid .clr-clear {\\n        margin: 0 10px 15px 10px;\\n      }\\n      \\n      .clr-polaroid .clr-close {\\n        margin: 0 10px 15px auto;\\n      }\\n      \\n      .clr-polaroid .clr-preview {\\n        margin: 10px 0 15px 10px;\\n      }\\n      \\n      /** Large theme **/\\n      \\n      .clr-picker.clr-large {\\n        width: 275px;\\n      }\\n      \\n      .clr-large .clr-gradient {\\n        height: 150px;\\n      }\\n      \\n      .clr-large .clr-swatches button {\\n        width: 22px;\\n        height: 22px;\\n      }\\n      \\n      /** Pill (horizontal) theme **/\\n      \\n      .clr-picker.clr-pill {\\n        width: 380px;\\n        padding-left: 180px;\\n        box-sizing: border-box;\\n      }\\n      \\n      .clr-pill .clr-gradient {\\n        position: absolute;\\n        width: 180px;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        margin-bottom: 0;\\n        border-radius: 3px 0 0 3px;\\n      }\\n      \\n      .clr-pill .clr-hue {\\n        margin-top: 20px;\\n      }\\n    </style>\\n    \\n    <!-- Example code -->\\n    <style type=\\\"text/css\\\">\\n    @import url(https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap);\\n\\n    body {\\n      height: 120vh;\\n      margin: 30px;\\n      color: #444;\\n      background-color: #fff;\\n      font-family: 'Lato', sans-serif;\\n    }\\n\\n    h1 {\\n      margin-bottom: 1.5em;\\n    }\\n\\n    input {\\n      width: 150px;\\n      height: 32px;\\n      padding: 0 10px;\\n      border: 1px solid #ccc;\\n      border-radius: 5px;\\n      font-family: inherit;\\n      font-size: inherit;\\n      font-weight: inherit;\\n      box-sizing: border-box;\\n    }\\n      \\n    .examples {\\n      display: flex;\\n      flex-wrap: wrap;\\n    }\\n\\n    .example {\\n      flex-shrink: 0;\\n      width: 300px;\\n      margin-bottom: 30px;\\n    }\\n\\n    .square .clr-field button,\\n    .circle .clr-field button {\\n      width: 22px;\\n      height: 22px;\\n      left: 5px;\\n      right: auto;\\n      border-radius: 5px;\\n    }\\n\\n    .square .clr-field input,\\n    .circle .clr-field input {\\n      padding-left: 36px;\\n    }\\n\\n    .circle .clr-field button {\\n      border-radius: 50%;\\n    }\\n\\n    .full .clr-field button {\\n      width: 100%;\\n      height: 100%;\\n      border-radius: 5px;\\n    }\\n\\n    </style>\\n  </head>\\n<body onload=\\\"onLoad()\\\">\\n  <script>\\n    /* This is the readable content of coloris.min.js */\\n    \\n    /*!\\n     * Copyright (c) 2021 Momo Bassit.\\n     * Licensed under the MIT License (MIT)\\n     * https://github.com/mdbassit/Coloris\\n     */\\n    \\n    (function (window, document, Math, undefined) {\\n      var ctx = document.createElement('canvas').getContext('2d');\\n      var currentColor = { r: 0, g: 0, b: 0, h: 0, s: 0, v: 0, a: 1 };\\n      var container, picker, colorArea, colorAreaDims, colorMarker, colorPreview, colorValue, clearButton, closeButton,\\n      hueSlider, hueMarker, alphaSlider, alphaMarker, currentEl, currentFormat, oldColor, keyboardNav;\\n    \\n      // Default settings\\n      var settings = {\\n        el: '[data-coloris]',\\n        parent: 'body',\\n        theme: 'default',\\n        themeMode: 'light',\\n        rtl: false,\\n        wrap: true,\\n        margin: 2,\\n        format: 'hex',\\n        formatToggle: false,\\n        swatches: [],\\n        swatchesOnly: false,\\n        alpha: true,\\n        forceAlpha: false,\\n        focusInput: true,\\n        selectInput: false,\\n        inline: false,\\n        defaultColor: '#000000',\\n        clearButton: false,\\n        clearLabel: 'Clear',\\n        closeButton: false,\\n        closeLabel: 'Close',\\n        onChange: function onChange() {return undefined;},\\n        a11y: {\\n          open: 'Open color picker',\\n          close: 'Close color picker',\\n          clear: 'Clear the selected color',\\n          marker: 'Saturation: {s}. Brightness: {v}.',\\n          hueSlider: 'Hue slider',\\n          alphaSlider: 'Opacity slider',\\n          input: 'Color value field',\\n          format: 'Color format',\\n          swatch: 'Color swatch',\\n          instruction: 'Saturation and brightness selector. Use up, down, left and right arrow keys to select.' } };\\n    \\n    \\n    \\n      // Virtual instances cache\\n      var instances = {};\\n      var currentInstanceId = '';\\n      var defaultInstance = {};\\n      var hasInstance = false;\\n    \\n      /**\\n       * Configure the color picker.\\n       * @param {object} options Configuration options.\\n       */\\n      function configure(options) {\\n        if (typeof options !== 'object') {\\n          return;\\n        }\\n    \\n        for (var key in options) {\\n          switch (key) {\\n            case 'el':\\n              bindFields(options.el);\\n              if (options.wrap !== false) {\\n                wrapFields(options.el);\\n              }\\n              break;\\n            case 'parent':\\n              container = document.querySelector(options.parent);\\n              if (container) {\\n                container.appendChild(picker);\\n                settings.parent = options.parent;\\n    \\n                // document.body is special\\n                if (container === document.body) {\\n                  container = undefined;\\n                }\\n              }\\n              break;\\n            case 'themeMode':\\n              settings.themeMode = options.themeMode;\\n              if (options.themeMode === 'auto' && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\\n                settings.themeMode = 'dark';\\n              }\\n            // The lack of a break statement is intentional\\n            case 'theme':\\n              if (options.theme) {\\n                settings.theme = options.theme;\\n              }\\n    \\n              // Set the theme and color scheme\\n              picker.className = \\\"clr-picker clr-\\\" + settings.theme + \\\" clr-\\\" + settings.themeMode;\\n    \\n              // Update the color picker's position if inline mode is in use\\n              if (settings.inline) {\\n                updatePickerPosition();\\n              }\\n              break;\\n            case 'rtl':\\n              settings.rtl = !!options.rtl;\\n              document.querySelectorAll('.clr-field').forEach(function (field) {return field.classList.toggle('clr-rtl', settings.rtl);});\\n              break;\\n            case 'margin':\\n              options.margin *= 1;\\n              settings.margin = !isNaN(options.margin) ? options.margin : settings.margin;\\n              break;\\n            case 'wrap':\\n              if (options.el && options.wrap) {\\n                wrapFields(options.el);\\n              }\\n              break;\\n            case 'formatToggle':\\n              settings.formatToggle = !!options.formatToggle;\\n              getEl('clr-format').style.display = settings.formatToggle ? 'block' : 'none';\\n              if (settings.formatToggle) {\\n                settings.format = 'auto';\\n              }\\n              break;\\n            case 'swatches':\\n              if (Array.isArray(options.swatches)) {(function () {\\n                  var swatches = [];\\n    \\n                  options.swatches.forEach(function (swatch, i) {\\n                    swatches.push(\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-swatch-\\\" + i + \\\"\\\\\\\" aria-labelledby=\\\\\\\"clr-swatch-label clr-swatch-\\\" + i + \\\"\\\\\\\" style=\\\\\\\"color: \\\" + swatch + \\\";\\\\\\\">\\\" + swatch + \\\"</button>\\\");\\n                  });\\n    \\n                  getEl('clr-swatches').innerHTML = swatches.length ? \\\"<div>\\\" + swatches.join('') + \\\"</div>\\\" : '';\\n                  settings.swatches = options.swatches.slice();})();\\n              }\\n              break;\\n            case 'swatchesOnly':\\n              settings.swatchesOnly = !!options.swatchesOnly;\\n              picker.setAttribute('data-minimal', settings.swatchesOnly);\\n              break;\\n            case 'alpha':\\n              settings.alpha = !!options.alpha;\\n              picker.setAttribute('data-alpha', settings.alpha);\\n              break;\\n            case 'inline':\\n              settings.inline = !!options.inline;\\n              picker.setAttribute('data-inline', settings.inline);\\n    \\n              if (settings.inline) {\\n                var defaultColor = options.defaultColor || settings.defaultColor;\\n    \\n                currentFormat = getColorFormatFromStr(defaultColor);\\n                updatePickerPosition();\\n                setColorFromStr(defaultColor);\\n              }\\n              break;\\n            case 'clearButton':\\n              // Backward compatibility\\n              if (typeof options.clearButton === 'object') {\\n                if (options.clearButton.label) {\\n                  settings.clearLabel = options.clearButton.label;\\n                  clearButton.innerHTML = settings.clearLabel;\\n                }\\n    \\n                options.clearButton = options.clearButton.show;\\n              }\\n    \\n              settings.clearButton = !!options.clearButton;\\n              clearButton.style.display = settings.clearButton ? 'block' : 'none';\\n              break;\\n            case 'clearLabel':\\n              settings.clearLabel = options.clearLabel;\\n              clearButton.innerHTML = settings.clearLabel;\\n              break;\\n            case 'closeButton':\\n              settings.closeButton = !!options.closeButton;\\n    \\n              if (settings.closeButton) {\\n                picker.insertBefore(closeButton, colorPreview);\\n              } else {\\n                colorPreview.appendChild(closeButton);\\n              }\\n    \\n              break;\\n            case 'closeLabel':\\n              settings.closeLabel = options.closeLabel;\\n              closeButton.innerHTML = settings.closeLabel;\\n              break;\\n            case 'a11y':\\n              var labels = options.a11y;\\n              var update = false;\\n    \\n              if (typeof labels === 'object') {\\n                for (var label in labels) {\\n                  if (labels[label] && settings.a11y[label]) {\\n                    settings.a11y[label] = labels[label];\\n                    update = true;\\n                  }\\n                }\\n              }\\n    \\n              if (update) {\\n                var openLabel = getEl('clr-open-label');\\n                var swatchLabel = getEl('clr-swatch-label');\\n    \\n                openLabel.innerHTML = settings.a11y.open;\\n                swatchLabel.innerHTML = settings.a11y.swatch;\\n                closeButton.setAttribute('aria-label', settings.a11y.close);\\n                clearButton.setAttribute('aria-label', settings.a11y.clear);\\n                hueSlider.setAttribute('aria-label', settings.a11y.hueSlider);\\n                alphaSlider.setAttribute('aria-label', settings.a11y.alphaSlider);\\n                colorValue.setAttribute('aria-label', settings.a11y.input);\\n                colorArea.setAttribute('aria-label', settings.a11y.instruction);\\n              }\\n              break;\\n            default:\\n              settings[key] = options[key];}\\n    \\n        }\\n      }\\n    \\n      /**\\n       * Add or update a virtual instance.\\n       * @param {String} selector The CSS selector of the elements to which the instance is attached.\\n       * @param {Object} options Per-instance options to apply.\\n       */\\n      function setVirtualInstance(selector, options) {\\n        if (typeof selector === 'string' && typeof options === 'object') {\\n          instances[selector] = options;\\n          hasInstance = true;\\n        }\\n      }\\n    \\n      /**\\n       * Remove a virtual instance.\\n       * @param {String} selector The CSS selector of the elements to which the instance is attached.\\n       */\\n      function removeVirtualInstance(selector) {\\n        delete instances[selector];\\n    \\n        if (Object.keys(instances).length === 0) {\\n          hasInstance = false;\\n    \\n          if (selector === currentInstanceId) {\\n            resetVirtualInstance();\\n          }\\n        }\\n      }\\n    \\n      /**\\n       * Attach a virtual instance to an element if it matches a selector.\\n       * @param {Object} element Target element that will receive a virtual instance if applicable.\\n       */\\n      function attachVirtualInstance(element) {\\n        if (hasInstance) {\\n          // These options can only be set globally, not per instance\\n          var unsupportedOptions = ['el', 'wrap', 'rtl', 'inline', 'defaultColor', 'a11y'];var _loop = function _loop(\\n    \\n          selector) {\\n            var options = instances[selector];\\n    \\n            // If the element matches an instance's CSS selector\\n            if (element.matches(selector)) {\\n              currentInstanceId = selector;\\n              defaultInstance = {};\\n    \\n              // Delete unsupported options\\n              unsupportedOptions.forEach(function (option) {return delete options[option];});\\n    \\n              // Back up the default options so we can restore them later\\n              for (var option in options) {\\n                defaultInstance[option] = Array.isArray(settings[option]) ? settings[option].slice() : settings[option];\\n              }\\n    \\n              // Set the instance's options\\n              configure(options);\\n              return \\\"break\\\";\\n            }};for (var selector in instances) {var _ret = _loop(selector);if (_ret === \\\"break\\\") break;\\n          }\\n        }\\n      }\\n    \\n      /**\\n       * Revert any per-instance options that were previously applied.\\n       */\\n      function resetVirtualInstance() {\\n        if (Object.keys(defaultInstance).length > 0) {\\n          configure(defaultInstance);\\n          currentInstanceId = '';\\n          defaultInstance = {};\\n        }\\n      }\\n    \\n      /**\\n       * Bind the color picker to input fields that match the selector.\\n       * @param {string} selector One or more selectors pointing to input fields.\\n       */\\n      function bindFields(selector) {\\n        // Show the color picker on click on the input fields that match the selector\\n        addListener(document, 'click', selector, function (event) {\\n          // Skip if inline mode is in use\\n          if (settings.inline) {\\n            return;\\n          }\\n    \\n          // Apply any per-instance options first\\n          attachVirtualInstance(event.target);\\n    \\n          currentEl = event.target;\\n          oldColor = currentEl.value;\\n          currentFormat = getColorFormatFromStr(oldColor);\\n          picker.classList.add('clr-open');\\n    \\n          updatePickerPosition();\\n          setColorFromStr(oldColor);\\n    \\n          if (settings.focusInput || settings.selectInput) {\\n            colorValue.focus({ preventScroll: true });\\n            colorValue.setSelectionRange(currentEl.selectionStart, currentEl.selectionEnd);\\n          }\\n    \\n          if (settings.selectInput) {\\n            colorValue.select();\\n          }\\n    \\n          // Always focus the first element when using keyboard navigation\\n          if (keyboardNav || settings.swatchesOnly) {\\n            getFocusableElements().shift().focus();\\n          }\\n    \\n          // Trigger an \\\"open\\\" event\\n          currentEl.dispatchEvent(new Event('open', { bubbles: true }));\\n        });\\n    \\n        // Update the color preview of the input fields that match the selector\\n        addListener(document, 'input', selector, function (event) {\\n          var parent = event.target.parentNode;\\n    \\n          // Only update the preview if the field has been previously wrapped\\n          if (parent.classList.contains('clr-field')) {\\n            parent.style.color = event.target.value;\\n          }\\n        });\\n      }\\n    \\n      /**\\n       * Update the color picker's position and the color gradient's offset\\n       */\\n      function updatePickerPosition() {\\n        var parent = container;\\n        var scrollY = window.scrollY;\\n        var pickerWidth = picker.offsetWidth;\\n        var pickerHeight = picker.offsetHeight;\\n        var reposition = { left: false, top: false };\\n        var parentStyle, parentMarginTop, parentBorderTop;\\n        var offset = { x: 0, y: 0 };\\n    \\n        if (parent) {\\n          parentStyle = window.getComputedStyle(parent);\\n          parentMarginTop = parseFloat(parentStyle.marginTop);\\n          parentBorderTop = parseFloat(parentStyle.borderTopWidth);\\n    \\n          offset = parent.getBoundingClientRect();\\n          offset.y += parentBorderTop + scrollY;\\n        }\\n    \\n        if (!settings.inline) {\\n          var coords = currentEl.getBoundingClientRect();\\n          var left = coords.x;\\n          var top = scrollY + coords.y + coords.height + settings.margin;\\n    \\n          // If the color picker is inside a custom container\\n          // set the position relative to it\\n          if (parent) {\\n            left -= offset.x;\\n            top -= offset.y;\\n    \\n            if (left + pickerWidth > parent.clientWidth) {\\n              left += coords.width - pickerWidth;\\n              reposition.left = true;\\n            }\\n    \\n            if (top + pickerHeight > parent.clientHeight - parentMarginTop) {\\n              if (pickerHeight + settings.margin <= coords.top - (offset.y - scrollY)) {\\n                top -= coords.height + pickerHeight + settings.margin * 2;\\n                reposition.top = true;\\n              }\\n            }\\n    \\n            top += parent.scrollTop;\\n    \\n            // Otherwise set the position relative to the whole document\\n          } else {\\n            if (left + pickerWidth > document.documentElement.clientWidth) {\\n              left += coords.width - pickerWidth;\\n              reposition.left = true;\\n            }\\n    \\n            if (top + pickerHeight - scrollY > document.documentElement.clientHeight) {\\n              if (pickerHeight + settings.margin <= coords.top) {\\n                top = scrollY + coords.y - pickerHeight - settings.margin;\\n                reposition.top = true;\\n              }\\n            }\\n          }\\n    \\n          picker.classList.toggle('clr-left', reposition.left);\\n          picker.classList.toggle('clr-top', reposition.top);\\n          picker.style.left = left + \\\"px\\\";\\n          picker.style.top = top + \\\"px\\\";\\n          offset.x += picker.offsetLeft;\\n          offset.y += picker.offsetTop;\\n        }\\n    \\n        colorAreaDims = {\\n          width: colorArea.offsetWidth,\\n          height: colorArea.offsetHeight,\\n          x: colorArea.offsetLeft + offset.x,\\n          y: colorArea.offsetTop + offset.y };\\n    \\n      }\\n    \\n      /**\\n       * Wrap the linked input fields in a div that adds a color preview.\\n       * @param {string} selector One or more selectors pointing to input fields.\\n       */\\n      function wrapFields(selector) {\\n        document.querySelectorAll(selector).forEach(function (field) {\\n          var parentNode = field.parentNode;\\n    \\n          if (!parentNode.classList.contains('clr-field')) {\\n            var wrapper = document.createElement('div');\\n            var classes = 'clr-field';\\n    \\n            if (settings.rtl || field.classList.contains('clr-rtl')) {\\n              classes += ' clr-rtl';\\n            }\\n    \\n            wrapper.innerHTML = \\\"<button type=\\\\\\\"button\\\\\\\" aria-labelledby=\\\\\\\"clr-open-label\\\\\\\"></button>\\\";\\n            parentNode.insertBefore(wrapper, field);\\n            wrapper.setAttribute('class', classes);\\n            wrapper.style.color = field.value;\\n            wrapper.appendChild(field);\\n          }\\n        });\\n      }\\n    \\n      /**\\n       * Close the color picker.\\n       * @param {boolean} [revert] If true, revert the color to the original value.\\n       */\\n      function closePicker(revert) {\\n        if (currentEl && !settings.inline) {\\n          var prevEl = currentEl;\\n    \\n          // Revert the color to the original value if needed\\n          if (revert) {\\n            // This will prevent the \\\"change\\\" event on the colorValue input to execute its handler\\n            currentEl = undefined;\\n    \\n            if (oldColor !== prevEl.value) {\\n              prevEl.value = oldColor;\\n    \\n              // Trigger an \\\"input\\\" event to force update the thumbnail next to the input field\\n              prevEl.dispatchEvent(new Event('input', { bubbles: true }));\\n            }\\n          }\\n    \\n          // Trigger a \\\"change\\\" event if needed\\n          setTimeout(function () {// Add this to the end of the event loop\\n            if (oldColor !== prevEl.value) {\\n              prevEl.dispatchEvent(new Event('change', { bubbles: true }));\\n            }\\n          });\\n    \\n          // Hide the picker dialog\\n          picker.classList.remove('clr-open');\\n    \\n          // Reset any previously set per-instance options\\n          if (hasInstance) {\\n            resetVirtualInstance();\\n          }\\n    \\n          // Trigger a \\\"close\\\" event\\n          prevEl.dispatchEvent(new Event('close', { bubbles: true }));\\n    \\n          if (settings.focusInput) {\\n            prevEl.focus({ preventScroll: true });\\n          }\\n    \\n          // This essentially marks the picker as closed\\n          currentEl = undefined;\\n        }\\n      }\\n    \\n      /**\\n       * Set the active color from a string.\\n       * @param {string} str String representing a color.\\n       */\\n      function setColorFromStr(str) {\\n        var rgba = strToRGBA(str);\\n        var hsva = RGBAtoHSVA(rgba);\\n    \\n        updateMarkerA11yLabel(hsva.s, hsva.v);\\n        updateColor(rgba, hsva);\\n    \\n        // Update the UI\\n        hueSlider.value = hsva.h;\\n        picker.style.color = \\\"hsl(\\\" + hsva.h + \\\", 100%, 50%)\\\";\\n        hueMarker.style.left = hsva.h / 360 * 100 + \\\"%\\\";\\n    \\n        colorMarker.style.left = colorAreaDims.width * hsva.s / 100 + \\\"px\\\";\\n        colorMarker.style.top = colorAreaDims.height - colorAreaDims.height * hsva.v / 100 + \\\"px\\\";\\n    \\n        alphaSlider.value = hsva.a * 100;\\n        alphaMarker.style.left = hsva.a * 100 + \\\"%\\\";\\n      }\\n    \\n      /**\\n       * Guess the color format from a string.\\n       * @param {string} str String representing a color.\\n       * @return {string} The color format.\\n       */\\n      function getColorFormatFromStr(str) {\\n        var format = str.substring(0, 3).toLowerCase();\\n    \\n        if (format === 'rgb' || format === 'hsl') {\\n          return format;\\n        }\\n    \\n        return 'hex';\\n      }\\n    \\n      /**\\n       * Copy the active color to the linked input field.\\n       * @param {number} [color] Color value to override the active color.\\n       */\\n      function pickColor(color) {\\n        color = color !== undefined ? color : colorValue.value;\\n    \\n        if (currentEl) {\\n          currentEl.value = color;\\n          currentEl.dispatchEvent(new Event('input', { bubbles: true }));\\n        }\\n    \\n        if (settings.onChange) {\\n          settings.onChange.call(window, color, currentEl);\\n        }\\n    \\n        document.dispatchEvent(new CustomEvent('coloris:pick', { detail: { color: color, currentEl: currentEl } }));\\n      }\\n    \\n      /**\\n       * Set the active color based on a specific point in the color gradient.\\n       * @param {number} x Left position.\\n       * @param {number} y Top position.\\n       */\\n      function setColorAtPosition(x, y) {\\n        var hsva = {\\n          h: hueSlider.value * 1,\\n          s: x / colorAreaDims.width * 100,\\n          v: 100 - y / colorAreaDims.height * 100,\\n          a: alphaSlider.value / 100 };\\n    \\n        var rgba = HSVAtoRGBA(hsva);\\n    \\n        updateMarkerA11yLabel(hsva.s, hsva.v);\\n        updateColor(rgba, hsva);\\n        pickColor();\\n      }\\n    \\n      /**\\n       * Update the color marker's accessibility label.\\n       * @param {number} saturation\\n       * @param {number} value\\n       */\\n      function updateMarkerA11yLabel(saturation, value) {\\n        var label = settings.a11y.marker;\\n    \\n        saturation = saturation.toFixed(1) * 1;\\n        value = value.toFixed(1) * 1;\\n        label = label.replace('{s}', saturation);\\n        label = label.replace('{v}', value);\\n        colorMarker.setAttribute('aria-label', label);\\n      }\\n    \\n      //\\n      /**\\n       * Get the pageX and pageY positions of the pointer.\\n       * @param {object} event The MouseEvent or TouchEvent object.\\n       * @return {object} The pageX and pageY positions.\\n       */\\n      function getPointerPosition(event) {\\n        return {\\n          pageX: event.changedTouches ? event.changedTouches[0].pageX : event.pageX,\\n          pageY: event.changedTouches ? event.changedTouches[0].pageY : event.pageY };\\n    \\n      }\\n    \\n      /**\\n       * Move the color marker when dragged.\\n       * @param {object} event The MouseEvent object.\\n       */\\n      function moveMarker(event) {\\n        var pointer = getPointerPosition(event);\\n        var x = pointer.pageX - colorAreaDims.x;\\n        var y = pointer.pageY - colorAreaDims.y;\\n    \\n        if (container) {\\n          y += container.scrollTop;\\n        }\\n    \\n        setMarkerPosition(x, y);\\n    \\n        // Prevent scrolling while dragging the marker\\n        event.preventDefault();\\n        event.stopPropagation();\\n      }\\n    \\n      /**\\n       * Move the color marker when the arrow keys are pressed.\\n       * @param {number} offsetX The horizontal amount to move.\\n       * @param {number} offsetY The vertical amount to move.\\n       */\\n      function moveMarkerOnKeydown(offsetX, offsetY) {\\n        var x = colorMarker.style.left.replace('px', '') * 1 + offsetX;\\n        var y = colorMarker.style.top.replace('px', '') * 1 + offsetY;\\n    \\n        setMarkerPosition(x, y);\\n      }\\n    \\n      /**\\n       * Set the color marker's position.\\n       * @param {number} x Left position.\\n       * @param {number} y Top position.\\n       */\\n      function setMarkerPosition(x, y) {\\n        // Make sure the marker doesn't go out of bounds\\n        x = x < 0 ? 0 : x > colorAreaDims.width ? colorAreaDims.width : x;\\n        y = y < 0 ? 0 : y > colorAreaDims.height ? colorAreaDims.height : y;\\n    \\n        // Set the position\\n        colorMarker.style.left = x + \\\"px\\\";\\n        colorMarker.style.top = y + \\\"px\\\";\\n    \\n        // Update the color\\n        setColorAtPosition(x, y);\\n    \\n        // Make sure the marker is focused\\n        colorMarker.focus();\\n      }\\n    \\n      /**\\n       * Update the color picker's input field and preview thumb.\\n       * @param {Object} rgba Red, green, blue and alpha values.\\n       * @param {Object} [hsva] Hue, saturation, value and alpha values.\\n       */\\n      function updateColor(rgba, hsva) {if (rgba === void 0) {rgba = {};}if (hsva === void 0) {hsva = {};}\\n        var format = settings.format;\\n    \\n        for (var key in rgba) {\\n          currentColor[key] = rgba[key];\\n        }\\n    \\n        for (var _key in hsva) {\\n          currentColor[_key] = hsva[_key];\\n        }\\n    \\n        var hex = RGBAToHex(currentColor);\\n        var opaqueHex = hex.substring(0, 7);\\n    \\n        colorMarker.style.color = opaqueHex;\\n        alphaMarker.parentNode.style.color = opaqueHex;\\n        alphaMarker.style.color = hex;\\n        colorPreview.style.color = hex;\\n    \\n        // Force repaint the color and alpha gradients as a workaround for a Google Chrome bug\\n        colorArea.style.display = 'none';\\n        colorArea.offsetHeight;\\n        colorArea.style.display = '';\\n        alphaMarker.nextElementSibling.style.display = 'none';\\n        alphaMarker.nextElementSibling.offsetHeight;\\n        alphaMarker.nextElementSibling.style.display = '';\\n    \\n        if (format === 'mixed') {\\n          format = currentColor.a === 1 ? 'hex' : 'rgb';\\n        } else if (format === 'auto') {\\n          format = currentFormat;\\n        }\\n    \\n        switch (format) {\\n          case 'hex':\\n            colorValue.value = hex;\\n            break;\\n          case 'rgb':\\n            colorValue.value = RGBAToStr(currentColor);\\n            break;\\n          case 'hsl':\\n            colorValue.value = HSLAToStr(HSVAtoHSLA(currentColor));\\n            break;}\\n    \\n    \\n        // Select the current format in the format switcher\\n        document.querySelector(\\\".clr-format [value=\\\\\\\"\\\" + format + \\\"\\\\\\\"]\\\").checked = true;\\n      }\\n    \\n      /**\\n       * Set the hue when its slider is moved.\\n       */\\n      function setHue() {\\n        var hue = hueSlider.value * 1;\\n        var x = colorMarker.style.left.replace('px', '') * 1;\\n        var y = colorMarker.style.top.replace('px', '') * 1;\\n    \\n        picker.style.color = \\\"hsl(\\\" + hue + \\\", 100%, 50%)\\\";\\n        hueMarker.style.left = hue / 360 * 100 + \\\"%\\\";\\n    \\n        setColorAtPosition(x, y);\\n      }\\n    \\n      /**\\n       * Set the alpha when its slider is moved.\\n       */\\n      function setAlpha() {\\n        var alpha = alphaSlider.value / 100;\\n    \\n        alphaMarker.style.left = alpha * 100 + \\\"%\\\";\\n        updateColor({ a: alpha });\\n        pickColor();\\n      }\\n    \\n      /**\\n       * Convert HSVA to RGBA.\\n       * @param {object} hsva Hue, saturation, value and alpha values.\\n       * @return {object} Red, green, blue and alpha values.\\n       */\\n      function HSVAtoRGBA(hsva) {\\n        var saturation = hsva.s / 100;\\n        var value = hsva.v / 100;\\n        var chroma = saturation * value;\\n        var hueBy60 = hsva.h / 60;\\n        var x = chroma * (1 - Math.abs(hueBy60 % 2 - 1));\\n        var m = value - chroma;\\n    \\n        chroma = chroma + m;\\n        x = x + m;\\n    \\n        var index = Math.floor(hueBy60) % 6;\\n        var red = [chroma, x, m, m, x, chroma][index];\\n        var green = [x, chroma, chroma, x, m, m][index];\\n        var blue = [m, m, x, chroma, chroma, x][index];\\n    \\n        return {\\n          r: Math.round(red * 255),\\n          g: Math.round(green * 255),\\n          b: Math.round(blue * 255),\\n          a: hsva.a };\\n    \\n      }\\n    \\n      /**\\n       * Convert HSVA to HSLA.\\n       * @param {object} hsva Hue, saturation, value and alpha values.\\n       * @return {object} Hue, saturation, lightness and alpha values.\\n       */\\n      function HSVAtoHSLA(hsva) {\\n        var value = hsva.v / 100;\\n        var lightness = value * (1 - hsva.s / 100 / 2);\\n        var saturation;\\n    \\n        if (lightness > 0 && lightness < 1) {\\n          saturation = Math.round((value - lightness) / Math.min(lightness, 1 - lightness) * 100);\\n        }\\n    \\n        return {\\n          h: hsva.h,\\n          s: saturation || 0,\\n          l: Math.round(lightness * 100),\\n          a: hsva.a };\\n    \\n      }\\n    \\n      /**\\n       * Convert RGBA to HSVA.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {object} Hue, saturation, value and alpha values.\\n       */\\n      function RGBAtoHSVA(rgba) {\\n        var red = rgba.r / 255;\\n        var green = rgba.g / 255;\\n        var blue = rgba.b / 255;\\n        var xmax = Math.max(red, green, blue);\\n        var xmin = Math.min(red, green, blue);\\n        var chroma = xmax - xmin;\\n        var value = xmax;\\n        var hue = 0;\\n        var saturation = 0;\\n    \\n        if (chroma) {\\n          if (xmax === red) {hue = (green - blue) / chroma;}\\n          if (xmax === green) {hue = 2 + (blue - red) / chroma;}\\n          if (xmax === blue) {hue = 4 + (red - green) / chroma;}\\n          if (xmax) {saturation = chroma / xmax;}\\n        }\\n    \\n        hue = Math.floor(hue * 60);\\n    \\n        return {\\n          h: hue < 0 ? hue + 360 : hue,\\n          s: Math.round(saturation * 100),\\n          v: Math.round(value * 100),\\n          a: rgba.a };\\n    \\n      }\\n    \\n      /**\\n       * Parse a string to RGBA.\\n       * @param {string} str String representing a color.\\n       * @return {object} Red, green, blue and alpha values.\\n       */\\n      function strToRGBA(str) {\\n        var regex = /^((rgba)|rgb)[\\\\D]+([\\\\d.]+)[\\\\D]+([\\\\d.]+)[\\\\D]+([\\\\d.]+)[\\\\D]*?([\\\\d.]+|$)/i;\\n        var match, rgba;\\n    \\n        // Default to black for invalid color strings\\n        ctx.fillStyle = '#000';\\n    \\n        // Use canvas to convert the string to a valid color string\\n        ctx.fillStyle = str;\\n        match = regex.exec(ctx.fillStyle);\\n    \\n        if (match) {\\n          rgba = {\\n            r: match[3] * 1,\\n            g: match[4] * 1,\\n            b: match[5] * 1,\\n            a: match[6] * 1 };\\n    \\n    \\n          // Workaround to mitigate a Chromium bug where the alpha value is rounded incorrectly\\n          rgba.a = +rgba.a.toFixed(2);\\n    \\n        } else {\\n          match = ctx.fillStyle.replace('#', '').match(/.{2}/g).map(function (h) {return parseInt(h, 16);});\\n          rgba = {\\n            r: match[0],\\n            g: match[1],\\n            b: match[2],\\n            a: 1 };\\n    \\n        }\\n    \\n        return rgba;\\n      }\\n    \\n      /**\\n       * Convert RGBA to Hex.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {string} Hex color string.\\n       */\\n      function RGBAToHex(rgba) {\\n        var R = rgba.r.toString(16);\\n        var G = rgba.g.toString(16);\\n        var B = rgba.b.toString(16);\\n        var A = '';\\n    \\n        if (rgba.r < 16) {\\n          R = '0' + R;\\n        }\\n    \\n        if (rgba.g < 16) {\\n          G = '0' + G;\\n        }\\n    \\n        if (rgba.b < 16) {\\n          B = '0' + B;\\n        }\\n    \\n        if (settings.alpha && (rgba.a < 1 || settings.forceAlpha)) {\\n          var alpha = rgba.a * 255 | 0;\\n          A = alpha.toString(16);\\n    \\n          if (alpha < 16) {\\n            A = '0' + A;\\n          }\\n        }\\n    \\n        return '#' + R + G + B + A;\\n      }\\n    \\n      /**\\n       * Convert RGBA values to a CSS rgb/rgba string.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {string} CSS color string.\\n       */\\n      function RGBAToStr(rgba) {\\n        if (!settings.alpha || rgba.a === 1 && !settings.forceAlpha) {\\n          return \\\"rgb(\\\" + rgba.r + \\\", \\\" + rgba.g + \\\", \\\" + rgba.b + \\\")\\\";\\n        } else {\\n          return \\\"rgba(\\\" + rgba.r + \\\", \\\" + rgba.g + \\\", \\\" + rgba.b + \\\", \\\" + rgba.a + \\\")\\\";\\n        }\\n      }\\n    \\n      /**\\n       * Convert HSLA values to a CSS hsl/hsla string.\\n       * @param {object} hsla Hue, saturation, lightness and alpha values.\\n       * @return {string} CSS color string.\\n       */\\n      function HSLAToStr(hsla) {\\n        if (!settings.alpha || hsla.a === 1 && !settings.forceAlpha) {\\n          return \\\"hsl(\\\" + hsla.h + \\\", \\\" + hsla.s + \\\"%, \\\" + hsla.l + \\\"%)\\\";\\n        } else {\\n          return \\\"hsla(\\\" + hsla.h + \\\", \\\" + hsla.s + \\\"%, \\\" + hsla.l + \\\"%, \\\" + hsla.a + \\\")\\\";\\n        }\\n      }\\n    \\n      /**\\n       * Init the color picker.\\n       */\\n      function init() {\\n        // Render the UI\\n        container = undefined;\\n        picker = document.createElement('div');\\n        picker.setAttribute('id', 'clr-picker');\\n        picker.className = 'clr-picker';\\n        picker.innerHTML =\\n        \\\"<input id=\\\\\\\"clr-color-value\\\\\\\" name=\\\\\\\"clr-color-value\\\\\\\" class=\\\\\\\"clr-color\\\\\\\" type=\\\\\\\"text\\\\\\\" value=\\\\\\\"\\\\\\\" spellcheck=\\\\\\\"false\\\\\\\" aria-label=\\\\\\\"\\\" + settings.a11y.input + \\\"\\\\\\\">\\\" + (\\\"<div id=\\\\\\\"clr-color-area\\\\\\\" class=\\\\\\\"clr-gradient\\\\\\\" role=\\\\\\\"application\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.instruction + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-color-marker\\\" class=\\\"clr-marker\\\" tabindex=\\\"0\\\"></div>' +\\n        '</div>' +\\n        '<div class=\\\"clr-hue\\\">' + (\\\"<input id=\\\\\\\"clr-hue-slider\\\\\\\" name=\\\\\\\"clr-hue-slider\\\\\\\" type=\\\\\\\"range\\\\\\\" min=\\\\\\\"0\\\\\\\" max=\\\\\\\"360\\\\\\\" step=\\\\\\\"1\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.hueSlider + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-hue-marker\\\"></div>' +\\n        '</div>' +\\n        '<div class=\\\"clr-alpha\\\">' + (\\\"<input id=\\\\\\\"clr-alpha-slider\\\\\\\" name=\\\\\\\"clr-alpha-slider\\\\\\\" type=\\\\\\\"range\\\\\\\" min=\\\\\\\"0\\\\\\\" max=\\\\\\\"100\\\\\\\" step=\\\\\\\"1\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.alphaSlider + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-alpha-marker\\\"></div>' +\\n        '<span></span>' +\\n        '</div>' +\\n        '<div id=\\\"clr-format\\\" class=\\\"clr-format\\\">' +\\n        '<fieldset class=\\\"clr-segmented\\\">' + (\\\"<legend>\\\" +\\n        settings.a11y.format + \\\"</legend>\\\") +\\n        '<input id=\\\"clr-f1\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"hex\\\">' +\\n        '<label for=\\\"clr-f1\\\">Hex</label>' +\\n        '<input id=\\\"clr-f2\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"rgb\\\">' +\\n        '<label for=\\\"clr-f2\\\">RGB</label>' +\\n        '<input id=\\\"clr-f3\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"hsl\\\">' +\\n        '<label for=\\\"clr-f3\\\">HSL</label>' +\\n        '<span></span>' +\\n        '</fieldset>' +\\n        '</div>' +\\n        '<div id=\\\"clr-swatches\\\" class=\\\"clr-swatches\\\"></div>' + (\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-clear\\\\\\\" class=\\\\\\\"clr-clear\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.clear + \\\"\\\\\\\">\\\" + settings.clearLabel + \\\"</button>\\\") +\\n        '<div id=\\\"clr-color-preview\\\" class=\\\"clr-preview\\\">' + (\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-close\\\\\\\" class=\\\\\\\"clr-close\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.close + \\\"\\\\\\\">\\\" + settings.closeLabel + \\\"</button>\\\") +\\n        '</div>' + (\\\"<span id=\\\\\\\"clr-open-label\\\\\\\" hidden>\\\" +\\n        settings.a11y.open + \\\"</span>\\\") + (\\\"<span id=\\\\\\\"clr-swatch-label\\\\\\\" hidden>\\\" +\\n        settings.a11y.swatch + \\\"</span>\\\");\\n    \\n        // Append the color picker to the DOM\\n        document.body.appendChild(picker);\\n    \\n        // Reference the UI elements\\n        colorArea = getEl('clr-color-area');\\n        colorMarker = getEl('clr-color-marker');\\n        clearButton = getEl('clr-clear');\\n        closeButton = getEl('clr-close');\\n        colorPreview = getEl('clr-color-preview');\\n        colorValue = getEl('clr-color-value');\\n        hueSlider = getEl('clr-hue-slider');\\n        hueMarker = getEl('clr-hue-marker');\\n        alphaSlider = getEl('clr-alpha-slider');\\n        alphaMarker = getEl('clr-alpha-marker');\\n    \\n        // Bind the picker to the default selector\\n        bindFields(settings.el);\\n        wrapFields(settings.el);\\n    \\n        addListener(picker, 'mousedown', function (event) {\\n          picker.classList.remove('clr-keyboard-nav');\\n          event.stopPropagation();\\n        });\\n    \\n        addListener(colorArea, 'mousedown', function (event) {\\n          addListener(document, 'mousemove', moveMarker);\\n        });\\n    \\n        addListener(colorArea, 'touchstart', function (event) {\\n          document.addEventListener('touchmove', moveMarker, { passive: false });\\n        });\\n    \\n        addListener(colorMarker, 'mousedown', function (event) {\\n          addListener(document, 'mousemove', moveMarker);\\n        });\\n    \\n        addListener(colorMarker, 'touchstart', function (event) {\\n          document.addEventListener('touchmove', moveMarker, { passive: false });\\n        });\\n    \\n        addListener(colorValue, 'change', function (event) {\\n          var value = colorValue.value;\\n    \\n          if (currentEl || settings.inline) {\\n            var color = value === '' ? value : setColorFromStr(value);\\n            pickColor(color);\\n          }\\n        });\\n    \\n        addListener(clearButton, 'click', function (event) {\\n          pickColor('');\\n          closePicker();\\n        });\\n    \\n        addListener(closeButton, 'click', function (event) {\\n          pickColor();\\n          closePicker();\\n        });\\n    \\n        addListener(getEl('clr-format'), 'click', '.clr-format input', function (event) {\\n          currentFormat = event.target.value;\\n          updateColor();\\n          pickColor();\\n        });\\n    \\n        addListener(picker, 'click', '.clr-swatches button', function (event) {\\n          setColorFromStr(event.target.textContent);\\n          pickColor();\\n    \\n          if (settings.swatchesOnly) {\\n            closePicker();\\n          }\\n        });\\n    \\n        addListener(document, 'mouseup', function (event) {\\n          document.removeEventListener('mousemove', moveMarker);\\n        });\\n    \\n        addListener(document, 'touchend', function (event) {\\n          document.removeEventListener('touchmove', moveMarker);\\n        });\\n    \\n        addListener(document, 'mousedown', function (event) {\\n          keyboardNav = false;\\n          picker.classList.remove('clr-keyboard-nav');\\n          closePicker();\\n        });\\n    \\n        addListener(document, 'keydown', function (event) {\\n          var key = event.key;\\n          var target = event.target;\\n          var shiftKey = event.shiftKey;\\n          var navKeys = ['Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\\n    \\n          if (key === 'Escape') {\\n            closePicker(true);\\n    \\n            // Display focus rings when using the keyboard\\n          } else if (navKeys.includes(key)) {\\n            keyboardNav = true;\\n            picker.classList.add('clr-keyboard-nav');\\n          }\\n    \\n          // Trap the focus within the color picker while it's open\\n          if (key === 'Tab' && target.matches('.clr-picker *')) {\\n            var focusables = getFocusableElements();\\n            var firstFocusable = focusables.shift();\\n            var lastFocusable = focusables.pop();\\n    \\n            if (shiftKey && target === firstFocusable) {\\n              lastFocusable.focus();\\n              event.preventDefault();\\n            } else if (!shiftKey && target === lastFocusable) {\\n              firstFocusable.focus();\\n              event.preventDefault();\\n            }\\n          }\\n        });\\n    \\n        addListener(document, 'click', '.clr-field button', function (event) {\\n          // Reset any previously set per-instance options\\n          if (hasInstance) {\\n            resetVirtualInstance();\\n          }\\n    \\n          // Open the color picker\\n          event.target.nextElementSibling.dispatchEvent(new Event('click', { bubbles: true }));\\n        });\\n    \\n        addListener(colorMarker, 'keydown', function (event) {\\n          var movements = {\\n            ArrowUp: [0, -1],\\n            ArrowDown: [0, 1],\\n            ArrowLeft: [-1, 0],\\n            ArrowRight: [1, 0] };\\n    \\n    \\n          if (Object.keys(movements).includes(event.key)) {\\n            moveMarkerOnKeydown.apply(void 0, movements[event.key]);\\n            event.preventDefault();\\n          }\\n        });\\n    \\n        addListener(colorArea, 'click', moveMarker);\\n        addListener(hueSlider, 'input', setHue);\\n        addListener(alphaSlider, 'input', setAlpha);\\n      }\\n    \\n      /**\\n       * Return a list of focusable elements within the color picker.\\n       * @return {array} The list of focusable DOM elemnts.\\n       */\\n      function getFocusableElements() {\\n        var controls = Array.from(picker.querySelectorAll('input, button'));\\n        var focusables = controls.filter(function (node) {return !!node.offsetWidth;});\\n    \\n        return focusables;\\n      }\\n    \\n      /**\\n       * Shortcut for getElementById to optimize the minified JS.\\n       * @param {string} id The element id.\\n       * @return {object} The DOM element with the provided id.\\n       */\\n      function getEl(id) {\\n        return document.getElementById(id);\\n      }\\n    \\n      /**\\n       * Shortcut for addEventListener to optimize the minified JS.\\n       * @param {object} context The context to which the listener is attached.\\n       * @param {string} type Event type.\\n       * @param {(string|function)} selector Event target if delegation is used, event handler if not.\\n       * @param {function} [fn] Event handler if delegation is used.\\n       */\\n      function addListener(context, type, selector, fn) {\\n        var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\\n    \\n        // Delegate event to the target of the selector\\n        if (typeof selector === 'string') {\\n          context.addEventListener(type, function (event) {\\n            if (matches.call(event.target, selector)) {\\n              fn.call(event.target, event);\\n            }\\n          });\\n    \\n          // If the selector is not a string then it's a function\\n          // in which case we need a regular event listener\\n        } else {\\n          fn = selector;\\n          context.addEventListener(type, fn);\\n        }\\n      }\\n    \\n      /**\\n       * Call a function only when the DOM is ready.\\n       * @param {function} fn The function to call.\\n       * @param {array} [args] Arguments to pass to the function.\\n       */\\n      function DOMReady(fn, args) {\\n        args = args !== undefined ? args : [];\\n    \\n        if (document.readyState !== 'loading') {\\n          fn.apply(void 0, args);\\n        } else {\\n          document.addEventListener('DOMContentLoaded', function () {\\n            fn.apply(void 0, args);\\n          });\\n        }\\n      }\\n    \\n      // Polyfill for Nodelist.forEach\\n      if (NodeList !== undefined && NodeList.prototype && !NodeList.prototype.forEach) {\\n        NodeList.prototype.forEach = Array.prototype.forEach;\\n      }\\n    \\n      // Expose the color picker to the global scope\\n      window.Coloris = function () {\\n        var methods = {\\n          set: configure,\\n          wrap: wrapFields,\\n          close: closePicker,\\n          setInstance: setVirtualInstance,\\n          removeInstance: removeVirtualInstance,\\n          updatePosition: updatePickerPosition };\\n    \\n    \\n        function Coloris(options) {\\n          DOMReady(function () {\\n            if (options) {\\n              if (typeof options === 'string') {\\n                bindFields(options);\\n              } else {\\n                configure(options);\\n              }\\n            }\\n          });\\n        }var _loop2 = function _loop2(\\n    \\n        key) {\\n          Coloris[key] = function () {for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {args[_key2] = arguments[_key2];}\\n            DOMReady(methods[key], args);\\n          };};for (var key in methods) {_loop2(key);\\n        }\\n    \\n        return Coloris;\\n      }();\\n    \\n      // Init the color picker when the DOM is ready\\n      DOMReady(init);\\n    \\n    })(window, document, Math);\\n  </script>\\n  \\n  <!-- Example code -->\\n  <a href=\\\"https://github.com/mdbassit/Coloris\\\">View <b>Coloris</b> on GitHub</a>\\n    <h1>Coloris examples</h1>\\n    <div class=\\\"examples\\\">\\n      <div class=\\\"example\\\">\\n        <p>Default color thumbnail</p>\\n        <input type=\\\"text\\\" value=\\\"green\\\" data-coloris>\\n      </div>\\n      <div class=\\\"example square\\\">\\n        <p>Rounded square thumbnail</p>\\n        <input type=\\\"text\\\" class=\\\"coloris instance1\\\" value=\\\"rgb(255, 0, 0)\\\">\\n      </div>\\n      <div class=\\\"example circle\\\">\\n        <p>Circular thumbnail</p>\\n        <input type=\\\"text\\\" class=\\\"coloris instance2\\\" value=\\\"#cc458faa\\\">\\n      </div>\\n      <div class=\\\"example full\\\">\\n        <p>Full size thumbnail</p>\\n        <input type=\\\"text\\\" class=\\\"coloris instance3\\\" value=\\\"#ffcc00\\\">\\n      </div>\\n      <div class=\\\"example square\\\" style=\\\"position: relative; top: 300px; padding-bottom: 30px;\\\">\\n        <p>The dialog will appear on top of this field for lack of space under it.</p>\\n        <input type=\\\"text\\\" class=\\\"coloris\\\" value=\\\"#00a5cc\\\">\\n      </div>\\n    </div>\\n    <!--script type=\\\"text/javascript\\\" src=\\\"coloris.min.js\\\"></script-->\\n    <script type=\\\"text/javascript\\\">\\n\\n    /** Default configuration **/\\n\\n    Coloris({\\n      el: '.coloris',\\n      swatches: [\\n        '#264653',\\n        '#2a9d8f',\\n        '#e9c46a',\\n        '#f4a261',\\n        '#e76f51',\\n        '#d62828',\\n        '#023e8a',\\n        '#0077b6',\\n        '#0096c7',\\n        '#00b4d8',\\n        '#48cae4',\\n        '#264653',\\n        '#2a9d8f',\\n        '#e9c46a',\\n        '#f4a261',\\n        '#e76f51',\\n        '#d62828',\\n        '#023e8a',\\n        '#0077b6',\\n        '#0096c7',\\n        '#00b4d8',\\n        '#48cae4',\\n      ]\\n    });\\n\\n    /** Instances **/\\n\\n    Coloris.setInstance('.instance1', {\\n      theme: 'pill',\\n      themeMode: 'dark',\\n      formatToggle: true,\\n      closeButton: true,\\n      clearButton: true,\\n      swatches: [\\n        // Row 1\\n        '#067bc2',\\n        '#84bcda',\\n        '#80e377',\\n        '#ecc30b',\\n        '#f37748',\\n        '#d56062',\\n        // Row 2\\n        '#067bc2',\\n        '#84bcda',\\n        '#80e377',\\n        '#ecc30b',\\n        '#f37748',\\n        '#d56062',\\n      ]\\n    });\\n\\n    Coloris.setInstance('.instance2', { theme: 'polaroid' });\\n\\n    Coloris.setInstance('.instance3', {\\n      theme: 'polaroid',\\n      swatchesOnly: true\\n    });\\n\\n    </script>\\n\\n</body>\\n</html>\",\"fileTypeName\":\"Web Page\",\"fileType\":\"application/html\",\"key\":17,\"location\":\"6510 -280\"},\n{\"label\":\"Download\",\"category\":\"TextLabels_Size4\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"530 30\",\"key\":19,\"location\":\"5120 -350\"},\n{\"label\":\"Demo\",\"category\":\"TextLabels_Size4\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"220 70\",\"key\":21,\"location\":\"6300 -440\"},\n{\"label\":\"Simple Color Picker\\n(Link)\",\"color\":\"lightsalmon\",\"size\":\"180 170\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<html>\\n  <head>\\n    <!--link rel=\\\"stylesheet\\\" href=\\\"coloris.min.css\\\" />\\n    <script src=\\\"coloris.min.js\\\"></script-->\\n    \\n    <style>\\n      /* This is the readable content of coloris.min.css */\\n      \\n      .clr-picker {\\n        display: none;\\n        flex-wrap: wrap;\\n        position: absolute;\\n        width: 200px;\\n        z-index: 1000;\\n        border-radius: 10px;\\n        background-color: #fff;\\n        justify-content: flex-end;\\n        direction: ltr;\\n        box-shadow: 0 0 5px rgba(0,0,0,.05), 0 5px 20px rgba(0,0,0,.1);\\n        -moz-user-select: none;\\n        -webkit-user-select: none;\\n        user-select: none;\\n      }\\n      \\n      .clr-picker.clr-open,\\n      .clr-picker[data-inline=\\\"true\\\"] {\\n        display: flex;\\n      }\\n      \\n      .clr-picker[data-inline=\\\"true\\\"] {\\n        position: relative;\\n      }\\n      \\n      .clr-gradient {\\n        position: relative;\\n        width: 100%;\\n        height: 100px;\\n        margin-bottom: 15px;\\n        border-radius: 3px 3px 0 0;\\n        background-image: linear-gradient(rgba(0,0,0,0), #000), linear-gradient(90deg, #fff, currentColor);\\n        cursor: pointer;\\n      }\\n      \\n      .clr-marker {\\n        position: absolute;\\n        width: 12px;\\n        height: 12px;\\n        margin: -6px 0 0 -6px;\\n        border: 1px solid #fff;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-webkit-slider-runnable-track {\\n        width: 100%;\\n        height: 16px;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-webkit-slider-thumb {\\n        width: 16px;\\n        height: 16px;\\n        -webkit-appearance: none;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-moz-range-track {\\n        width: 100%;\\n        height: 16px;\\n        border: 0;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-moz-range-thumb {\\n        width: 16px;\\n        height: 16px;\\n        border: 0;\\n      }\\n      \\n      .clr-hue {\\n        background-image: linear-gradient(to right, #f00 0%, #ff0 16.66%, #0f0 33.33%, #0ff 50%, #00f 66.66%, #f0f 83.33%, #f00 100%);\\n      }\\n      \\n      .clr-hue,\\n      .clr-alpha {\\n        position: relative;\\n        width: calc(100% - 40px);\\n        height: 8px;\\n        margin: 5px 20px;\\n        border-radius: 4px;\\n      }\\n      \\n      .clr-alpha span {\\n        display: block;\\n        height: 100%;\\n        width: 100%;\\n        border-radius: inherit;\\n        background-image: linear-gradient(90deg, rgba(0,0,0,0), currentColor);\\n      }\\n      \\n      .clr-hue input,\\n      .clr-alpha input {\\n        position: absolute;\\n        width: calc(100% + 32px);\\n        height: 16px;\\n        left: -16px;\\n        top: -4px;\\n        margin: 0;\\n        background-color: transparent;\\n        opacity: 0;\\n        cursor: pointer;\\n        appearance: none;\\n        -webkit-appearance: none;\\n      }\\n      \\n      .clr-hue div,\\n      .clr-alpha div {\\n        position: absolute;\\n        width: 16px;\\n        height: 16px;\\n        left: 0;\\n        top: 50%;\\n        margin-left: -8px;\\n        transform: translateY(-50%);\\n        border: 2px solid #fff;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n        box-shadow: 0 0 1px #888;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-alpha div:before {\\n        content: '';\\n        position: absolute;\\n        height: 100%;\\n        width: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n      }\\n      \\n      .clr-format {\\n        display: none;\\n        order: 1;\\n        width: calc(100% - 40px);\\n        margin: 0 20px 20px;\\n      }\\n      \\n      .clr-segmented {\\n        display: flex;\\n        position: relative;\\n        width: 100%;\\n        margin: 0;\\n        padding: 0;\\n        border: 1px solid #ddd;\\n        border-radius: 15px;\\n        box-sizing: border-box;\\n        color: #999;\\n        font-size: 12px;\\n      }\\n      \\n      .clr-segmented input,\\n      .clr-segmented legend {\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        left: 0;\\n        top: 0;\\n        opacity: 0;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-segmented label {\\n        flex-grow: 1;\\n        margin: 0;\\n        padding: 4px 0;\\n        font-size: inherit;\\n        font-weight: normal;\\n        line-height: initial;\\n        text-align: center;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-segmented label:first-of-type {\\n        border-radius: 10px 0 0 10px;\\n      }\\n      \\n      .clr-segmented label:last-of-type {\\n        border-radius: 0 10px 10px 0;\\n      }\\n      \\n      .clr-segmented input:checked + label {\\n        color: #fff;\\n        background-color: #666;\\n      }\\n      \\n      .clr-swatches {\\n        order: 2;\\n        width: calc(100% - 32px);\\n        margin: 0 16px;\\n      }\\n      \\n      .clr-swatches div {\\n        display: flex;\\n        flex-wrap: wrap;\\n        padding-bottom: 12px;\\n        justify-content: center;\\n      }\\n      \\n      .clr-swatches button {\\n        position: relative;\\n        width: 20px;\\n        height: 20px;\\n        margin: 0 4px 6px 4px;\\n        padding: 0;\\n        border: 0;\\n        border-radius: 50%;\\n        color: inherit;\\n        text-indent: -1000px;\\n        white-space: nowrap;\\n        overflow: hidden;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-swatches button:after {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: inherit;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);\\n      }\\n      \\n      input.clr-color {\\n        order: 1;\\n        width: calc(100% - 80px);\\n        height: 32px;\\n        margin: 15px 20px 20px auto;\\n        padding: 0 10px;\\n        border: 1px solid #ddd;\\n        border-radius: 16px;\\n        color: #444;\\n        background-color: #fff;\\n        font-family: sans-serif;\\n        font-size: 14px;\\n        text-align: center;\\n        box-shadow: none;\\n      }\\n      \\n      input.clr-color:focus {\\n        outline: none;\\n        border: 1px solid #1e90ff;\\n      }\\n      \\n      .clr-close,\\n      .clr-clear {\\n        display: none;\\n        order: 2;\\n        height: 24px;\\n        margin: 0 20px 20px;\\n        padding: 0 20px;\\n        border: 0;\\n        border-radius: 12px;\\n        color: #fff;\\n        background-color: #666;\\n        font-family: inherit;\\n        font-size: 12px;\\n        font-weight: 400;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-close {\\n        display: block;\\n        margin: 0 20px 20px auto;\\n      }\\n      \\n      .clr-preview {\\n        position: relative;\\n        width: 32px;\\n        height: 32px;\\n        margin: 15px 0 20px 20px;\\n        border-radius: 50%;\\n        overflow: hidden;\\n      }\\n      \\n      .clr-preview:before,\\n      .clr-preview:after {\\n        content: '';\\n        position: absolute;\\n        height: 100%;\\n        width: 100%;\\n        left: 0;\\n        top: 0;\\n        border: 1px solid #fff;\\n        border-radius: 50%;\\n      }\\n      \\n      .clr-preview:after {\\n        border: 0;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);\\n      }\\n      \\n      .clr-preview button {\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        z-index: 1;\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        border-radius: 50%;\\n        outline-offset: -2px;\\n        background-color: transparent;\\n        text-indent: -9999px;\\n        cursor: pointer;\\n        overflow: hidden;\\n      }\\n      \\n      .clr-marker,\\n      .clr-hue div,\\n      .clr-alpha div,\\n      .clr-color {\\n        box-sizing: border-box;\\n      }\\n      \\n      .clr-field {\\n        display: inline-block;\\n        position: relative;\\n        color: transparent;\\n      }\\n      \\n      .clr-field input {\\n        margin: 0;\\n        direction: ltr;\\n      }\\n      \\n      .clr-field.clr-rtl input {\\n        text-align: right;\\n      }\\n      \\n      .clr-field button {\\n        position: absolute;\\n        width: 30px;\\n        height: 100%;\\n        right: 0;\\n        top: 50%;\\n        transform: translateY(-50%);\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        color: inherit;\\n        text-indent: -1000px;\\n        white-space: nowrap;\\n        overflow: hidden;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-field.clr-rtl button {\\n        right: auto;\\n        left: 0;\\n      }\\n      \\n      .clr-field button:after {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: inherit;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 1px rgba(0,0,0,.5);\\n      }\\n      \\n      .clr-alpha,\\n      .clr-alpha div,\\n      .clr-swatches button,\\n      .clr-preview:before,\\n      .clr-field button {\\n        background-image: repeating-linear-gradient(45deg, #aaa 25%, transparent 25%, transparent 75%, #aaa 75%, #aaa), repeating-linear-gradient(45deg, #aaa 25%, #fff 25%, #fff 75%, #aaa 75%, #aaa);\\n        background-position: 0 0, 4px 4px;\\n        background-size: 8px 8px;\\n      }\\n      \\n      .clr-marker:focus {\\n        outline: none;\\n      }\\n      \\n      .clr-keyboard-nav .clr-marker:focus,\\n      .clr-keyboard-nav .clr-hue input:focus + div,\\n      .clr-keyboard-nav .clr-alpha input:focus + div,\\n      .clr-keyboard-nav .clr-segmented input:focus + label {\\n        outline: none;\\n        box-shadow: 0 0 0 2px #1e90ff, 0 0 2px 2px #fff;\\n      }\\n      \\n      .clr-picker[data-alpha=\\\"false\\\"] .clr-alpha {\\n        display: none;\\n      }\\n      \\n      .clr-picker[data-minimal=\\\"true\\\"] {\\n        padding-top: 16px;\\n      }\\n      \\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-gradient,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-hue,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-alpha,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-color,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-preview {\\n        display: none;\\n      }\\n      \\n      /** Dark theme **/\\n      \\n      .clr-dark {\\n        background-color: #444;\\n      }\\n      \\n      .clr-dark .clr-segmented {\\n        border-color: #777;\\n      }\\n      \\n      .clr-dark .clr-swatches button:after {\\n        box-shadow: inset 0 0 0 1px rgba(255,255,255,.3);\\n      }\\n      \\n      .clr-dark input.clr-color {\\n        color: #fff;\\n        border-color: #777;\\n        background-color: #555;\\n      }\\n      \\n      .clr-dark input.clr-color:focus {\\n        border-color: #1e90ff;\\n      }\\n      \\n      .clr-dark .clr-preview:after {\\n        box-shadow: inset 0 0 0 1px rgba(255,255,255,.5);\\n      }\\n      \\n      .clr-dark .clr-alpha,\\n      .clr-dark .clr-alpha div,\\n      .clr-dark .clr-swatches button,\\n      .clr-dark .clr-preview:before {\\n        background-image: repeating-linear-gradient(45deg, #666 25%, transparent 25%, transparent 75%, #888 75%, #888), repeating-linear-gradient(45deg, #888 25%, #444 25%, #444 75%, #888 75%, #888);\\n      }\\n      \\n      /** Polaroid theme **/\\n      \\n      .clr-picker.clr-polaroid {\\n        border-radius: 6px;\\n        box-shadow: 0 0 5px rgba(0,0,0,.1), 0 5px 30px rgba(0,0,0,.2);\\n      }\\n      \\n      .clr-picker.clr-polaroid:before {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 16px;\\n        height: 10px;\\n        left: 20px;\\n        top: -10px;\\n        border: solid transparent;\\n        border-width: 0 8px 10px 8px;\\n        border-bottom-color: currentColor;\\n        box-sizing: border-box;\\n        color: #fff;\\n        filter: drop-shadow(0 -4px 3px rgba(0,0,0,.1));\\n        pointer-events: none;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-dark:before {\\n        color: #444;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-left:before {\\n        left: auto;\\n        right: 20px;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-top:before {\\n        top: auto;\\n        bottom: -10px;\\n        transform: rotateZ(180deg);\\n      }\\n      \\n      .clr-polaroid .clr-gradient {\\n        width: calc(100% - 20px);\\n        height: 120px;\\n        margin: 10px;\\n        border-radius: 3px;\\n      }\\n      \\n      .clr-polaroid .clr-hue,\\n      .clr-polaroid .clr-alpha {\\n        width: calc(100% - 30px);\\n        height: 10px;\\n        margin: 6px 15px;\\n        border-radius: 5px;\\n      }\\n      \\n      .clr-polaroid .clr-hue div,\\n      .clr-polaroid .clr-alpha div {\\n        box-shadow: 0 0 5px rgba(0,0,0,.2);\\n      }\\n      \\n      .clr-polaroid .clr-format {\\n        width: calc(100% - 20px);\\n        margin: 0 10px 15px;\\n      }\\n      \\n      .clr-polaroid .clr-swatches {\\n        width: calc(100% - 12px);\\n        margin: 0 6px;\\n      }\\n      .clr-polaroid .clr-swatches div {\\n        padding-bottom: 10px;\\n      }\\n      \\n      .clr-polaroid .clr-swatches button {\\n        width: 22px;\\n        height: 22px;\\n      }\\n      \\n      .clr-polaroid input.clr-color {\\n        width: calc(100% - 60px);\\n        margin: 10px 10px 15px auto;\\n      }\\n      \\n      .clr-polaroid .clr-clear {\\n        margin: 0 10px 15px 10px;\\n      }\\n      \\n      .clr-polaroid .clr-close {\\n        margin: 0 10px 15px auto;\\n      }\\n      \\n      .clr-polaroid .clr-preview {\\n        margin: 10px 0 15px 10px;\\n      }\\n      \\n      /** Large theme **/\\n      \\n      .clr-picker.clr-large {\\n        width: 275px;\\n      }\\n      \\n      .clr-large .clr-gradient {\\n        height: 150px;\\n      }\\n      \\n      .clr-large .clr-swatches button {\\n        width: 22px;\\n        height: 22px;\\n      }\\n      \\n      /** Pill (horizontal) theme **/\\n      \\n      .clr-picker.clr-pill {\\n        width: 380px;\\n        padding-left: 180px;\\n        box-sizing: border-box;\\n      }\\n      \\n      .clr-pill .clr-gradient {\\n        position: absolute;\\n        width: 180px;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        margin-bottom: 0;\\n        border-radius: 3px 0 0 3px;\\n      }\\n      \\n      .clr-pill .clr-hue {\\n        margin-top: 20px;\\n      }\\n    </style>\\n    \\n    <!-- Example code -->\\n    <style type=\\\"text/css\\\">\\n    @import url(https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap);\\n\\n    body {\\n      height: 120vh;\\n      color: #444;\\n      background-color: #fff;\\n      font-family: 'Lato', sans-serif;\\n    }\\n\\n    input {\\n      width: 150px;\\n      height: 32px;\\n      padding: 0 10px;\\n      border: 1px solid #ccc;\\n      border-radius: 5px;\\n      font-family: inherit;\\n      font-size: inherit;\\n      font-weight: inherit;\\n      box-sizing: border-box;\\n    }\\n      \\n    .examples {\\n      display: flex;\\n      flex-wrap: wrap;\\n    }\\n\\n    .example {\\n      flex-shrink: 0;\\n      width: 300px;\\n      margin-bottom: 30px;\\n    }\\n\\n    .square .clr-field button,\\n    .circle .clr-field button {\\n      width: 22px;\\n      height: 22px;\\n      left: 5px;\\n      right: auto;\\n      border-radius: 5px;\\n    }\\n\\n    .square .clr-field input,\\n    .circle .clr-field input {\\n      padding-left: 36px;\\n    }\\n\\n    .circle .clr-field button {\\n      border-radius: 50%;\\n    }\\n\\n    .full .clr-field button {\\n      width: 100%;\\n      height: 100%;\\n      border-radius: 5px;\\n    }\\n\\n    </style>\\n  </head>\\n<body style=\\\"background: black;\\\">\\n  <script>\\n    /* This is the readable content of coloris.min.js */\\n    \\n    /*!\\n     * Copyright (c) 2021 Momo Bassit.\\n     * Licensed under the MIT License (MIT)\\n     * https://github.com/mdbassit/Coloris\\n     */\\n    \\n    (function (window, document, Math, undefined) {\\n      var ctx = document.createElement('canvas').getContext('2d');\\n      var currentColor = { r: 0, g: 0, b: 0, h: 0, s: 0, v: 0, a: 1 };\\n      var container, picker, colorArea, colorAreaDims, colorMarker, colorPreview, colorValue, clearButton, closeButton,\\n      hueSlider, hueMarker, alphaSlider, alphaMarker, currentEl, currentFormat, oldColor, keyboardNav;\\n    \\n      // Default settings\\n      var settings = {\\n        el: '[data-coloris]',\\n        parent: 'body',\\n        theme: 'default',\\n        themeMode: 'light',\\n        rtl: false,\\n        wrap: true,\\n        margin: 2,\\n        format: 'hex',\\n        formatToggle: false,\\n        swatches: [],\\n        swatchesOnly: false,\\n        alpha: true,\\n        forceAlpha: false,\\n        focusInput: true,\\n        selectInput: false,\\n        inline: false,\\n        defaultColor: '#000000',\\n        clearButton: false,\\n        clearLabel: 'Clear',\\n        closeButton: false,\\n        closeLabel: 'Close',\\n        onChange: function onChange() {return undefined;},\\n        a11y: {\\n          open: 'Open color picker',\\n          close: 'Close color picker',\\n          clear: 'Clear the selected color',\\n          marker: 'Saturation: {s}. Brightness: {v}.',\\n          hueSlider: 'Hue slider',\\n          alphaSlider: 'Opacity slider',\\n          input: 'Color value field',\\n          format: 'Color format',\\n          swatch: 'Color swatch',\\n          instruction: 'Saturation and brightness selector. Use up, down, left and right arrow keys to select.' } };\\n    \\n    \\n    \\n      // Virtual instances cache\\n      var instances = {};\\n      var currentInstanceId = '';\\n      var defaultInstance = {};\\n      var hasInstance = false;\\n    \\n      /**\\n       * Configure the color picker.\\n       * @param {object} options Configuration options.\\n       */\\n      function configure(options) {\\n        if (typeof options !== 'object') {\\n          return;\\n        }\\n    \\n        for (var key in options) {\\n          switch (key) {\\n            case 'el':\\n              bindFields(options.el);\\n              if (options.wrap !== false) {\\n                wrapFields(options.el);\\n              }\\n              break;\\n            case 'parent':\\n              container = document.querySelector(options.parent);\\n              if (container) {\\n                container.appendChild(picker);\\n                settings.parent = options.parent;\\n    \\n                // document.body is special\\n                if (container === document.body) {\\n                  container = undefined;\\n                }\\n              }\\n              break;\\n            case 'themeMode':\\n              settings.themeMode = options.themeMode;\\n              if (options.themeMode === 'auto' && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\\n                settings.themeMode = 'dark';\\n              }\\n            // The lack of a break statement is intentional\\n            case 'theme':\\n              if (options.theme) {\\n                settings.theme = options.theme;\\n              }\\n    \\n              // Set the theme and color scheme\\n              picker.className = \\\"clr-picker clr-\\\" + settings.theme + \\\" clr-\\\" + settings.themeMode;\\n    \\n              // Update the color picker's position if inline mode is in use\\n              if (settings.inline) {\\n                updatePickerPosition();\\n              }\\n              break;\\n            case 'rtl':\\n              settings.rtl = !!options.rtl;\\n              document.querySelectorAll('.clr-field').forEach(function (field) {return field.classList.toggle('clr-rtl', settings.rtl);});\\n              break;\\n            case 'margin':\\n              options.margin *= 1;\\n              settings.margin = !isNaN(options.margin) ? options.margin : settings.margin;\\n              break;\\n            case 'wrap':\\n              if (options.el && options.wrap) {\\n                wrapFields(options.el);\\n              }\\n              break;\\n            case 'formatToggle':\\n              settings.formatToggle = !!options.formatToggle;\\n              getEl('clr-format').style.display = settings.formatToggle ? 'block' : 'none';\\n              if (settings.formatToggle) {\\n                settings.format = 'auto';\\n              }\\n              break;\\n            case 'swatches':\\n              if (Array.isArray(options.swatches)) {(function () {\\n                  var swatches = [];\\n    \\n                  options.swatches.forEach(function (swatch, i) {\\n                    swatches.push(\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-swatch-\\\" + i + \\\"\\\\\\\" aria-labelledby=\\\\\\\"clr-swatch-label clr-swatch-\\\" + i + \\\"\\\\\\\" style=\\\\\\\"color: \\\" + swatch + \\\";\\\\\\\">\\\" + swatch + \\\"</button>\\\");\\n                  });\\n    \\n                  getEl('clr-swatches').innerHTML = swatches.length ? \\\"<div>\\\" + swatches.join('') + \\\"</div>\\\" : '';\\n                  settings.swatches = options.swatches.slice();})();\\n              }\\n              break;\\n            case 'swatchesOnly':\\n              settings.swatchesOnly = !!options.swatchesOnly;\\n              picker.setAttribute('data-minimal', settings.swatchesOnly);\\n              break;\\n            case 'alpha':\\n              settings.alpha = !!options.alpha;\\n              picker.setAttribute('data-alpha', settings.alpha);\\n              break;\\n            case 'inline':\\n              settings.inline = !!options.inline;\\n              picker.setAttribute('data-inline', settings.inline);\\n    \\n              if (settings.inline) {\\n                var defaultColor = options.defaultColor || settings.defaultColor;\\n    \\n                currentFormat = getColorFormatFromStr(defaultColor);\\n                updatePickerPosition();\\n                setColorFromStr(defaultColor);\\n              }\\n              break;\\n            case 'clearButton':\\n              // Backward compatibility\\n              if (typeof options.clearButton === 'object') {\\n                if (options.clearButton.label) {\\n                  settings.clearLabel = options.clearButton.label;\\n                  clearButton.innerHTML = settings.clearLabel;\\n                }\\n    \\n                options.clearButton = options.clearButton.show;\\n              }\\n    \\n              settings.clearButton = !!options.clearButton;\\n              clearButton.style.display = settings.clearButton ? 'block' : 'none';\\n              break;\\n            case 'clearLabel':\\n              settings.clearLabel = options.clearLabel;\\n              clearButton.innerHTML = settings.clearLabel;\\n              break;\\n            case 'closeButton':\\n              settings.closeButton = !!options.closeButton;\\n    \\n              if (settings.closeButton) {\\n                picker.insertBefore(closeButton, colorPreview);\\n              } else {\\n                colorPreview.appendChild(closeButton);\\n              }\\n    \\n              break;\\n            case 'closeLabel':\\n              settings.closeLabel = options.closeLabel;\\n              closeButton.innerHTML = settings.closeLabel;\\n              break;\\n            case 'a11y':\\n              var labels = options.a11y;\\n              var update = false;\\n    \\n              if (typeof labels === 'object') {\\n                for (var label in labels) {\\n                  if (labels[label] && settings.a11y[label]) {\\n                    settings.a11y[label] = labels[label];\\n                    update = true;\\n                  }\\n                }\\n              }\\n    \\n              if (update) {\\n                var openLabel = getEl('clr-open-label');\\n                var swatchLabel = getEl('clr-swatch-label');\\n    \\n                openLabel.innerHTML = settings.a11y.open;\\n                swatchLabel.innerHTML = settings.a11y.swatch;\\n                closeButton.setAttribute('aria-label', settings.a11y.close);\\n                clearButton.setAttribute('aria-label', settings.a11y.clear);\\n                hueSlider.setAttribute('aria-label', settings.a11y.hueSlider);\\n                alphaSlider.setAttribute('aria-label', settings.a11y.alphaSlider);\\n                colorValue.setAttribute('aria-label', settings.a11y.input);\\n                colorArea.setAttribute('aria-label', settings.a11y.instruction);\\n              }\\n              break;\\n            default:\\n              settings[key] = options[key];}\\n    \\n        }\\n      }\\n    \\n      /**\\n       * Add or update a virtual instance.\\n       * @param {String} selector The CSS selector of the elements to which the instance is attached.\\n       * @param {Object} options Per-instance options to apply.\\n       */\\n      function setVirtualInstance(selector, options) {\\n        if (typeof selector === 'string' && typeof options === 'object') {\\n          instances[selector] = options;\\n          hasInstance = true;\\n        }\\n      }\\n    \\n      /**\\n       * Remove a virtual instance.\\n       * @param {String} selector The CSS selector of the elements to which the instance is attached.\\n       */\\n      function removeVirtualInstance(selector) {\\n        delete instances[selector];\\n    \\n        if (Object.keys(instances).length === 0) {\\n          hasInstance = false;\\n    \\n          if (selector === currentInstanceId) {\\n            resetVirtualInstance();\\n          }\\n        }\\n      }\\n    \\n      /**\\n       * Attach a virtual instance to an element if it matches a selector.\\n       * @param {Object} element Target element that will receive a virtual instance if applicable.\\n       */\\n      function attachVirtualInstance(element) {\\n        if (hasInstance) {\\n          // These options can only be set globally, not per instance\\n          var unsupportedOptions = ['el', 'wrap', 'rtl', 'inline', 'defaultColor', 'a11y'];var _loop = function _loop(\\n    \\n          selector) {\\n            var options = instances[selector];\\n    \\n            // If the element matches an instance's CSS selector\\n            if (element.matches(selector)) {\\n              currentInstanceId = selector;\\n              defaultInstance = {};\\n    \\n              // Delete unsupported options\\n              unsupportedOptions.forEach(function (option) {return delete options[option];});\\n    \\n              // Back up the default options so we can restore them later\\n              for (var option in options) {\\n                defaultInstance[option] = Array.isArray(settings[option]) ? settings[option].slice() : settings[option];\\n              }\\n    \\n              // Set the instance's options\\n              configure(options);\\n              return \\\"break\\\";\\n            }};for (var selector in instances) {var _ret = _loop(selector);if (_ret === \\\"break\\\") break;\\n          }\\n        }\\n      }\\n    \\n      /**\\n       * Revert any per-instance options that were previously applied.\\n       */\\n      function resetVirtualInstance() {\\n        if (Object.keys(defaultInstance).length > 0) {\\n          configure(defaultInstance);\\n          currentInstanceId = '';\\n          defaultInstance = {};\\n        }\\n      }\\n    \\n      /**\\n       * Bind the color picker to input fields that match the selector.\\n       * @param {string} selector One or more selectors pointing to input fields.\\n       */\\n      function bindFields(selector) {\\n        // Show the color picker on click on the input fields that match the selector\\n        addListener(document, 'click', selector, function (event) {\\n          // Skip if inline mode is in use\\n          if (settings.inline) {\\n            return;\\n          }\\n    \\n          // Apply any per-instance options first\\n          attachVirtualInstance(event.target);\\n    \\n          currentEl = event.target;\\n          oldColor = currentEl.value;\\n          currentFormat = getColorFormatFromStr(oldColor);\\n          picker.classList.add('clr-open');\\n    \\n          updatePickerPosition();\\n          setColorFromStr(oldColor);\\n    \\n          if (settings.focusInput || settings.selectInput) {\\n            colorValue.focus({ preventScroll: true });\\n            colorValue.setSelectionRange(currentEl.selectionStart, currentEl.selectionEnd);\\n          }\\n    \\n          if (settings.selectInput) {\\n            colorValue.select();\\n          }\\n    \\n          // Always focus the first element when using keyboard navigation\\n          if (keyboardNav || settings.swatchesOnly) {\\n            getFocusableElements().shift().focus();\\n          }\\n    \\n          // Trigger an \\\"open\\\" event\\n          currentEl.dispatchEvent(new Event('open', { bubbles: true }));\\n        });\\n    \\n        // Update the color preview of the input fields that match the selector\\n        addListener(document, 'input', selector, function (event) {\\n          var parent = event.target.parentNode;\\n    \\n          // Only update the preview if the field has been previously wrapped\\n          if (parent.classList.contains('clr-field')) {\\n            parent.style.color = event.target.value;\\n          }\\n        });\\n      }\\n    \\n      /**\\n       * Update the color picker's position and the color gradient's offset\\n       */\\n      function updatePickerPosition() {\\n        var parent = container;\\n        var scrollY = window.scrollY;\\n        var pickerWidth = picker.offsetWidth;\\n        var pickerHeight = picker.offsetHeight;\\n        var reposition = { left: false, top: false };\\n        var parentStyle, parentMarginTop, parentBorderTop;\\n        var offset = { x: 0, y: 0 };\\n    \\n        if (parent) {\\n          parentStyle = window.getComputedStyle(parent);\\n          parentMarginTop = parseFloat(parentStyle.marginTop);\\n          parentBorderTop = parseFloat(parentStyle.borderTopWidth);\\n    \\n          offset = parent.getBoundingClientRect();\\n          offset.y += parentBorderTop + scrollY;\\n        }\\n    \\n        if (!settings.inline) {\\n          var coords = currentEl.getBoundingClientRect();\\n          var left = coords.x;\\n          var top = scrollY + coords.y + coords.height + settings.margin;\\n    \\n          // If the color picker is inside a custom container\\n          // set the position relative to it\\n          if (parent) {\\n            left -= offset.x;\\n            top -= offset.y;\\n    \\n            if (left + pickerWidth > parent.clientWidth) {\\n              left += coords.width - pickerWidth;\\n              reposition.left = true;\\n            }\\n    \\n            if (top + pickerHeight > parent.clientHeight - parentMarginTop) {\\n              if (pickerHeight + settings.margin <= coords.top - (offset.y - scrollY)) {\\n                top -= coords.height + pickerHeight + settings.margin * 2;\\n                reposition.top = true;\\n              }\\n            }\\n    \\n            top += parent.scrollTop;\\n    \\n            // Otherwise set the position relative to the whole document\\n          } else {\\n            if (left + pickerWidth > document.documentElement.clientWidth) {\\n              left += coords.width - pickerWidth;\\n              reposition.left = true;\\n            }\\n    \\n            if (top + pickerHeight - scrollY > document.documentElement.clientHeight) {\\n              if (pickerHeight + settings.margin <= coords.top) {\\n                top = scrollY + coords.y - pickerHeight - settings.margin;\\n                reposition.top = true;\\n              }\\n            }\\n          }\\n    \\n          picker.classList.toggle('clr-left', reposition.left);\\n          picker.classList.toggle('clr-top', reposition.top);\\n          picker.style.left = left + \\\"px\\\";\\n          picker.style.top = top + \\\"px\\\";\\n          offset.x += picker.offsetLeft;\\n          offset.y += picker.offsetTop;\\n        }\\n    \\n        colorAreaDims = {\\n          width: colorArea.offsetWidth,\\n          height: colorArea.offsetHeight,\\n          x: colorArea.offsetLeft + offset.x,\\n          y: colorArea.offsetTop + offset.y };\\n    \\n      }\\n    \\n      /**\\n       * Wrap the linked input fields in a div that adds a color preview.\\n       * @param {string} selector One or more selectors pointing to input fields.\\n       */\\n      function wrapFields(selector) {\\n        document.querySelectorAll(selector).forEach(function (field) {\\n          var parentNode = field.parentNode;\\n    \\n          if (!parentNode.classList.contains('clr-field')) {\\n            var wrapper = document.createElement('div');\\n            var classes = 'clr-field';\\n    \\n            if (settings.rtl || field.classList.contains('clr-rtl')) {\\n              classes += ' clr-rtl';\\n            }\\n    \\n            wrapper.innerHTML = \\\"<button type=\\\\\\\"button\\\\\\\" aria-labelledby=\\\\\\\"clr-open-label\\\\\\\"></button>\\\";\\n            parentNode.insertBefore(wrapper, field);\\n            wrapper.setAttribute('class', classes);\\n            wrapper.style.color = field.value;\\n            wrapper.appendChild(field);\\n          }\\n        });\\n      }\\n    \\n      /**\\n       * Close the color picker.\\n       * @param {boolean} [revert] If true, revert the color to the original value.\\n       */\\n      function closePicker(revert) {\\n        if (currentEl && !settings.inline) {\\n          var prevEl = currentEl;\\n    \\n          // Revert the color to the original value if needed\\n          if (revert) {\\n            // This will prevent the \\\"change\\\" event on the colorValue input to execute its handler\\n            currentEl = undefined;\\n    \\n            if (oldColor !== prevEl.value) {\\n              prevEl.value = oldColor;\\n    \\n              // Trigger an \\\"input\\\" event to force update the thumbnail next to the input field\\n              prevEl.dispatchEvent(new Event('input', { bubbles: true }));\\n            }\\n          }\\n    \\n          // Trigger a \\\"change\\\" event if needed\\n          setTimeout(function () {// Add this to the end of the event loop\\n            if (oldColor !== prevEl.value) {\\n              prevEl.dispatchEvent(new Event('change', { bubbles: true }));\\n            }\\n          });\\n    \\n          // Hide the picker dialog\\n          picker.classList.remove('clr-open');\\n    \\n          // Reset any previously set per-instance options\\n          if (hasInstance) {\\n            resetVirtualInstance();\\n          }\\n    \\n          // Trigger a \\\"close\\\" event\\n          prevEl.dispatchEvent(new Event('close', { bubbles: true }));\\n    \\n          if (settings.focusInput) {\\n            prevEl.focus({ preventScroll: true });\\n          }\\n    \\n          // This essentially marks the picker as closed\\n          currentEl = undefined;\\n        }\\n      }\\n    \\n      /**\\n       * Set the active color from a string.\\n       * @param {string} str String representing a color.\\n       */\\n      function setColorFromStr(str) {\\n        var rgba = strToRGBA(str);\\n        var hsva = RGBAtoHSVA(rgba);\\n    \\n        updateMarkerA11yLabel(hsva.s, hsva.v);\\n        updateColor(rgba, hsva);\\n    \\n        // Update the UI\\n        hueSlider.value = hsva.h;\\n        picker.style.color = \\\"hsl(\\\" + hsva.h + \\\", 100%, 50%)\\\";\\n        hueMarker.style.left = hsva.h / 360 * 100 + \\\"%\\\";\\n    \\n        colorMarker.style.left = colorAreaDims.width * hsva.s / 100 + \\\"px\\\";\\n        colorMarker.style.top = colorAreaDims.height - colorAreaDims.height * hsva.v / 100 + \\\"px\\\";\\n    \\n        alphaSlider.value = hsva.a * 100;\\n        alphaMarker.style.left = hsva.a * 100 + \\\"%\\\";\\n      }\\n    \\n      /**\\n       * Guess the color format from a string.\\n       * @param {string} str String representing a color.\\n       * @return {string} The color format.\\n       */\\n      function getColorFormatFromStr(str) {\\n        var format = str.substring(0, 3).toLowerCase();\\n    \\n        if (format === 'rgb' || format === 'hsl') {\\n          return format;\\n        }\\n    \\n        return 'hex';\\n      }\\n    \\n      /**\\n       * Copy the active color to the linked input field.\\n       * @param {number} [color] Color value to override the active color.\\n       */\\n      function pickColor(color) {\\n        color = color !== undefined ? color : colorValue.value;\\n    \\n        if (currentEl) {\\n          currentEl.value = color;\\n          currentEl.dispatchEvent(new Event('input', { bubbles: true }));\\n        }\\n    \\n        if (settings.onChange) {\\n          settings.onChange.call(window, color, currentEl);\\n        }\\n    \\n        document.dispatchEvent(new CustomEvent('coloris:pick', { detail: { color: color, currentEl: currentEl } }));\\n      }\\n    \\n      /**\\n       * Set the active color based on a specific point in the color gradient.\\n       * @param {number} x Left position.\\n       * @param {number} y Top position.\\n       */\\n      function setColorAtPosition(x, y) {\\n        var hsva = {\\n          h: hueSlider.value * 1,\\n          s: x / colorAreaDims.width * 100,\\n          v: 100 - y / colorAreaDims.height * 100,\\n          a: alphaSlider.value / 100 };\\n    \\n        var rgba = HSVAtoRGBA(hsva);\\n    \\n        updateMarkerA11yLabel(hsva.s, hsva.v);\\n        updateColor(rgba, hsva);\\n        pickColor();\\n      }\\n    \\n      /**\\n       * Update the color marker's accessibility label.\\n       * @param {number} saturation\\n       * @param {number} value\\n       */\\n      function updateMarkerA11yLabel(saturation, value) {\\n        var label = settings.a11y.marker;\\n    \\n        saturation = saturation.toFixed(1) * 1;\\n        value = value.toFixed(1) * 1;\\n        label = label.replace('{s}', saturation);\\n        label = label.replace('{v}', value);\\n        colorMarker.setAttribute('aria-label', label);\\n      }\\n    \\n      //\\n      /**\\n       * Get the pageX and pageY positions of the pointer.\\n       * @param {object} event The MouseEvent or TouchEvent object.\\n       * @return {object} The pageX and pageY positions.\\n       */\\n      function getPointerPosition(event) {\\n        return {\\n          pageX: event.changedTouches ? event.changedTouches[0].pageX : event.pageX,\\n          pageY: event.changedTouches ? event.changedTouches[0].pageY : event.pageY };\\n    \\n      }\\n    \\n      /**\\n       * Move the color marker when dragged.\\n       * @param {object} event The MouseEvent object.\\n       */\\n      function moveMarker(event) {\\n        var pointer = getPointerPosition(event);\\n        var x = pointer.pageX - colorAreaDims.x;\\n        var y = pointer.pageY - colorAreaDims.y;\\n    \\n        if (container) {\\n          y += container.scrollTop;\\n        }\\n    \\n        setMarkerPosition(x, y);\\n    \\n        // Prevent scrolling while dragging the marker\\n        event.preventDefault();\\n        event.stopPropagation();\\n      }\\n    \\n      /**\\n       * Move the color marker when the arrow keys are pressed.\\n       * @param {number} offsetX The horizontal amount to move.\\n       * @param {number} offsetY The vertical amount to move.\\n       */\\n      function moveMarkerOnKeydown(offsetX, offsetY) {\\n        var x = colorMarker.style.left.replace('px', '') * 1 + offsetX;\\n        var y = colorMarker.style.top.replace('px', '') * 1 + offsetY;\\n    \\n        setMarkerPosition(x, y);\\n      }\\n    \\n      /**\\n       * Set the color marker's position.\\n       * @param {number} x Left position.\\n       * @param {number} y Top position.\\n       */\\n      function setMarkerPosition(x, y) {\\n        // Make sure the marker doesn't go out of bounds\\n        x = x < 0 ? 0 : x > colorAreaDims.width ? colorAreaDims.width : x;\\n        y = y < 0 ? 0 : y > colorAreaDims.height ? colorAreaDims.height : y;\\n    \\n        // Set the position\\n        colorMarker.style.left = x + \\\"px\\\";\\n        colorMarker.style.top = y + \\\"px\\\";\\n    \\n        // Update the color\\n        setColorAtPosition(x, y);\\n    \\n        // Make sure the marker is focused\\n        colorMarker.focus();\\n      }\\n    \\n      /**\\n       * Update the color picker's input field and preview thumb.\\n       * @param {Object} rgba Red, green, blue and alpha values.\\n       * @param {Object} [hsva] Hue, saturation, value and alpha values.\\n       */\\n      function updateColor(rgba, hsva) {if (rgba === void 0) {rgba = {};}if (hsva === void 0) {hsva = {};}\\n        var format = settings.format;\\n    \\n        for (var key in rgba) {\\n          currentColor[key] = rgba[key];\\n        }\\n    \\n        for (var _key in hsva) {\\n          currentColor[_key] = hsva[_key];\\n        }\\n    \\n        var hex = RGBAToHex(currentColor);\\n        var opaqueHex = hex.substring(0, 7);\\n    \\n        colorMarker.style.color = opaqueHex;\\n        alphaMarker.parentNode.style.color = opaqueHex;\\n        alphaMarker.style.color = hex;\\n        colorPreview.style.color = hex;\\n    \\n        // Force repaint the color and alpha gradients as a workaround for a Google Chrome bug\\n        colorArea.style.display = 'none';\\n        colorArea.offsetHeight;\\n        colorArea.style.display = '';\\n        alphaMarker.nextElementSibling.style.display = 'none';\\n        alphaMarker.nextElementSibling.offsetHeight;\\n        alphaMarker.nextElementSibling.style.display = '';\\n    \\n        if (format === 'mixed') {\\n          format = currentColor.a === 1 ? 'hex' : 'rgb';\\n        } else if (format === 'auto') {\\n          format = currentFormat;\\n        }\\n    \\n        switch (format) {\\n          case 'hex':\\n            colorValue.value = hex;\\n            break;\\n          case 'rgb':\\n            colorValue.value = RGBAToStr(currentColor);\\n            break;\\n          case 'hsl':\\n            colorValue.value = HSLAToStr(HSVAtoHSLA(currentColor));\\n            break;}\\n    \\n    \\n        // Select the current format in the format switcher\\n        document.querySelector(\\\".clr-format [value=\\\\\\\"\\\" + format + \\\"\\\\\\\"]\\\").checked = true;\\n      }\\n    \\n      /**\\n       * Set the hue when its slider is moved.\\n       */\\n      function setHue() {\\n        var hue = hueSlider.value * 1;\\n        var x = colorMarker.style.left.replace('px', '') * 1;\\n        var y = colorMarker.style.top.replace('px', '') * 1;\\n    \\n        picker.style.color = \\\"hsl(\\\" + hue + \\\", 100%, 50%)\\\";\\n        hueMarker.style.left = hue / 360 * 100 + \\\"%\\\";\\n    \\n        setColorAtPosition(x, y);\\n      }\\n    \\n      /**\\n       * Set the alpha when its slider is moved.\\n       */\\n      function setAlpha() {\\n        var alpha = alphaSlider.value / 100;\\n    \\n        alphaMarker.style.left = alpha * 100 + \\\"%\\\";\\n        updateColor({ a: alpha });\\n        pickColor();\\n      }\\n    \\n      /**\\n       * Convert HSVA to RGBA.\\n       * @param {object} hsva Hue, saturation, value and alpha values.\\n       * @return {object} Red, green, blue and alpha values.\\n       */\\n      function HSVAtoRGBA(hsva) {\\n        var saturation = hsva.s / 100;\\n        var value = hsva.v / 100;\\n        var chroma = saturation * value;\\n        var hueBy60 = hsva.h / 60;\\n        var x = chroma * (1 - Math.abs(hueBy60 % 2 - 1));\\n        var m = value - chroma;\\n    \\n        chroma = chroma + m;\\n        x = x + m;\\n    \\n        var index = Math.floor(hueBy60) % 6;\\n        var red = [chroma, x, m, m, x, chroma][index];\\n        var green = [x, chroma, chroma, x, m, m][index];\\n        var blue = [m, m, x, chroma, chroma, x][index];\\n    \\n        return {\\n          r: Math.round(red * 255),\\n          g: Math.round(green * 255),\\n          b: Math.round(blue * 255),\\n          a: hsva.a };\\n    \\n      }\\n    \\n      /**\\n       * Convert HSVA to HSLA.\\n       * @param {object} hsva Hue, saturation, value and alpha values.\\n       * @return {object} Hue, saturation, lightness and alpha values.\\n       */\\n      function HSVAtoHSLA(hsva) {\\n        var value = hsva.v / 100;\\n        var lightness = value * (1 - hsva.s / 100 / 2);\\n        var saturation;\\n    \\n        if (lightness > 0 && lightness < 1) {\\n          saturation = Math.round((value - lightness) / Math.min(lightness, 1 - lightness) * 100);\\n        }\\n    \\n        return {\\n          h: hsva.h,\\n          s: saturation || 0,\\n          l: Math.round(lightness * 100),\\n          a: hsva.a };\\n    \\n      }\\n    \\n      /**\\n       * Convert RGBA to HSVA.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {object} Hue, saturation, value and alpha values.\\n       */\\n      function RGBAtoHSVA(rgba) {\\n        var red = rgba.r / 255;\\n        var green = rgba.g / 255;\\n        var blue = rgba.b / 255;\\n        var xmax = Math.max(red, green, blue);\\n        var xmin = Math.min(red, green, blue);\\n        var chroma = xmax - xmin;\\n        var value = xmax;\\n        var hue = 0;\\n        var saturation = 0;\\n    \\n        if (chroma) {\\n          if (xmax === red) {hue = (green - blue) / chroma;}\\n          if (xmax === green) {hue = 2 + (blue - red) / chroma;}\\n          if (xmax === blue) {hue = 4 + (red - green) / chroma;}\\n          if (xmax) {saturation = chroma / xmax;}\\n        }\\n    \\n        hue = Math.floor(hue * 60);\\n    \\n        return {\\n          h: hue < 0 ? hue + 360 : hue,\\n          s: Math.round(saturation * 100),\\n          v: Math.round(value * 100),\\n          a: rgba.a };\\n    \\n      }\\n    \\n      /**\\n       * Parse a string to RGBA.\\n       * @param {string} str String representing a color.\\n       * @return {object} Red, green, blue and alpha values.\\n       */\\n      function strToRGBA(str) {\\n        var regex = /^((rgba)|rgb)[\\\\D]+([\\\\d.]+)[\\\\D]+([\\\\d.]+)[\\\\D]+([\\\\d.]+)[\\\\D]*?([\\\\d.]+|$)/i;\\n        var match, rgba;\\n    \\n        // Default to black for invalid color strings\\n        ctx.fillStyle = '#000';\\n    \\n        // Use canvas to convert the string to a valid color string\\n        ctx.fillStyle = str;\\n        match = regex.exec(ctx.fillStyle);\\n    \\n        if (match) {\\n          rgba = {\\n            r: match[3] * 1,\\n            g: match[4] * 1,\\n            b: match[5] * 1,\\n            a: match[6] * 1 };\\n    \\n    \\n          // Workaround to mitigate a Chromium bug where the alpha value is rounded incorrectly\\n          rgba.a = +rgba.a.toFixed(2);\\n    \\n        } else {\\n          match = ctx.fillStyle.replace('#', '').match(/.{2}/g).map(function (h) {return parseInt(h, 16);});\\n          rgba = {\\n            r: match[0],\\n            g: match[1],\\n            b: match[2],\\n            a: 1 };\\n    \\n        }\\n    \\n        return rgba;\\n      }\\n    \\n      /**\\n       * Convert RGBA to Hex.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {string} Hex color string.\\n       */\\n      function RGBAToHex(rgba) {\\n        var R = rgba.r.toString(16);\\n        var G = rgba.g.toString(16);\\n        var B = rgba.b.toString(16);\\n        var A = '';\\n    \\n        if (rgba.r < 16) {\\n          R = '0' + R;\\n        }\\n    \\n        if (rgba.g < 16) {\\n          G = '0' + G;\\n        }\\n    \\n        if (rgba.b < 16) {\\n          B = '0' + B;\\n        }\\n    \\n        if (settings.alpha && (rgba.a < 1 || settings.forceAlpha)) {\\n          var alpha = rgba.a * 255 | 0;\\n          A = alpha.toString(16);\\n    \\n          if (alpha < 16) {\\n            A = '0' + A;\\n          }\\n        }\\n    \\n        return '#' + R + G + B + A;\\n      }\\n    \\n      /**\\n       * Convert RGBA values to a CSS rgb/rgba string.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {string} CSS color string.\\n       */\\n      function RGBAToStr(rgba) {\\n        if (!settings.alpha || rgba.a === 1 && !settings.forceAlpha) {\\n          return \\\"rgb(\\\" + rgba.r + \\\", \\\" + rgba.g + \\\", \\\" + rgba.b + \\\")\\\";\\n        } else {\\n          return \\\"rgba(\\\" + rgba.r + \\\", \\\" + rgba.g + \\\", \\\" + rgba.b + \\\", \\\" + rgba.a + \\\")\\\";\\n        }\\n      }\\n    \\n      /**\\n       * Convert HSLA values to a CSS hsl/hsla string.\\n       * @param {object} hsla Hue, saturation, lightness and alpha values.\\n       * @return {string} CSS color string.\\n       */\\n      function HSLAToStr(hsla) {\\n        if (!settings.alpha || hsla.a === 1 && !settings.forceAlpha) {\\n          return \\\"hsl(\\\" + hsla.h + \\\", \\\" + hsla.s + \\\"%, \\\" + hsla.l + \\\"%)\\\";\\n        } else {\\n          return \\\"hsla(\\\" + hsla.h + \\\", \\\" + hsla.s + \\\"%, \\\" + hsla.l + \\\"%, \\\" + hsla.a + \\\")\\\";\\n        }\\n      }\\n    \\n      /**\\n       * Init the color picker.\\n       */\\n      function init() {\\n        // Render the UI\\n        container = undefined;\\n        picker = document.createElement('div');\\n        picker.setAttribute('id', 'clr-picker');\\n        picker.className = 'clr-picker';\\n        picker.innerHTML =\\n        \\\"<input id=\\\\\\\"clr-color-value\\\\\\\" name=\\\\\\\"clr-color-value\\\\\\\" class=\\\\\\\"clr-color\\\\\\\" type=\\\\\\\"text\\\\\\\" value=\\\\\\\"\\\\\\\" spellcheck=\\\\\\\"false\\\\\\\" aria-label=\\\\\\\"\\\" + settings.a11y.input + \\\"\\\\\\\">\\\" + (\\\"<div id=\\\\\\\"clr-color-area\\\\\\\" class=\\\\\\\"clr-gradient\\\\\\\" role=\\\\\\\"application\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.instruction + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-color-marker\\\" class=\\\"clr-marker\\\" tabindex=\\\"0\\\"></div>' +\\n        '</div>' +\\n        '<div class=\\\"clr-hue\\\">' + (\\\"<input id=\\\\\\\"clr-hue-slider\\\\\\\" name=\\\\\\\"clr-hue-slider\\\\\\\" type=\\\\\\\"range\\\\\\\" min=\\\\\\\"0\\\\\\\" max=\\\\\\\"360\\\\\\\" step=\\\\\\\"1\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.hueSlider + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-hue-marker\\\"></div>' +\\n        '</div>' +\\n        '<div class=\\\"clr-alpha\\\">' + (\\\"<input id=\\\\\\\"clr-alpha-slider\\\\\\\" name=\\\\\\\"clr-alpha-slider\\\\\\\" type=\\\\\\\"range\\\\\\\" min=\\\\\\\"0\\\\\\\" max=\\\\\\\"100\\\\\\\" step=\\\\\\\"1\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.alphaSlider + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-alpha-marker\\\"></div>' +\\n        '<span></span>' +\\n        '</div>' +\\n        '<div id=\\\"clr-format\\\" class=\\\"clr-format\\\">' +\\n        '<fieldset class=\\\"clr-segmented\\\">' + (\\\"<legend>\\\" +\\n        settings.a11y.format + \\\"</legend>\\\") +\\n        '<input id=\\\"clr-f1\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"hex\\\">' +\\n        '<label for=\\\"clr-f1\\\">Hex</label>' +\\n        '<input id=\\\"clr-f2\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"rgb\\\">' +\\n        '<label for=\\\"clr-f2\\\">RGB</label>' +\\n        '<input id=\\\"clr-f3\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"hsl\\\">' +\\n        '<label for=\\\"clr-f3\\\">HSL</label>' +\\n        '<span></span>' +\\n        '</fieldset>' +\\n        '</div>' +\\n        '<div id=\\\"clr-swatches\\\" class=\\\"clr-swatches\\\"></div>' + (\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-clear\\\\\\\" class=\\\\\\\"clr-clear\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.clear + \\\"\\\\\\\">\\\" + settings.clearLabel + \\\"</button>\\\") +\\n        '<div id=\\\"clr-color-preview\\\" class=\\\"clr-preview\\\">' + (\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-close\\\\\\\" class=\\\\\\\"clr-close\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.close + \\\"\\\\\\\">\\\" + settings.closeLabel + \\\"</button>\\\") +\\n        '</div>' + (\\\"<span id=\\\\\\\"clr-open-label\\\\\\\" hidden>\\\" +\\n        settings.a11y.open + \\\"</span>\\\") + (\\\"<span id=\\\\\\\"clr-swatch-label\\\\\\\" hidden>\\\" +\\n        settings.a11y.swatch + \\\"</span>\\\");\\n    \\n        // Append the color picker to the DOM\\n        document.body.appendChild(picker);\\n    \\n        // Reference the UI elements\\n        colorArea = getEl('clr-color-area');\\n        colorMarker = getEl('clr-color-marker');\\n        clearButton = getEl('clr-clear');\\n        closeButton = getEl('clr-close');\\n        colorPreview = getEl('clr-color-preview');\\n        colorValue = getEl('clr-color-value');\\n        hueSlider = getEl('clr-hue-slider');\\n        hueMarker = getEl('clr-hue-marker');\\n        alphaSlider = getEl('clr-alpha-slider');\\n        alphaMarker = getEl('clr-alpha-marker');\\n    \\n        // Bind the picker to the default selector\\n        bindFields(settings.el);\\n        wrapFields(settings.el);\\n    \\n        addListener(picker, 'mousedown', function (event) {\\n          picker.classList.remove('clr-keyboard-nav');\\n          event.stopPropagation();\\n        });\\n    \\n        addListener(colorArea, 'mousedown', function (event) {\\n          addListener(document, 'mousemove', moveMarker);\\n        });\\n    \\n        addListener(colorArea, 'touchstart', function (event) {\\n          document.addEventListener('touchmove', moveMarker, { passive: false });\\n        });\\n    \\n        addListener(colorMarker, 'mousedown', function (event) {\\n          addListener(document, 'mousemove', moveMarker);\\n        });\\n    \\n        addListener(colorMarker, 'touchstart', function (event) {\\n          document.addEventListener('touchmove', moveMarker, { passive: false });\\n        });\\n    \\n        addListener(colorValue, 'change', function (event) {\\n          var value = colorValue.value;\\n    \\n          if (currentEl || settings.inline) {\\n            var color = value === '' ? value : setColorFromStr(value);\\n            pickColor(color);\\n          }\\n        });\\n    \\n        addListener(clearButton, 'click', function (event) {\\n          pickColor('');\\n          closePicker();\\n        });\\n    \\n        addListener(closeButton, 'click', function (event) {\\n          pickColor();\\n          closePicker();\\n        });\\n    \\n        addListener(getEl('clr-format'), 'click', '.clr-format input', function (event) {\\n          currentFormat = event.target.value;\\n          updateColor();\\n          pickColor();\\n        });\\n    \\n        addListener(picker, 'click', '.clr-swatches button', function (event) {\\n          setColorFromStr(event.target.textContent);\\n          pickColor();\\n    \\n          if (settings.swatchesOnly) {\\n            closePicker();\\n          }\\n        });\\n    \\n        addListener(document, 'mouseup', function (event) {\\n          document.removeEventListener('mousemove', moveMarker);\\n        });\\n    \\n        addListener(document, 'touchend', function (event) {\\n          document.removeEventListener('touchmove', moveMarker);\\n        });\\n    \\n        addListener(document, 'mousedown', function (event) {\\n          keyboardNav = false;\\n          picker.classList.remove('clr-keyboard-nav');\\n          closePicker();\\n        });\\n    \\n        addListener(document, 'keydown', function (event) {\\n          var key = event.key;\\n          var target = event.target;\\n          var shiftKey = event.shiftKey;\\n          var navKeys = ['Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\\n    \\n          if (key === 'Escape') {\\n            closePicker(true);\\n    \\n            // Display focus rings when using the keyboard\\n          } else if (navKeys.includes(key)) {\\n            keyboardNav = true;\\n            picker.classList.add('clr-keyboard-nav');\\n          }\\n    \\n          // Trap the focus within the color picker while it's open\\n          if (key === 'Tab' && target.matches('.clr-picker *')) {\\n            var focusables = getFocusableElements();\\n            var firstFocusable = focusables.shift();\\n            var lastFocusable = focusables.pop();\\n    \\n            if (shiftKey && target === firstFocusable) {\\n              lastFocusable.focus();\\n              event.preventDefault();\\n            } else if (!shiftKey && target === lastFocusable) {\\n              firstFocusable.focus();\\n              event.preventDefault();\\n            }\\n          }\\n        });\\n    \\n        addListener(document, 'click', '.clr-field button', function (event) {\\n          // Reset any previously set per-instance options\\n          if (hasInstance) {\\n            resetVirtualInstance();\\n          }\\n    \\n          // Open the color picker\\n          event.target.nextElementSibling.dispatchEvent(new Event('click', { bubbles: true }));\\n        });\\n    \\n        addListener(colorMarker, 'keydown', function (event) {\\n          var movements = {\\n            ArrowUp: [0, -1],\\n            ArrowDown: [0, 1],\\n            ArrowLeft: [-1, 0],\\n            ArrowRight: [1, 0] };\\n    \\n    \\n          if (Object.keys(movements).includes(event.key)) {\\n            moveMarkerOnKeydown.apply(void 0, movements[event.key]);\\n            event.preventDefault();\\n          }\\n        });\\n    \\n        addListener(colorArea, 'click', moveMarker);\\n        addListener(hueSlider, 'input', setHue);\\n        addListener(alphaSlider, 'input', setAlpha);\\n      }\\n    \\n      /**\\n       * Return a list of focusable elements within the color picker.\\n       * @return {array} The list of focusable DOM elemnts.\\n       */\\n      function getFocusableElements() {\\n        var controls = Array.from(picker.querySelectorAll('input, button'));\\n        var focusables = controls.filter(function (node) {return !!node.offsetWidth;});\\n    \\n        return focusables;\\n      }\\n    \\n      /**\\n       * Shortcut for getElementById to optimize the minified JS.\\n       * @param {string} id The element id.\\n       * @return {object} The DOM element with the provided id.\\n       */\\n      function getEl(id) {\\n        return document.getElementById(id);\\n      }\\n    \\n      /**\\n       * Shortcut for addEventListener to optimize the minified JS.\\n       * @param {object} context The context to which the listener is attached.\\n       * @param {string} type Event type.\\n       * @param {(string|function)} selector Event target if delegation is used, event handler if not.\\n       * @param {function} [fn] Event handler if delegation is used.\\n       */\\n      function addListener(context, type, selector, fn) {\\n        var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\\n    \\n        // Delegate event to the target of the selector\\n        if (typeof selector === 'string') {\\n          context.addEventListener(type, function (event) {\\n            if (matches.call(event.target, selector)) {\\n              fn.call(event.target, event);\\n            }\\n          });\\n    \\n          // If the selector is not a string then it's a function\\n          // in which case we need a regular event listener\\n        } else {\\n          fn = selector;\\n          context.addEventListener(type, fn);\\n        }\\n      }\\n    \\n      /**\\n       * Call a function only when the DOM is ready.\\n       * @param {function} fn The function to call.\\n       * @param {array} [args] Arguments to pass to the function.\\n       */\\n      function DOMReady(fn, args) {\\n        args = args !== undefined ? args : [];\\n    \\n        if (document.readyState !== 'loading') {\\n          fn.apply(void 0, args);\\n        } else {\\n          document.addEventListener('DOMContentLoaded', function () {\\n            fn.apply(void 0, args);\\n          });\\n        }\\n      }\\n    \\n      // Polyfill for Nodelist.forEach\\n      if (NodeList !== undefined && NodeList.prototype && !NodeList.prototype.forEach) {\\n        NodeList.prototype.forEach = Array.prototype.forEach;\\n      }\\n    \\n      // Expose the color picker to the global scope\\n      window.Coloris = function () {\\n        var methods = {\\n          set: configure,\\n          wrap: wrapFields,\\n          close: closePicker,\\n          setInstance: setVirtualInstance,\\n          removeInstance: removeVirtualInstance,\\n          updatePosition: updatePickerPosition };\\n    \\n    \\n        function Coloris(options) {\\n          DOMReady(function () {\\n            if (options) {\\n              if (typeof options === 'string') {\\n                bindFields(options);\\n              } else {\\n                configure(options);\\n              }\\n            }\\n          });\\n        }var _loop2 = function _loop2(\\n    \\n        key) {\\n          Coloris[key] = function () {for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {args[_key2] = arguments[_key2];}\\n            DOMReady(methods[key], args);\\n          };};for (var key in methods) {_loop2(key);\\n        }\\n    \\n        return Coloris;\\n      }();\\n    \\n      // Init the color picker when the DOM is ready\\n      DOMReady(init);\\n    \\n    })(window, document, Math);\\n  </script>\\n  \\n  <!-- Example code -->\\n  <a href=\\\"https://github.com/mdbassit/Coloris\\\">View <b>Coloris</b> on GitHub</a>\\n    <div class=\\\"examples\\\">\\n      <div class=\\\"example square\\\">\\n        <p style=\\\"color: white;\\\">Color Picker</p>\\n        <input type=\\\"text\\\" class=\\\"\\\" id=\\\"colorName\\\" value=\\\"Black\\\">\\n        <input type=\\\"text\\\" class=\\\"coloris instance1\\\" id=\\\"colorCode\\\" value=\\\"#000000\\\">\\n      </div>\\n      <div class=\\\"example square\\\">\\n        <input type=\\\"text\\\" class=\\\"coloris instance2\\\" id=\\\"colorCode\\\" value=\\\"#000000\\\">\\n      </div>\\n    </div>\\n    \\n    <!--script type=\\\"text/javascript\\\" src=\\\"coloris.min.js\\\"></script-->\\n    <script type=\\\"text/javascript\\\">\\n    Coloris({ el: '.coloris' });\\n    \\n    function getColorName( color ) {\\n      //const cc = document.getElementById( 'colorCode' );\\n      const cn = document.getElementById( 'colorName' );\\n      //const name = colorCodeToName[cc.value.toUpperCase()];\\n      const name = colorCodeToName[color.toUpperCase()];\\n      cn.value = name;\\n    }\\n    \\n    Coloris.setInstance('.instance1', {\\n      theme: 'pill',\\n      themeMode: 'dark',\\n      //format: 'hex', // if enabled then disable \\\"formatToggle\\\"\\n      formatToggle: true,\\n      closeButton: true,\\n      clearButton: true,\\n      defaultColor: '#000000',\\n      onChange: getColorName,\\n      swatches: [\\n        // // Row 1\\n        // '#067bc2',\\n        // '#84bcda',\\n        // '#80e377',\\n        // '#ecc30b',\\n        // '#f37748',\\n        // '#d56062',\\n        // // Row 2\\n        // '#067bc2',\\n        // '#84bcda',\\n        // '#80e377',\\n        // '#ecc30b',\\n        // '#f37748',\\n        // '#d56062',\\n        \\\"#000000\\\",\\n        \\\"#000080\\\",\\n        \\\"#00008B\\\",\\n        \\\"#0000CD\\\",\\n        \\\"#0000FF\\\",\\n        \\\"#006400\\\",\\n        \\\"#008000\\\",\\n        \\\"#008080\\\",\\n        \\\"#008B8B\\\",\\n        \\\"#00BFFF\\\",\\n        \\\"#00CED1\\\",\\n        \\\"#00FA9A\\\",\\n        \\\"#00FF00\\\",\\n        \\\"#00FF7F\\\",\\n        \\\"#00FFFF\\\",\\n        \\\"#191970\\\",\\n        \\\"#1E90FF\\\",\\n        \\\"#20B2AA\\\",\\n        \\\"#228B22\\\",\\n        \\\"#2E8B57\\\",\\n        \\\"#2F4F4F\\\",\\n        \\\"#32CD32\\\",\\n        \\\"#3CB371\\\",\\n        \\\"#40E0D0\\\",\\n        \\\"#4169E1\\\",\\n        \\\"#4682B4\\\",\\n        \\\"#483D8B\\\",\\n        \\\"#48D1CC\\\",\\n        \\\"#4B0082\\\",\\n        \\\"#556B2F\\\",\\n        \\\"#5F9EA0\\\",\\n        \\\"#6495ED\\\",\\n        \\\"#663399\\\",\\n        \\\"#66CDAA\\\",\\n        \\\"#696969\\\",\\n        \\\"#6A5ACD\\\",\\n        \\\"#6B8E23\\\",\\n        \\\"#708090\\\",\\n        \\\"#778899\\\",\\n        \\\"#7B68EE\\\",\\n        \\\"#7CFC00\\\",\\n        \\\"#7FFF00\\\",\\n        \\\"#7FFFD4\\\",\\n        \\\"#800000\\\",\\n        \\\"#800080\\\",\\n        \\\"#808000\\\",\\n        \\\"#808080\\\",\\n        \\\"#87CEEB\\\",\\n        \\\"#87CEFA\\\",\\n        \\\"#8A2BE2\\\",\\n        \\\"#8B0000\\\",\\n        \\\"#8B008B\\\",\\n        \\\"#8B4513\\\",\\n        \\\"#8FBC8F\\\",\\n        \\\"#90EE90\\\",\\n        \\\"#9370DB\\\",\\n        \\\"#9400D3\\\",\\n        \\\"#98FB98\\\",\\n        \\\"#9932CC\\\",\\n        \\\"#9ACD32\\\",\\n        \\\"#A0522D\\\",\\n        \\\"#A52A2A\\\",\\n        \\\"#A9A9A9\\\",\\n        \\\"#ADD8E6\\\",\\n        \\\"#ADFF2F\\\",\\n        \\\"#AFEEEE\\\",\\n        \\\"#B0C4DE\\\",\\n        \\\"#B0E0E6\\\",\\n        \\\"#B22222\\\",\\n        \\\"#B8860B\\\",\\n        \\\"#BA55D3\\\",\\n        \\\"#BC8F8F\\\",\\n        \\\"#BDB76B\\\",\\n        \\\"#C0C0C0\\\",\\n        \\\"#C71585\\\",\\n        \\\"#CD5C5C\\\",\\n        \\\"#CD853F\\\",\\n        \\\"#D2691E\\\",\\n        \\\"#D2B48C\\\",\\n        \\\"#D3D3D3\\\",\\n        \\\"#D8BFD8\\\",\\n        \\\"#DA70D6\\\",\\n        \\\"#DAA520\\\",\\n        \\\"#DB7093\\\",\\n        \\\"#DC143C\\\",\\n        \\\"#DCDCDC\\\",\\n        \\\"#DDA0DD\\\",\\n        \\\"#DEB887\\\",\\n        \\\"#E0FFFF\\\",\\n        \\\"#E6E6FA\\\",\\n        \\\"#E9967A\\\",\\n        \\\"#EE82EE\\\",\\n        \\\"#EEE8AA\\\",\\n        \\\"#F08080\\\",\\n        \\\"#F0E68C\\\",\\n        \\\"#F0F8FF\\\",\\n        \\\"#F0FFF0\\\",\\n        \\\"#F0FFFF\\\",\\n        \\\"#F4A460\\\",\\n        \\\"#F5DEB3\\\",\\n        \\\"#F5F5DC\\\",\\n        \\\"#F5F5F5\\\",\\n        \\\"#F5FFFA\\\",\\n        \\\"#F8F8FF\\\",\\n        \\\"#FA8072\\\",\\n        \\\"#FAEBD7\\\",\\n        \\\"#FAF0E6\\\",\\n        \\\"#FAFAD2\\\",\\n        \\\"#FDF5E6\\\",\\n        \\\"#FF0000\\\",\\n        \\\"#FF00FF\\\",\\n        \\\"#FF1493\\\",\\n        \\\"#FF4500\\\",\\n        \\\"#FF6347\\\",\\n        \\\"#FF69B4\\\",\\n        \\\"#FF7F50\\\",\\n        \\\"#FF8C00\\\",\\n        \\\"#FFA07A\\\",\\n        \\\"#FFA500\\\",\\n        \\\"#FFB6C1\\\",\\n        \\\"#FFC0CB\\\",\\n        \\\"#FFD700\\\",\\n        \\\"#FFDAB9\\\",\\n        \\\"#FFDEAD\\\",\\n        \\\"#FFE4B5\\\",\\n        \\\"#FFE4C4\\\",\\n        \\\"#FFE4E1\\\",\\n        \\\"#FFEBCD\\\",\\n        \\\"#FFEFD5\\\",\\n        \\\"#FFF0F5\\\",\\n        \\\"#FFF5EE\\\",\\n        \\\"#FFF8DC\\\",\\n        \\\"#FFFACD\\\",\\n        \\\"#FFFAF0\\\",\\n        \\\"#FFFAFA\\\",\\n        \\\"#FFFF00\\\",\\n        \\\"#FFFFE0\\\",\\n        \\\"#FFFFF0\\\",\\n        \\\"#FFFFFF\\\"\\n      ]\\n    });\\n    \\n    Coloris.setInstance('.instance2', {\\n      theme: 'pill',\\n      themeMode: 'dark',\\n      //format: 'hex', // if enabled then disable \\\"formatToggle\\\"\\n      formatToggle: true,\\n      closeButton: true,\\n      clearButton: true,\\n      defaultColor: '#000000',\\n      onChange: getColorName,\\n      swatches: [\\n        \\\"#f9ebea\\\",\\n        \\\"#f2d7d5\\\",\\n        \\\"#e6b0aa\\\",\\n        \\\"#d98880\\\",\\n        \\\"#cd6155\\\",\\n        \\\"#c0392b\\\",\\n        \\\"#a93226\\\",\\n        \\\"#922b21\\\",\\n        \\\"#7b241c\\\",\\n        \\\"#641e16\\\",\\n        \\\"#fdedec\\\",\\n        \\\"#fadbd8\\\",\\n        \\\"#f5b7b1\\\",\\n        \\\"#f1948a\\\",\\n        \\\"#ec7063\\\",\\n        \\\"#e74c3c\\\",\\n        \\\"#cb4335\\\",\\n        \\\"#b03a2e\\\",\\n        \\\"#943126\\\",\\n        \\\"#78281f\\\",\\n        \\\"#f5eef8\\\",\\n        \\\"#ebdef0\\\",\\n        \\\"#d7bde2\\\",\\n        \\\"#c39bd3\\\",\\n        \\\"#af7ac5\\\",\\n        \\\"#9b59b6\\\",\\n        \\\"#884ea0\\\",\\n        \\\"#76448a\\\",\\n        \\\"#633974\\\",\\n        \\\"#512e5f\\\",\\n        \\\"#f4ecf7\\\",\\n        \\\"#e8daef\\\",\\n        \\\"#d2b4de\\\",\\n        \\\"#bb8fce\\\",\\n        \\\"#a569bd\\\",\\n        \\\"#8e44ad\\\",\\n        \\\"#7d3c98\\\",\\n        \\\"#6c3483\\\",\\n        \\\"#5b2c6f\\\",\\n        \\\"#4a235a\\\",\\n        \\\"#eaf2f8\\\",\\n        \\\"#d4e6f1\\\",\\n        \\\"#a9cce3\\\",\\n        \\\"#7fb3d5\\\",\\n        \\\"#5499c7\\\",\\n        \\\"#2980b9\\\",\\n        \\\"#2471a3\\\",\\n        \\\"#1f618d\\\",\\n        \\\"#1a5276\\\",\\n        \\\"#154360\\\",\\n        \\\"#ebf5fb\\\",\\n        \\\"#d6eaf8\\\",\\n        \\\"#aed6f1\\\",\\n        \\\"#85c1e9\\\",\\n        \\\"#5dade2\\\",\\n        \\\"#3498db\\\",\\n        \\\"#2e86c1\\\",\\n        \\\"#2874a6\\\",\\n        \\\"#21618c\\\",\\n        \\\"#1b4f72\\\",\\n        \\\"#e8f8f5\\\",\\n        \\\"#d1f2eb\\\",\\n        \\\"#a3e4d7\\\",\\n        \\\"#76d7c4\\\",\\n        \\\"#48c9b0\\\",\\n        \\\"#1abc9c\\\",\\n        \\\"#17a589\\\",\\n        \\\"#148f77\\\",\\n        \\\"#117864\\\",\\n        \\\"#0e6251\\\",\\n        \\\"#e8f6f3\\\",\\n        \\\"#d0ece7\\\",\\n        \\\"#a2d9ce\\\",\\n        \\\"#73c6b6\\\",\\n        \\\"#45b39d\\\",\\n        \\\"#16a085\\\",\\n        \\\"#138d75\\\",\\n        \\\"#117a65\\\",\\n        \\\"#0e6655\\\",\\n        \\\"#0b5345\\\",\\n        \\\"#e9f7ef\\\",\\n        \\\"#d4efdf\\\",\\n        \\\"#a9dfbf\\\",\\n        \\\"#7dcea0\\\",\\n        \\\"#52be80\\\",\\n        \\\"#27ae60\\\",\\n        \\\"#229954\\\",\\n        \\\"#1e8449\\\",\\n        \\\"#196f3d\\\",\\n        \\\"#145a32\\\",\\n        \\\"#eafaf1\\\",\\n        \\\"#d5f5e3\\\",\\n        \\\"#abebc6\\\",\\n        \\\"#82e0aa\\\",\\n        \\\"#58d68d\\\",\\n        \\\"#2ecc71\\\",\\n        \\\"#28b463\\\",\\n        \\\"#239b56\\\",\\n        \\\"#1d8348\\\",\\n        \\\"#186a3b\\\",\\n        \\\"#fef9e7\\\",\\n        \\\"#fcf3cf\\\",\\n        \\\"#f9e79f\\\",\\n        \\\"#f7dc6f\\\",\\n        \\\"#f4d03f\\\",\\n        \\\"#f1c40f\\\",\\n        \\\"#d4ac0d\\\",\\n        \\\"#b7950b\\\",\\n        \\\"#9a7d0a\\\",\\n        \\\"#7d6608\\\",\\n        \\\"#fef5e7\\\",\\n        \\\"#fdebd0\\\",\\n        \\\"#fad7a0\\\",\\n        \\\"#f8c471\\\",\\n        \\\"#f5b041\\\",\\n        \\\"#f39c12\\\",\\n        \\\"#d68910\\\",\\n        \\\"#b9770e\\\",\\n        \\\"#9c640c\\\",\\n        \\\"#7e5109\\\",\\n        \\\"#fdf2e9\\\",\\n        \\\"#fae5d3\\\",\\n        \\\"#f5cba7\\\",\\n        \\\"#f0b27a\\\",\\n        \\\"#eb984e\\\",\\n        \\\"#e67e22\\\",\\n        \\\"#ca6f1e\\\",\\n        \\\"#af601a\\\",\\n        \\\"#935116\\\",\\n        \\\"#784212\\\",\\n        \\\"#fbeee6\\\",\\n        \\\"#f6ddcc\\\",\\n        \\\"#edbb99\\\",\\n        \\\"#e59866\\\",\\n        \\\"#dc7633\\\",\\n        \\\"#d35400\\\",\\n        \\\"#ba4a00\\\",\\n        \\\"#a04000\\\",\\n        \\\"#873600\\\",\\n        \\\"#6e2c00\\\",\\n        \\\"#fdfefe\\\",\\n        \\\"#fbfcfc\\\",\\n        \\\"#f7f9f9\\\",\\n        \\\"#f4f6f7\\\",\\n        \\\"#f0f3f4\\\",\\n        \\\"#ecf0f1\\\",\\n        \\\"#d0d3d4\\\",\\n        \\\"#b3b6b7\\\",\\n        \\\"#979a9a\\\",\\n        \\\"#7b7d7d\\\",\\n        \\\"#f8f9f9\\\",\\n        \\\"#f2f3f4\\\",\\n        \\\"#e5e7e9\\\",\\n        \\\"#d7dbdd\\\",\\n        \\\"#cacfd2\\\",\\n        \\\"#bdc3c7\\\",\\n        \\\"#a6acaf\\\",\\n        \\\"#909497\\\",\\n        \\\"#797d7f\\\",\\n        \\\"#626567\\\",\\n        \\\"#f4f6f6\\\",\\n        \\\"#eaeded\\\",\\n        \\\"#d5dbdb\\\",\\n        \\\"#bfc9ca\\\",\\n        \\\"#aab7b8\\\",\\n        \\\"#95a5a6\\\",\\n        \\\"#839192\\\",\\n        \\\"#717d7e\\\",\\n        \\\"#5f6a6a\\\",\\n        \\\"#4d5656\\\",\\n        \\\"#f2f4f4\\\",\\n        \\\"#e5e8e8\\\",\\n        \\\"#ccd1d1\\\",\\n        \\\"#b2babb\\\",\\n        \\\"#99a3a4\\\",\\n        \\\"#7f8c8d\\\",\\n        \\\"#707b7c\\\",\\n        \\\"#616a6b\\\",\\n        \\\"#515a5a\\\",\\n        \\\"#424949\\\",\\n        \\\"#ebedef\\\",\\n        \\\"#d6dbdf\\\",\\n        \\\"#aeb6bf\\\",\\n        \\\"#85929e\\\",\\n        \\\"#5d6d7e\\\",\\n        \\\"#34495e\\\",\\n        \\\"#2e4053\\\",\\n        \\\"#283747\\\",\\n        \\\"#212f3c\\\",\\n        \\\"#1b2631\\\",\\n        \\\"#eaecee\\\",\\n        \\\"#d5d8dc\\\",\\n        \\\"#abb2b9\\\",\\n        \\\"#808b96\\\",\\n        \\\"#566573\\\",\\n        \\\"#2c3e50\\\",\\n        \\\"#273746\\\",\\n        \\\"#212f3d\\\",\\n        \\\"#1c2833\\\",\\n        \\\"#17202a\\\",\\n        \\\"#CD5C5C\\\",\\n        \\\"#F08080\\\",\\n        \\\"#FA8072\\\",\\n        \\\"#E9967A\\\",\\n        \\\"#FFA07A\\\",\\n        \\\"#DFFF00\\\",\\n        \\\"#FFBF00\\\",\\n        \\\"#FF7F50\\\",\\n        \\\"#DE3163\\\",\\n        \\\"#9FE2BF\\\",\\n        \\\"#40E0D0\\\",\\n        \\\"#6495ED\\\",\\n        \\\"#CCCCFF\\\",\\n        \\\"#FFFFFF\\\",\\n        \\\"#C0C0C0\\\",\\n        \\\"#808080\\\",\\n        \\\"#000000\\\",\\n        \\\"#FF0000\\\",\\n        \\\"#800000\\\",\\n        \\\"#FFFF00\\\",\\n        \\\"#808000\\\",\\n        \\\"#00FF00\\\",\\n        \\\"#008000\\\",\\n        \\\"#00FFFF\\\",\\n        \\\"#008080\\\",\\n        \\\"#0000FF\\\",\\n        \\\"#000080\\\",\\n        \\\"#FF00FF\\\",\\n        \\\"#800080\\\"\\n      ]\\n    });\\n    \\n    const colorNameToCode = {\\n      \\\"AliceBlue\\\": \\\"#F0F8FF\\\",\\n      \\\"AntiqueWhite\\\": \\\"#FAEBD7\\\",\\n      \\\"Aqua\\\": \\\"#00FFFF\\\",\\n      \\\"Aquamarine\\\": \\\"#7FFFD4\\\",\\n      \\\"Azure\\\": \\\"#F0FFFF\\\",\\n      \\\"Beige\\\": \\\"#F5F5DC\\\",\\n      \\\"Bisque\\\": \\\"#FFE4C4\\\",\\n      \\\"Black\\\": \\\"#000000\\\",\\n      \\\"BlanchedAlmond\\\": \\\"#FFEBCD\\\",\\n      \\\"Blue\\\": \\\"#0000FF\\\",\\n      \\\"BlueViolet\\\": \\\"#8A2BE2\\\",\\n      \\\"Brown\\\": \\\"#A52A2A\\\",\\n      \\\"BurlyWood\\\": \\\"#DEB887\\\",\\n      \\\"CadetBlue\\\": \\\"#5F9EA0\\\",\\n      \\\"Chartreuse\\\": \\\"#7FFF00\\\",\\n      \\\"Chocolate\\\": \\\"#D2691E\\\",\\n      \\\"Coral\\\": \\\"#FF7F50\\\",\\n      \\\"CornflowerBlue\\\": \\\"#6495ED\\\",\\n      \\\"Cornsilk\\\": \\\"#FFF8DC\\\",\\n      \\\"Crimson\\\": \\\"#DC143C\\\",\\n      \\\"Cyan\\\": \\\"#00FFFF\\\",\\n      \\\"DarkBlue\\\": \\\"#00008B\\\",\\n      \\\"DarkCyan\\\": \\\"#008B8B\\\",\\n      \\\"DarkGoldenRod\\\": \\\"#B8860B\\\",\\n      \\\"DarkGray\\\": \\\"#A9A9A9\\\",\\n      \\\"DarkGrey\\\": \\\"#A9A9A9\\\",\\n      \\\"DarkGreen\\\": \\\"#006400\\\",\\n      \\\"DarkKhaki\\\": \\\"#BDB76B\\\",\\n      \\\"DarkMagenta\\\": \\\"#8B008B\\\",\\n      \\\"DarkOliveGreen\\\": \\\"#556B2F\\\",\\n      \\\"DarkOrange\\\": \\\"#FF8C00\\\",\\n      \\\"DarkOrchid\\\": \\\"#9932CC\\\",\\n      \\\"DarkRed\\\": \\\"#8B0000\\\",\\n      \\\"DarkSalmon\\\": \\\"#E9967A\\\",\\n      \\\"DarkSeaGreen\\\": \\\"#8FBC8F\\\",\\n      \\\"DarkSlateBlue\\\": \\\"#483D8B\\\",\\n      \\\"DarkSlateGray\\\": \\\"#2F4F4F\\\",\\n      \\\"DarkSlateGrey\\\": \\\"#2F4F4F\\\",\\n      \\\"DarkTurquoise\\\": \\\"#00CED1\\\",\\n      \\\"DarkViolet\\\": \\\"#9400D3\\\",\\n      \\\"DeepPink\\\": \\\"#FF1493\\\",\\n      \\\"DeepSkyBlue\\\": \\\"#00BFFF\\\",\\n      \\\"DimGray\\\": \\\"#696969\\\",\\n      \\\"DimGrey\\\": \\\"#696969\\\",\\n      \\\"DodgerBlue\\\": \\\"#1E90FF\\\",\\n      \\\"FireBrick\\\": \\\"#B22222\\\",\\n      \\\"FloralWhite\\\": \\\"#FFFAF0\\\",\\n      \\\"ForestGreen\\\": \\\"#228B22\\\",\\n      \\\"Fuchsia\\\": \\\"#FF00FF\\\",\\n      \\\"Gainsboro\\\": \\\"#DCDCDC\\\",\\n      \\\"GhostWhite\\\": \\\"#F8F8FF\\\",\\n      \\\"Gold\\\": \\\"#FFD700\\\",\\n      \\\"GoldenRod\\\": \\\"#DAA520\\\",\\n      \\\"Gray\\\": \\\"#808080\\\",\\n      \\\"Grey\\\": \\\"#808080\\\",\\n      \\\"Green\\\": \\\"#008000\\\",\\n      \\\"GreenYellow\\\": \\\"#ADFF2F\\\",\\n      \\\"HoneyDew\\\": \\\"#F0FFF0\\\",\\n      \\\"HotPink\\\": \\\"#FF69B4\\\",\\n      \\\"IndianRed\\\": \\\"#CD5C5C\\\",\\n      \\\"Indigo\\\": \\\"#4B0082\\\",\\n      \\\"Ivory\\\": \\\"#FFFFF0\\\",\\n      \\\"Khaki\\\": \\\"#F0E68C\\\",\\n      \\\"Lavender\\\": \\\"#E6E6FA\\\",\\n      \\\"LavenderBlush\\\": \\\"#FFF0F5\\\",\\n      \\\"LawnGreen\\\": \\\"#7CFC00\\\",\\n      \\\"LemonChiffon\\\": \\\"#FFFACD\\\",\\n      \\\"LightBlue\\\": \\\"#ADD8E6\\\",\\n      \\\"LightCoral\\\": \\\"#F08080\\\",\\n      \\\"LightCyan\\\": \\\"#E0FFFF\\\",\\n      \\\"LightGoldenRodYellow\\\": \\\"#FAFAD2\\\",\\n      \\\"LightGray\\\": \\\"#D3D3D3\\\",\\n      \\\"LightGrey\\\": \\\"#D3D3D3\\\",\\n      \\\"LightGreen\\\": \\\"#90EE90\\\",\\n      \\\"LightPink\\\": \\\"#FFB6C1\\\",\\n      \\\"LightSalmon\\\": \\\"#FFA07A\\\",\\n      \\\"LightSeaGreen\\\": \\\"#20B2AA\\\",\\n      \\\"LightSkyBlue\\\": \\\"#87CEFA\\\",\\n      \\\"LightSlateGray\\\": \\\"#778899\\\",\\n      \\\"LightSlateGrey\\\": \\\"#778899\\\",\\n      \\\"LightSteelBlue\\\": \\\"#B0C4DE\\\",\\n      \\\"LightYellow\\\": \\\"#FFFFE0\\\",\\n      \\\"Lime\\\": \\\"#00FF00\\\",\\n      \\\"LimeGreen\\\": \\\"#32CD32\\\",\\n      \\\"Linen\\\": \\\"#FAF0E6\\\",\\n      \\\"Magenta\\\": \\\"#FF00FF\\\",\\n      \\\"Maroon\\\": \\\"#800000\\\",\\n      \\\"MediumAquaMarine\\\": \\\"#66CDAA\\\",\\n      \\\"MediumBlue\\\": \\\"#0000CD\\\",\\n      \\\"MediumOrchid\\\": \\\"#BA55D3\\\",\\n      \\\"MediumPurple\\\": \\\"#9370DB\\\",\\n      \\\"MediumSeaGreen\\\": \\\"#3CB371\\\",\\n      \\\"MediumSlateBlue\\\": \\\"#7B68EE\\\",\\n      \\\"MediumSpringGreen\\\": \\\"#00FA9A\\\",\\n      \\\"MediumTurquoise\\\": \\\"#48D1CC\\\",\\n      \\\"MediumVioletRed\\\": \\\"#C71585\\\",\\n      \\\"MidnightBlue\\\": \\\"#191970\\\",\\n      \\\"MintCream\\\": \\\"#F5FFFA\\\",\\n      \\\"MistyRose\\\": \\\"#FFE4E1\\\",\\n      \\\"Moccasin\\\": \\\"#FFE4B5\\\",\\n      \\\"NavajoWhite\\\": \\\"#FFDEAD\\\",\\n      \\\"Navy\\\": \\\"#000080\\\",\\n      \\\"OldLace\\\": \\\"#FDF5E6\\\",\\n      \\\"Olive\\\": \\\"#808000\\\",\\n      \\\"OliveDrab\\\": \\\"#6B8E23\\\",\\n      \\\"Orange\\\": \\\"#FFA500\\\",\\n      \\\"OrangeRed\\\": \\\"#FF4500\\\",\\n      \\\"Orchid\\\": \\\"#DA70D6\\\",\\n      \\\"PaleGoldenRod\\\": \\\"#EEE8AA\\\",\\n      \\\"PaleGreen\\\": \\\"#98FB98\\\",\\n      \\\"PaleTurquoise\\\": \\\"#AFEEEE\\\",\\n      \\\"PaleVioletRed\\\": \\\"#DB7093\\\",\\n      \\\"PapayaWhip\\\": \\\"#FFEFD5\\\",\\n      \\\"PeachPuff\\\": \\\"#FFDAB9\\\",\\n      \\\"Peru\\\": \\\"#CD853F\\\",\\n      \\\"Pink\\\": \\\"#FFC0CB\\\",\\n      \\\"Plum\\\": \\\"#DDA0DD\\\",\\n      \\\"PowderBlue\\\": \\\"#B0E0E6\\\",\\n      \\\"Purple\\\": \\\"#800080\\\",\\n      \\\"RebeccaPurple\\\": \\\"#663399\\\",\\n      \\\"Red\\\": \\\"#FF0000\\\",\\n      \\\"RosyBrown\\\": \\\"#BC8F8F\\\",\\n      \\\"RoyalBlue\\\": \\\"#4169E1\\\",\\n      \\\"SaddleBrown\\\": \\\"#8B4513\\\",\\n      \\\"Salmon\\\": \\\"#FA8072\\\",\\n      \\\"SandyBrown\\\": \\\"#F4A460\\\",\\n      \\\"SeaGreen\\\": \\\"#2E8B57\\\",\\n      \\\"SeaShell\\\": \\\"#FFF5EE\\\",\\n      \\\"Sienna\\\": \\\"#A0522D\\\",\\n      \\\"Silver\\\": \\\"#C0C0C0\\\",\\n      \\\"SkyBlue\\\": \\\"#87CEEB\\\",\\n      \\\"SlateBlue\\\": \\\"#6A5ACD\\\",\\n      \\\"SlateGray\\\": \\\"#708090\\\",\\n      \\\"SlateGrey\\\": \\\"#708090\\\",\\n      \\\"Snow\\\": \\\"#FFFAFA\\\",\\n      \\\"SpringGreen\\\": \\\"#00FF7F\\\",\\n      \\\"SteelBlue\\\": \\\"#4682B4\\\",\\n      \\\"Tan\\\": \\\"#D2B48C\\\",\\n      \\\"Teal\\\": \\\"#008080\\\",\\n      \\\"Thistle\\\": \\\"#D8BFD8\\\",\\n      \\\"Tomato\\\": \\\"#FF6347\\\",\\n      \\\"Turquoise\\\": \\\"#40E0D0\\\",\\n      \\\"Violet\\\": \\\"#EE82EE\\\",\\n      \\\"Wheat\\\": \\\"#F5DEB3\\\",\\n      \\\"White\\\": \\\"#FFFFFF\\\",\\n      \\\"WhiteSmoke\\\": \\\"#F5F5F5\\\",\\n      \\\"Yellow\\\": \\\"#FFFF00\\\",\\n      \\\"YellowGreen\\\": \\\"#9ACD32\\\",\\n    }\\n    const colorCodeToName = {\\n      \\\"#F0F8FF\\\": \\\"AliceBlue\\\",\\n      \\\"#FAEBD7\\\": \\\"AntiqueWhite\\\",\\n      \\\"#00FFFF\\\": \\\"Cyan\\\",\\n      \\\"#7FFFD4\\\": \\\"Aquamarine\\\",\\n      \\\"#F0FFFF\\\": \\\"Azure\\\",\\n      \\\"#F5F5DC\\\": \\\"Beige\\\",\\n      \\\"#FFE4C4\\\": \\\"Bisque\\\",\\n      \\\"#000000\\\": \\\"Black\\\",\\n      \\\"#FFEBCD\\\": \\\"BlanchedAlmond\\\",\\n      \\\"#0000FF\\\": \\\"Blue\\\",\\n      \\\"#8A2BE2\\\": \\\"BlueViolet\\\",\\n      \\\"#A52A2A\\\": \\\"Brown\\\",\\n      \\\"#DEB887\\\": \\\"BurlyWood\\\",\\n      \\\"#5F9EA0\\\": \\\"CadetBlue\\\",\\n      \\\"#7FFF00\\\": \\\"Chartreuse\\\",\\n      \\\"#D2691E\\\": \\\"Chocolate\\\",\\n      \\\"#FF7F50\\\": \\\"Coral\\\",\\n      \\\"#6495ED\\\": \\\"CornflowerBlue\\\",\\n      \\\"#FFF8DC\\\": \\\"Cornsilk\\\",\\n      \\\"#DC143C\\\": \\\"Crimson\\\",\\n      \\\"#00008B\\\": \\\"DarkBlue\\\",\\n      \\\"#008B8B\\\": \\\"DarkCyan\\\",\\n      \\\"#B8860B\\\": \\\"DarkGoldenRod\\\",\\n      \\\"#A9A9A9\\\": \\\"DarkGrey\\\",\\n      \\\"#006400\\\": \\\"DarkGreen\\\",\\n      \\\"#BDB76B\\\": \\\"DarkKhaki\\\",\\n      \\\"#8B008B\\\": \\\"DarkMagenta\\\",\\n      \\\"#556B2F\\\": \\\"DarkOliveGreen\\\",\\n      \\\"#FF8C00\\\": \\\"DarkOrange\\\",\\n      \\\"#9932CC\\\": \\\"DarkOrchid\\\",\\n      \\\"#8B0000\\\": \\\"DarkRed\\\",\\n      \\\"#E9967A\\\": \\\"DarkSalmon\\\",\\n      \\\"#8FBC8F\\\": \\\"DarkSeaGreen\\\",\\n      \\\"#483D8B\\\": \\\"DarkSlateBlue\\\",\\n      \\\"#2F4F4F\\\": \\\"DarkSlateGrey\\\",\\n      \\\"#00CED1\\\": \\\"DarkTurquoise\\\",\\n      \\\"#9400D3\\\": \\\"DarkViolet\\\",\\n      \\\"#FF1493\\\": \\\"DeepPink\\\",\\n      \\\"#00BFFF\\\": \\\"DeepSkyBlue\\\",\\n      \\\"#696969\\\": \\\"DimGrey\\\",\\n      \\\"#1E90FF\\\": \\\"DodgerBlue\\\",\\n      \\\"#B22222\\\": \\\"FireBrick\\\",\\n      \\\"#FFFAF0\\\": \\\"FloralWhite\\\",\\n      \\\"#228B22\\\": \\\"ForestGreen\\\",\\n      \\\"#FF00FF\\\": \\\"Magenta\\\",\\n      \\\"#DCDCDC\\\": \\\"Gainsboro\\\",\\n      \\\"#F8F8FF\\\": \\\"GhostWhite\\\",\\n      \\\"#FFD700\\\": \\\"Gold\\\",\\n      \\\"#DAA520\\\": \\\"GoldenRod\\\",\\n      \\\"#808080\\\": \\\"Grey\\\",\\n      \\\"#008000\\\": \\\"Green\\\",\\n      \\\"#ADFF2F\\\": \\\"GreenYellow\\\",\\n      \\\"#F0FFF0\\\": \\\"HoneyDew\\\",\\n      \\\"#FF69B4\\\": \\\"HotPink\\\",\\n      \\\"#CD5C5C\\\": \\\"IndianRed\\\",\\n      \\\"#4B0082\\\": \\\"Indigo\\\",\\n      \\\"#FFFFF0\\\": \\\"Ivory\\\",\\n      \\\"#F0E68C\\\": \\\"Khaki\\\",\\n      \\\"#E6E6FA\\\": \\\"Lavender\\\",\\n      \\\"#FFF0F5\\\": \\\"LavenderBlush\\\",\\n      \\\"#7CFC00\\\": \\\"LawnGreen\\\",\\n      \\\"#FFFACD\\\": \\\"LemonChiffon\\\",\\n      \\\"#ADD8E6\\\": \\\"LightBlue\\\",\\n      \\\"#F08080\\\": \\\"LightCoral\\\",\\n      \\\"#E0FFFF\\\": \\\"LightCyan\\\",\\n      \\\"#FAFAD2\\\": \\\"LightGoldenRodYellow\\\",\\n      \\\"#D3D3D3\\\": \\\"LightGrey\\\",\\n      \\\"#90EE90\\\": \\\"LightGreen\\\",\\n      \\\"#FFB6C1\\\": \\\"LightPink\\\",\\n      \\\"#FFA07A\\\": \\\"LightSalmon\\\",\\n      \\\"#20B2AA\\\": \\\"LightSeaGreen\\\",\\n      \\\"#87CEFA\\\": \\\"LightSkyBlue\\\",\\n      \\\"#778899\\\": \\\"LightSlateGrey\\\",\\n      \\\"#B0C4DE\\\": \\\"LightSteelBlue\\\",\\n      \\\"#FFFFE0\\\": \\\"LightYellow\\\",\\n      \\\"#00FF00\\\": \\\"Lime\\\",\\n      \\\"#32CD32\\\": \\\"LimeGreen\\\",\\n      \\\"#FAF0E6\\\": \\\"Linen\\\",\\n      \\\"#800000\\\": \\\"Maroon\\\",\\n      \\\"#66CDAA\\\": \\\"MediumAquaMarine\\\",\\n      \\\"#0000CD\\\": \\\"MediumBlue\\\",\\n      \\\"#BA55D3\\\": \\\"MediumOrchid\\\",\\n      \\\"#9370DB\\\": \\\"MediumPurple\\\",\\n      \\\"#3CB371\\\": \\\"MediumSeaGreen\\\",\\n      \\\"#7B68EE\\\": \\\"MediumSlateBlue\\\",\\n      \\\"#00FA9A\\\": \\\"MediumSpringGreen\\\",\\n      \\\"#48D1CC\\\": \\\"MediumTurquoise\\\",\\n      \\\"#C71585\\\": \\\"MediumVioletRed\\\",\\n      \\\"#191970\\\": \\\"MidnightBlue\\\",\\n      \\\"#F5FFFA\\\": \\\"MintCream\\\",\\n      \\\"#FFE4E1\\\": \\\"MistyRose\\\",\\n      \\\"#FFE4B5\\\": \\\"Moccasin\\\",\\n      \\\"#FFDEAD\\\": \\\"NavajoWhite\\\",\\n      \\\"#000080\\\": \\\"Navy\\\",\\n      \\\"#FDF5E6\\\": \\\"OldLace\\\",\\n      \\\"#808000\\\": \\\"Olive\\\",\\n      \\\"#6B8E23\\\": \\\"OliveDrab\\\",\\n      \\\"#FFA500\\\": \\\"Orange\\\",\\n      \\\"#FF4500\\\": \\\"OrangeRed\\\",\\n      \\\"#DA70D6\\\": \\\"Orchid\\\",\\n      \\\"#EEE8AA\\\": \\\"PaleGoldenRod\\\",\\n      \\\"#98FB98\\\": \\\"PaleGreen\\\",\\n      \\\"#AFEEEE\\\": \\\"PaleTurquoise\\\",\\n      \\\"#DB7093\\\": \\\"PaleVioletRed\\\",\\n      \\\"#FFEFD5\\\": \\\"PapayaWhip\\\",\\n      \\\"#FFDAB9\\\": \\\"PeachPuff\\\",\\n      \\\"#CD853F\\\": \\\"Peru\\\",\\n      \\\"#FFC0CB\\\": \\\"Pink\\\",\\n      \\\"#DDA0DD\\\": \\\"Plum\\\",\\n      \\\"#B0E0E6\\\": \\\"PowderBlue\\\",\\n      \\\"#800080\\\": \\\"Purple\\\",\\n      \\\"#663399\\\": \\\"RebeccaPurple\\\",\\n      \\\"#FF0000\\\": \\\"Red\\\",\\n      \\\"#BC8F8F\\\": \\\"RosyBrown\\\",\\n      \\\"#4169E1\\\": \\\"RoyalBlue\\\",\\n      \\\"#8B4513\\\": \\\"SaddleBrown\\\",\\n      \\\"#FA8072\\\": \\\"Salmon\\\",\\n      \\\"#F4A460\\\": \\\"SandyBrown\\\",\\n      \\\"#2E8B57\\\": \\\"SeaGreen\\\",\\n      \\\"#FFF5EE\\\": \\\"SeaShell\\\",\\n      \\\"#A0522D\\\": \\\"Sienna\\\",\\n      \\\"#C0C0C0\\\": \\\"Silver\\\",\\n      \\\"#87CEEB\\\": \\\"SkyBlue\\\",\\n      \\\"#6A5ACD\\\": \\\"SlateBlue\\\",\\n      \\\"#708090\\\": \\\"SlateGrey\\\",\\n      \\\"#FFFAFA\\\": \\\"Snow\\\",\\n      \\\"#00FF7F\\\": \\\"SpringGreen\\\",\\n      \\\"#4682B4\\\": \\\"SteelBlue\\\",\\n      \\\"#D2B48C\\\": \\\"Tan\\\",\\n      \\\"#008080\\\": \\\"Teal\\\",\\n      \\\"#D8BFD8\\\": \\\"Thistle\\\",\\n      \\\"#FF6347\\\": \\\"Tomato\\\",\\n      \\\"#40E0D0\\\": \\\"Turquoise\\\",\\n      \\\"#EE82EE\\\": \\\"Violet\\\",\\n      \\\"#F5DEB3\\\": \\\"Wheat\\\",\\n      \\\"#FFFFFF\\\": \\\"White\\\",\\n      \\\"#F5F5F5\\\": \\\"WhiteSmoke\\\",\\n      \\\"#FFFF00\\\": \\\"Yellow\\\",\\n      \\\"#9ACD32\\\": \\\"YellowGreen\\\"\\n    };\\n    </script>\\n\\n</body>\\n</html>\",\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":23,\"location\":\"5100 280\",\"linkToKey\":25,\"editorPosition\":[1948,1577,720,1278]},\n{\"label\":\"Simple Color Picker\",\"color\":\"lightsalmon\",\"size\":\"180 170\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<html>\\n  <head>\\n    <!--link rel=\\\"stylesheet\\\" href=\\\"coloris.min.css\\\" />\\n    <script src=\\\"coloris.min.js\\\"></script-->\\n    \\n    <style>\\n      /* This is the readable content of coloris.min.css */\\n      \\n      .clr-picker {\\n        display: none;\\n        flex-wrap: wrap;\\n        position: absolute;\\n        width: 200px;\\n        z-index: 1000;\\n        border-radius: 10px;\\n        background-color: #fff;\\n        justify-content: flex-end;\\n        direction: ltr;\\n        box-shadow: 0 0 5px rgba(0,0,0,.05), 0 5px 20px rgba(0,0,0,.1);\\n        -moz-user-select: none;\\n        -webkit-user-select: none;\\n        user-select: none;\\n      }\\n      \\n      .clr-picker.clr-open,\\n      .clr-picker[data-inline=\\\"true\\\"] {\\n        display: flex;\\n      }\\n      \\n      .clr-picker[data-inline=\\\"true\\\"] {\\n        position: relative;\\n      }\\n      \\n      .clr-gradient {\\n        position: relative;\\n        width: 100%;\\n        height: 100px;\\n        margin-bottom: 15px;\\n        border-radius: 3px 3px 0 0;\\n        background-image: linear-gradient(rgba(0,0,0,0), #000), linear-gradient(90deg, #fff, currentColor);\\n        cursor: pointer;\\n      }\\n      \\n      .clr-marker {\\n        position: absolute;\\n        width: 12px;\\n        height: 12px;\\n        margin: -6px 0 0 -6px;\\n        border: 1px solid #fff;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-webkit-slider-runnable-track {\\n        width: 100%;\\n        height: 16px;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-webkit-slider-thumb {\\n        width: 16px;\\n        height: 16px;\\n        -webkit-appearance: none;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-moz-range-track {\\n        width: 100%;\\n        height: 16px;\\n        border: 0;\\n      }\\n      \\n      .clr-picker input[type=\\\"range\\\"]::-moz-range-thumb {\\n        width: 16px;\\n        height: 16px;\\n        border: 0;\\n      }\\n      \\n      .clr-hue {\\n        background-image: linear-gradient(to right, #f00 0%, #ff0 16.66%, #0f0 33.33%, #0ff 50%, #00f 66.66%, #f0f 83.33%, #f00 100%);\\n      }\\n      \\n      .clr-hue,\\n      .clr-alpha {\\n        position: relative;\\n        width: calc(100% - 40px);\\n        height: 8px;\\n        margin: 5px 20px;\\n        border-radius: 4px;\\n      }\\n      \\n      .clr-alpha span {\\n        display: block;\\n        height: 100%;\\n        width: 100%;\\n        border-radius: inherit;\\n        background-image: linear-gradient(90deg, rgba(0,0,0,0), currentColor);\\n      }\\n      \\n      .clr-hue input,\\n      .clr-alpha input {\\n        position: absolute;\\n        width: calc(100% + 32px);\\n        height: 16px;\\n        left: -16px;\\n        top: -4px;\\n        margin: 0;\\n        background-color: transparent;\\n        opacity: 0;\\n        cursor: pointer;\\n        appearance: none;\\n        -webkit-appearance: none;\\n      }\\n      \\n      .clr-hue div,\\n      .clr-alpha div {\\n        position: absolute;\\n        width: 16px;\\n        height: 16px;\\n        left: 0;\\n        top: 50%;\\n        margin-left: -8px;\\n        transform: translateY(-50%);\\n        border: 2px solid #fff;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n        box-shadow: 0 0 1px #888;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-alpha div:before {\\n        content: '';\\n        position: absolute;\\n        height: 100%;\\n        width: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: 50%;\\n        background-color: currentColor;\\n      }\\n      \\n      .clr-format {\\n        display: none;\\n        order: 1;\\n        width: calc(100% - 40px);\\n        margin: 0 20px 20px;\\n      }\\n      \\n      .clr-segmented {\\n        display: flex;\\n        position: relative;\\n        width: 100%;\\n        margin: 0;\\n        padding: 0;\\n        border: 1px solid #ddd;\\n        border-radius: 15px;\\n        box-sizing: border-box;\\n        color: #999;\\n        font-size: 12px;\\n      }\\n      \\n      .clr-segmented input,\\n      .clr-segmented legend {\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        left: 0;\\n        top: 0;\\n        opacity: 0;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-segmented label {\\n        flex-grow: 1;\\n        margin: 0;\\n        padding: 4px 0;\\n        font-size: inherit;\\n        font-weight: normal;\\n        line-height: initial;\\n        text-align: center;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-segmented label:first-of-type {\\n        border-radius: 10px 0 0 10px;\\n      }\\n      \\n      .clr-segmented label:last-of-type {\\n        border-radius: 0 10px 10px 0;\\n      }\\n      \\n      .clr-segmented input:checked + label {\\n        color: #fff;\\n        background-color: #666;\\n      }\\n      \\n      .clr-swatches {\\n        order: 2;\\n        width: calc(100% - 32px);\\n        margin: 0 16px;\\n      }\\n      \\n      .clr-swatches div {\\n        display: flex;\\n        flex-wrap: wrap;\\n        padding-bottom: 12px;\\n        justify-content: center;\\n      }\\n      \\n      .clr-swatches button {\\n        position: relative;\\n        width: 20px;\\n        height: 20px;\\n        margin: 0 4px 6px 4px;\\n        padding: 0;\\n        border: 0;\\n        border-radius: 50%;\\n        color: inherit;\\n        text-indent: -1000px;\\n        white-space: nowrap;\\n        overflow: hidden;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-swatches button:after {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: inherit;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);\\n      }\\n      \\n      input.clr-color {\\n        order: 1;\\n        width: calc(100% - 80px);\\n        height: 32px;\\n        margin: 15px 20px 20px auto;\\n        padding: 0 10px;\\n        border: 1px solid #ddd;\\n        border-radius: 16px;\\n        color: #444;\\n        background-color: #fff;\\n        font-family: sans-serif;\\n        font-size: 14px;\\n        text-align: center;\\n        box-shadow: none;\\n      }\\n      \\n      input.clr-color:focus {\\n        outline: none;\\n        border: 1px solid #1e90ff;\\n      }\\n      \\n      .clr-close,\\n      .clr-clear {\\n        display: none;\\n        order: 2;\\n        height: 24px;\\n        margin: 0 20px 20px;\\n        padding: 0 20px;\\n        border: 0;\\n        border-radius: 12px;\\n        color: #fff;\\n        background-color: #666;\\n        font-family: inherit;\\n        font-size: 12px;\\n        font-weight: 400;\\n        cursor: pointer;\\n      }\\n      \\n      .clr-close {\\n        display: block;\\n        margin: 0 20px 20px auto;\\n      }\\n      \\n      .clr-preview {\\n        position: relative;\\n        width: 32px;\\n        height: 32px;\\n        margin: 15px 0 20px 20px;\\n        border-radius: 50%;\\n        overflow: hidden;\\n      }\\n      \\n      .clr-preview:before,\\n      .clr-preview:after {\\n        content: '';\\n        position: absolute;\\n        height: 100%;\\n        width: 100%;\\n        left: 0;\\n        top: 0;\\n        border: 1px solid #fff;\\n        border-radius: 50%;\\n      }\\n      \\n      .clr-preview:after {\\n        border: 0;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);\\n      }\\n      \\n      .clr-preview button {\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        z-index: 1;\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        border-radius: 50%;\\n        outline-offset: -2px;\\n        background-color: transparent;\\n        text-indent: -9999px;\\n        cursor: pointer;\\n        overflow: hidden;\\n      }\\n      \\n      .clr-marker,\\n      .clr-hue div,\\n      .clr-alpha div,\\n      .clr-color {\\n        box-sizing: border-box;\\n      }\\n      \\n      .clr-field {\\n        display: inline-block;\\n        position: relative;\\n        color: transparent;\\n      }\\n      \\n      .clr-field input {\\n        margin: 0;\\n        direction: ltr;\\n      }\\n      \\n      .clr-field.clr-rtl input {\\n        text-align: right;\\n      }\\n      \\n      .clr-field button {\\n        position: absolute;\\n        width: 30px;\\n        height: 100%;\\n        right: 0;\\n        top: 50%;\\n        transform: translateY(-50%);\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        color: inherit;\\n        text-indent: -1000px;\\n        white-space: nowrap;\\n        overflow: hidden;\\n        pointer-events: none;\\n      }\\n      \\n      .clr-field.clr-rtl button {\\n        right: auto;\\n        left: 0;\\n      }\\n      \\n      .clr-field button:after {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        border-radius: inherit;\\n        background-color: currentColor;\\n        box-shadow: inset 0 0 1px rgba(0,0,0,.5);\\n      }\\n      \\n      .clr-alpha,\\n      .clr-alpha div,\\n      .clr-swatches button,\\n      .clr-preview:before,\\n      .clr-field button {\\n        background-image: repeating-linear-gradient(45deg, #aaa 25%, transparent 25%, transparent 75%, #aaa 75%, #aaa), repeating-linear-gradient(45deg, #aaa 25%, #fff 25%, #fff 75%, #aaa 75%, #aaa);\\n        background-position: 0 0, 4px 4px;\\n        background-size: 8px 8px;\\n      }\\n      \\n      .clr-marker:focus {\\n        outline: none;\\n      }\\n      \\n      .clr-keyboard-nav .clr-marker:focus,\\n      .clr-keyboard-nav .clr-hue input:focus + div,\\n      .clr-keyboard-nav .clr-alpha input:focus + div,\\n      .clr-keyboard-nav .clr-segmented input:focus + label {\\n        outline: none;\\n        box-shadow: 0 0 0 2px #1e90ff, 0 0 2px 2px #fff;\\n      }\\n      \\n      .clr-picker[data-alpha=\\\"false\\\"] .clr-alpha {\\n        display: none;\\n      }\\n      \\n      .clr-picker[data-minimal=\\\"true\\\"] {\\n        padding-top: 16px;\\n      }\\n      \\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-gradient,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-hue,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-alpha,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-color,\\n      .clr-picker[data-minimal=\\\"true\\\"] .clr-preview {\\n        display: none;\\n      }\\n      \\n      /** Dark theme **/\\n      \\n      .clr-dark {\\n        background-color: #444;\\n      }\\n      \\n      .clr-dark .clr-segmented {\\n        border-color: #777;\\n      }\\n      \\n      .clr-dark .clr-swatches button:after {\\n        box-shadow: inset 0 0 0 1px rgba(255,255,255,.3);\\n      }\\n      \\n      .clr-dark input.clr-color {\\n        color: #fff;\\n        border-color: #777;\\n        background-color: #555;\\n      }\\n      \\n      .clr-dark input.clr-color:focus {\\n        border-color: #1e90ff;\\n      }\\n      \\n      .clr-dark .clr-preview:after {\\n        box-shadow: inset 0 0 0 1px rgba(255,255,255,.5);\\n      }\\n      \\n      .clr-dark .clr-alpha,\\n      .clr-dark .clr-alpha div,\\n      .clr-dark .clr-swatches button,\\n      .clr-dark .clr-preview:before {\\n        background-image: repeating-linear-gradient(45deg, #666 25%, transparent 25%, transparent 75%, #888 75%, #888), repeating-linear-gradient(45deg, #888 25%, #444 25%, #444 75%, #888 75%, #888);\\n      }\\n      \\n      /** Polaroid theme **/\\n      \\n      .clr-picker.clr-polaroid {\\n        border-radius: 6px;\\n        box-shadow: 0 0 5px rgba(0,0,0,.1), 0 5px 30px rgba(0,0,0,.2);\\n      }\\n      \\n      .clr-picker.clr-polaroid:before {\\n        content: '';\\n        display: block;\\n        position: absolute;\\n        width: 16px;\\n        height: 10px;\\n        left: 20px;\\n        top: -10px;\\n        border: solid transparent;\\n        border-width: 0 8px 10px 8px;\\n        border-bottom-color: currentColor;\\n        box-sizing: border-box;\\n        color: #fff;\\n        filter: drop-shadow(0 -4px 3px rgba(0,0,0,.1));\\n        pointer-events: none;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-dark:before {\\n        color: #444;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-left:before {\\n        left: auto;\\n        right: 20px;\\n      }\\n      \\n      .clr-picker.clr-polaroid.clr-top:before {\\n        top: auto;\\n        bottom: -10px;\\n        transform: rotateZ(180deg);\\n      }\\n      \\n      .clr-polaroid .clr-gradient {\\n        width: calc(100% - 20px);\\n        height: 120px;\\n        margin: 10px;\\n        border-radius: 3px;\\n      }\\n      \\n      .clr-polaroid .clr-hue,\\n      .clr-polaroid .clr-alpha {\\n        width: calc(100% - 30px);\\n        height: 10px;\\n        margin: 6px 15px;\\n        border-radius: 5px;\\n      }\\n      \\n      .clr-polaroid .clr-hue div,\\n      .clr-polaroid .clr-alpha div {\\n        box-shadow: 0 0 5px rgba(0,0,0,.2);\\n      }\\n      \\n      .clr-polaroid .clr-format {\\n        width: calc(100% - 20px);\\n        margin: 0 10px 15px;\\n      }\\n      \\n      .clr-polaroid .clr-swatches {\\n        width: calc(100% - 12px);\\n        margin: 0 6px;\\n      }\\n      .clr-polaroid .clr-swatches div {\\n        padding-bottom: 10px;\\n      }\\n      \\n      .clr-polaroid .clr-swatches button {\\n        width: 22px;\\n        height: 22px;\\n      }\\n      \\n      .clr-polaroid input.clr-color {\\n        width: calc(100% - 60px);\\n        margin: 10px 10px 15px auto;\\n      }\\n      \\n      .clr-polaroid .clr-clear {\\n        margin: 0 10px 15px 10px;\\n      }\\n      \\n      .clr-polaroid .clr-close {\\n        margin: 0 10px 15px auto;\\n      }\\n      \\n      .clr-polaroid .clr-preview {\\n        margin: 10px 0 15px 10px;\\n      }\\n      \\n      /** Large theme **/\\n      \\n      .clr-picker.clr-large {\\n        width: 275px;\\n      }\\n      \\n      .clr-large .clr-gradient {\\n        height: 150px;\\n      }\\n      \\n      .clr-large .clr-swatches button {\\n        width: 22px;\\n        height: 22px;\\n      }\\n      \\n      /** Pill (horizontal) theme **/\\n      \\n      .clr-picker.clr-pill {\\n        width: 380px;\\n        padding-left: 180px;\\n        box-sizing: border-box;\\n      }\\n      \\n      .clr-pill .clr-gradient {\\n        position: absolute;\\n        width: 180px;\\n        height: 100%;\\n        left: 0;\\n        top: 0;\\n        margin-bottom: 0;\\n        border-radius: 3px 0 0 3px;\\n      }\\n      \\n      .clr-pill .clr-hue {\\n        margin-top: 20px;\\n      }\\n    </style>\\n    \\n    <!-- Example code -->\\n    <style type=\\\"text/css\\\">\\n    @import url(https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap);\\n\\n    body {\\n      height: 120vh;\\n      color: #444;\\n      background-color: #fff;\\n      font-family: 'Lato', sans-serif;\\n    }\\n\\n    input {\\n      width: 150px;\\n      height: 32px;\\n      padding: 0 10px;\\n      border: 1px solid #ccc;\\n      border-radius: 5px;\\n      font-family: inherit;\\n      font-size: inherit;\\n      font-weight: inherit;\\n      box-sizing: border-box;\\n    }\\n      \\n    .examples {\\n      display: flex;\\n      flex-wrap: wrap;\\n    }\\n\\n    .example {\\n      flex-shrink: 0;\\n      width: 300px;\\n      margin-bottom: 30px;\\n    }\\n\\n    .square .clr-field button,\\n    .circle .clr-field button {\\n      width: 22px;\\n      height: 22px;\\n      left: 5px;\\n      right: auto;\\n      border-radius: 5px;\\n    }\\n\\n    .square .clr-field input,\\n    .circle .clr-field input {\\n      padding-left: 36px;\\n    }\\n\\n    .circle .clr-field button {\\n      border-radius: 50%;\\n    }\\n\\n    .full .clr-field button {\\n      width: 100%;\\n      height: 100%;\\n      border-radius: 5px;\\n    }\\n\\n    </style>\\n  </head>\\n<body style=\\\"background: black;\\\">\\n  <script>\\n    /* This is the readable content of coloris.min.js */\\n    \\n    /*!\\n     * Copyright (c) 2021 Momo Bassit.\\n     * Licensed under the MIT License (MIT)\\n     * https://github.com/mdbassit/Coloris\\n     */\\n    \\n    (function (window, document, Math, undefined) {\\n      var ctx = document.createElement('canvas').getContext('2d');\\n      var currentColor = { r: 0, g: 0, b: 0, h: 0, s: 0, v: 0, a: 1 };\\n      var container, picker, colorArea, colorAreaDims, colorMarker, colorPreview, colorValue, clearButton, closeButton,\\n      hueSlider, hueMarker, alphaSlider, alphaMarker, currentEl, currentFormat, oldColor, keyboardNav;\\n    \\n      // Default settings\\n      var settings = {\\n        el: '[data-coloris]',\\n        parent: 'body',\\n        theme: 'default',\\n        themeMode: 'light',\\n        rtl: false,\\n        wrap: true,\\n        margin: 2,\\n        format: 'hex',\\n        formatToggle: false,\\n        swatches: [],\\n        swatchesOnly: false,\\n        alpha: true,\\n        forceAlpha: false,\\n        focusInput: true,\\n        selectInput: false,\\n        inline: false,\\n        defaultColor: '#000000',\\n        clearButton: false,\\n        clearLabel: 'Clear',\\n        closeButton: false,\\n        closeLabel: 'Close',\\n        onChange: function onChange() {return undefined;},\\n        a11y: {\\n          open: 'Open color picker',\\n          close: 'Close color picker',\\n          clear: 'Clear the selected color',\\n          marker: 'Saturation: {s}. Brightness: {v}.',\\n          hueSlider: 'Hue slider',\\n          alphaSlider: 'Opacity slider',\\n          input: 'Color value field',\\n          format: 'Color format',\\n          swatch: 'Color swatch',\\n          instruction: 'Saturation and brightness selector. Use up, down, left and right arrow keys to select.' } };\\n    \\n    \\n    \\n      // Virtual instances cache\\n      var instances = {};\\n      var currentInstanceId = '';\\n      var defaultInstance = {};\\n      var hasInstance = false;\\n    \\n      /**\\n       * Configure the color picker.\\n       * @param {object} options Configuration options.\\n       */\\n      function configure(options) {\\n        if (typeof options !== 'object') {\\n          return;\\n        }\\n    \\n        for (var key in options) {\\n          switch (key) {\\n            case 'el':\\n              bindFields(options.el);\\n              if (options.wrap !== false) {\\n                wrapFields(options.el);\\n              }\\n              break;\\n            case 'parent':\\n              container = document.querySelector(options.parent);\\n              if (container) {\\n                container.appendChild(picker);\\n                settings.parent = options.parent;\\n    \\n                // document.body is special\\n                if (container === document.body) {\\n                  container = undefined;\\n                }\\n              }\\n              break;\\n            case 'themeMode':\\n              settings.themeMode = options.themeMode;\\n              if (options.themeMode === 'auto' && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\\n                settings.themeMode = 'dark';\\n              }\\n            // The lack of a break statement is intentional\\n            case 'theme':\\n              if (options.theme) {\\n                settings.theme = options.theme;\\n              }\\n    \\n              // Set the theme and color scheme\\n              picker.className = \\\"clr-picker clr-\\\" + settings.theme + \\\" clr-\\\" + settings.themeMode;\\n    \\n              // Update the color picker's position if inline mode is in use\\n              if (settings.inline) {\\n                updatePickerPosition();\\n              }\\n              break;\\n            case 'rtl':\\n              settings.rtl = !!options.rtl;\\n              document.querySelectorAll('.clr-field').forEach(function (field) {return field.classList.toggle('clr-rtl', settings.rtl);});\\n              break;\\n            case 'margin':\\n              options.margin *= 1;\\n              settings.margin = !isNaN(options.margin) ? options.margin : settings.margin;\\n              break;\\n            case 'wrap':\\n              if (options.el && options.wrap) {\\n                wrapFields(options.el);\\n              }\\n              break;\\n            case 'formatToggle':\\n              settings.formatToggle = !!options.formatToggle;\\n              getEl('clr-format').style.display = settings.formatToggle ? 'block' : 'none';\\n              if (settings.formatToggle) {\\n                settings.format = 'auto';\\n              }\\n              break;\\n            case 'swatches':\\n              if (Array.isArray(options.swatches)) {(function () {\\n                  var swatches = [];\\n    \\n                  options.swatches.forEach(function (swatch, i) {\\n                    swatches.push(\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-swatch-\\\" + i + \\\"\\\\\\\" aria-labelledby=\\\\\\\"clr-swatch-label clr-swatch-\\\" + i + \\\"\\\\\\\" style=\\\\\\\"color: \\\" + swatch + \\\";\\\\\\\">\\\" + swatch + \\\"</button>\\\");\\n                  });\\n    \\n                  getEl('clr-swatches').innerHTML = swatches.length ? \\\"<div>\\\" + swatches.join('') + \\\"</div>\\\" : '';\\n                  settings.swatches = options.swatches.slice();})();\\n              }\\n              break;\\n            case 'swatchesOnly':\\n              settings.swatchesOnly = !!options.swatchesOnly;\\n              picker.setAttribute('data-minimal', settings.swatchesOnly);\\n              break;\\n            case 'alpha':\\n              settings.alpha = !!options.alpha;\\n              picker.setAttribute('data-alpha', settings.alpha);\\n              break;\\n            case 'inline':\\n              settings.inline = !!options.inline;\\n              picker.setAttribute('data-inline', settings.inline);\\n    \\n              if (settings.inline) {\\n                var defaultColor = options.defaultColor || settings.defaultColor;\\n    \\n                currentFormat = getColorFormatFromStr(defaultColor);\\n                updatePickerPosition();\\n                setColorFromStr(defaultColor);\\n              }\\n              break;\\n            case 'clearButton':\\n              // Backward compatibility\\n              if (typeof options.clearButton === 'object') {\\n                if (options.clearButton.label) {\\n                  settings.clearLabel = options.clearButton.label;\\n                  clearButton.innerHTML = settings.clearLabel;\\n                }\\n    \\n                options.clearButton = options.clearButton.show;\\n              }\\n    \\n              settings.clearButton = !!options.clearButton;\\n              clearButton.style.display = settings.clearButton ? 'block' : 'none';\\n              break;\\n            case 'clearLabel':\\n              settings.clearLabel = options.clearLabel;\\n              clearButton.innerHTML = settings.clearLabel;\\n              break;\\n            case 'closeButton':\\n              settings.closeButton = !!options.closeButton;\\n    \\n              if (settings.closeButton) {\\n                picker.insertBefore(closeButton, colorPreview);\\n              } else {\\n                colorPreview.appendChild(closeButton);\\n              }\\n    \\n              break;\\n            case 'closeLabel':\\n              settings.closeLabel = options.closeLabel;\\n              closeButton.innerHTML = settings.closeLabel;\\n              break;\\n            case 'a11y':\\n              var labels = options.a11y;\\n              var update = false;\\n    \\n              if (typeof labels === 'object') {\\n                for (var label in labels) {\\n                  if (labels[label] && settings.a11y[label]) {\\n                    settings.a11y[label] = labels[label];\\n                    update = true;\\n                  }\\n                }\\n              }\\n    \\n              if (update) {\\n                var openLabel = getEl('clr-open-label');\\n                var swatchLabel = getEl('clr-swatch-label');\\n    \\n                openLabel.innerHTML = settings.a11y.open;\\n                swatchLabel.innerHTML = settings.a11y.swatch;\\n                closeButton.setAttribute('aria-label', settings.a11y.close);\\n                clearButton.setAttribute('aria-label', settings.a11y.clear);\\n                hueSlider.setAttribute('aria-label', settings.a11y.hueSlider);\\n                alphaSlider.setAttribute('aria-label', settings.a11y.alphaSlider);\\n                colorValue.setAttribute('aria-label', settings.a11y.input);\\n                colorArea.setAttribute('aria-label', settings.a11y.instruction);\\n              }\\n              break;\\n            default:\\n              settings[key] = options[key];}\\n    \\n        }\\n      }\\n    \\n      /**\\n       * Add or update a virtual instance.\\n       * @param {String} selector The CSS selector of the elements to which the instance is attached.\\n       * @param {Object} options Per-instance options to apply.\\n       */\\n      function setVirtualInstance(selector, options) {\\n        if (typeof selector === 'string' && typeof options === 'object') {\\n          instances[selector] = options;\\n          hasInstance = true;\\n        }\\n      }\\n    \\n      /**\\n       * Remove a virtual instance.\\n       * @param {String} selector The CSS selector of the elements to which the instance is attached.\\n       */\\n      function removeVirtualInstance(selector) {\\n        delete instances[selector];\\n    \\n        if (Object.keys(instances).length === 0) {\\n          hasInstance = false;\\n    \\n          if (selector === currentInstanceId) {\\n            resetVirtualInstance();\\n          }\\n        }\\n      }\\n    \\n      /**\\n       * Attach a virtual instance to an element if it matches a selector.\\n       * @param {Object} element Target element that will receive a virtual instance if applicable.\\n       */\\n      function attachVirtualInstance(element) {\\n        if (hasInstance) {\\n          // These options can only be set globally, not per instance\\n          var unsupportedOptions = ['el', 'wrap', 'rtl', 'inline', 'defaultColor', 'a11y'];var _loop = function _loop(\\n    \\n          selector) {\\n            var options = instances[selector];\\n    \\n            // If the element matches an instance's CSS selector\\n            if (element.matches(selector)) {\\n              currentInstanceId = selector;\\n              defaultInstance = {};\\n    \\n              // Delete unsupported options\\n              unsupportedOptions.forEach(function (option) {return delete options[option];});\\n    \\n              // Back up the default options so we can restore them later\\n              for (var option in options) {\\n                defaultInstance[option] = Array.isArray(settings[option]) ? settings[option].slice() : settings[option];\\n              }\\n    \\n              // Set the instance's options\\n              configure(options);\\n              return \\\"break\\\";\\n            }};for (var selector in instances) {var _ret = _loop(selector);if (_ret === \\\"break\\\") break;\\n          }\\n        }\\n      }\\n    \\n      /**\\n       * Revert any per-instance options that were previously applied.\\n       */\\n      function resetVirtualInstance() {\\n        if (Object.keys(defaultInstance).length > 0) {\\n          configure(defaultInstance);\\n          currentInstanceId = '';\\n          defaultInstance = {};\\n        }\\n      }\\n    \\n      /**\\n       * Bind the color picker to input fields that match the selector.\\n       * @param {string} selector One or more selectors pointing to input fields.\\n       */\\n      function bindFields(selector) {\\n        // Show the color picker on click on the input fields that match the selector\\n        addListener(document, 'click', selector, function (event) {\\n          // Skip if inline mode is in use\\n          if (settings.inline) {\\n            return;\\n          }\\n    \\n          // Apply any per-instance options first\\n          attachVirtualInstance(event.target);\\n    \\n          currentEl = event.target;\\n          oldColor = currentEl.value;\\n          currentFormat = getColorFormatFromStr(oldColor);\\n          picker.classList.add('clr-open');\\n    \\n          updatePickerPosition();\\n          setColorFromStr(oldColor);\\n    \\n          if (settings.focusInput || settings.selectInput) {\\n            colorValue.focus({ preventScroll: true });\\n            colorValue.setSelectionRange(currentEl.selectionStart, currentEl.selectionEnd);\\n          }\\n    \\n          if (settings.selectInput) {\\n            colorValue.select();\\n          }\\n    \\n          // Always focus the first element when using keyboard navigation\\n          if (keyboardNav || settings.swatchesOnly) {\\n            getFocusableElements().shift().focus();\\n          }\\n    \\n          // Trigger an \\\"open\\\" event\\n          currentEl.dispatchEvent(new Event('open', { bubbles: true }));\\n        });\\n    \\n        // Update the color preview of the input fields that match the selector\\n        addListener(document, 'input', selector, function (event) {\\n          var parent = event.target.parentNode;\\n    \\n          // Only update the preview if the field has been previously wrapped\\n          if (parent.classList.contains('clr-field')) {\\n            parent.style.color = event.target.value;\\n          }\\n        });\\n      }\\n    \\n      /**\\n       * Update the color picker's position and the color gradient's offset\\n       */\\n      function updatePickerPosition() {\\n        var parent = container;\\n        var scrollY = window.scrollY;\\n        var pickerWidth = picker.offsetWidth;\\n        var pickerHeight = picker.offsetHeight;\\n        var reposition = { left: false, top: false };\\n        var parentStyle, parentMarginTop, parentBorderTop;\\n        var offset = { x: 0, y: 0 };\\n    \\n        if (parent) {\\n          parentStyle = window.getComputedStyle(parent);\\n          parentMarginTop = parseFloat(parentStyle.marginTop);\\n          parentBorderTop = parseFloat(parentStyle.borderTopWidth);\\n    \\n          offset = parent.getBoundingClientRect();\\n          offset.y += parentBorderTop + scrollY;\\n        }\\n    \\n        if (!settings.inline) {\\n          var coords = currentEl.getBoundingClientRect();\\n          var left = coords.x;\\n          var top = scrollY + coords.y + coords.height + settings.margin;\\n    \\n          // If the color picker is inside a custom container\\n          // set the position relative to it\\n          if (parent) {\\n            left -= offset.x;\\n            top -= offset.y;\\n    \\n            if (left + pickerWidth > parent.clientWidth) {\\n              left += coords.width - pickerWidth;\\n              reposition.left = true;\\n            }\\n    \\n            if (top + pickerHeight > parent.clientHeight - parentMarginTop) {\\n              if (pickerHeight + settings.margin <= coords.top - (offset.y - scrollY)) {\\n                top -= coords.height + pickerHeight + settings.margin * 2;\\n                reposition.top = true;\\n              }\\n            }\\n    \\n            top += parent.scrollTop;\\n    \\n            // Otherwise set the position relative to the whole document\\n          } else {\\n            if (left + pickerWidth > document.documentElement.clientWidth) {\\n              left += coords.width - pickerWidth;\\n              reposition.left = true;\\n            }\\n    \\n            if (top + pickerHeight - scrollY > document.documentElement.clientHeight) {\\n              if (pickerHeight + settings.margin <= coords.top) {\\n                top = scrollY + coords.y - pickerHeight - settings.margin;\\n                reposition.top = true;\\n              }\\n            }\\n          }\\n    \\n          picker.classList.toggle('clr-left', reposition.left);\\n          picker.classList.toggle('clr-top', reposition.top);\\n          picker.style.left = left + \\\"px\\\";\\n          picker.style.top = top + \\\"px\\\";\\n          offset.x += picker.offsetLeft;\\n          offset.y += picker.offsetTop;\\n        }\\n    \\n        colorAreaDims = {\\n          width: colorArea.offsetWidth,\\n          height: colorArea.offsetHeight,\\n          x: colorArea.offsetLeft + offset.x,\\n          y: colorArea.offsetTop + offset.y };\\n    \\n      }\\n    \\n      /**\\n       * Wrap the linked input fields in a div that adds a color preview.\\n       * @param {string} selector One or more selectors pointing to input fields.\\n       */\\n      function wrapFields(selector) {\\n        document.querySelectorAll(selector).forEach(function (field) {\\n          var parentNode = field.parentNode;\\n    \\n          if (!parentNode.classList.contains('clr-field')) {\\n            var wrapper = document.createElement('div');\\n            var classes = 'clr-field';\\n    \\n            if (settings.rtl || field.classList.contains('clr-rtl')) {\\n              classes += ' clr-rtl';\\n            }\\n    \\n            wrapper.innerHTML = \\\"<button type=\\\\\\\"button\\\\\\\" aria-labelledby=\\\\\\\"clr-open-label\\\\\\\"></button>\\\";\\n            parentNode.insertBefore(wrapper, field);\\n            wrapper.setAttribute('class', classes);\\n            wrapper.style.color = field.value;\\n            wrapper.appendChild(field);\\n          }\\n        });\\n      }\\n    \\n      /**\\n       * Close the color picker.\\n       * @param {boolean} [revert] If true, revert the color to the original value.\\n       */\\n      function closePicker(revert) {\\n        if (currentEl && !settings.inline) {\\n          var prevEl = currentEl;\\n    \\n          // Revert the color to the original value if needed\\n          if (revert) {\\n            // This will prevent the \\\"change\\\" event on the colorValue input to execute its handler\\n            currentEl = undefined;\\n    \\n            if (oldColor !== prevEl.value) {\\n              prevEl.value = oldColor;\\n    \\n              // Trigger an \\\"input\\\" event to force update the thumbnail next to the input field\\n              prevEl.dispatchEvent(new Event('input', { bubbles: true }));\\n            }\\n          }\\n    \\n          // Trigger a \\\"change\\\" event if needed\\n          setTimeout(function () {// Add this to the end of the event loop\\n            if (oldColor !== prevEl.value) {\\n              prevEl.dispatchEvent(new Event('change', { bubbles: true }));\\n            }\\n          });\\n    \\n          // Hide the picker dialog\\n          picker.classList.remove('clr-open');\\n    \\n          // Reset any previously set per-instance options\\n          if (hasInstance) {\\n            resetVirtualInstance();\\n          }\\n    \\n          // Trigger a \\\"close\\\" event\\n          prevEl.dispatchEvent(new Event('close', { bubbles: true }));\\n    \\n          if (settings.focusInput) {\\n            prevEl.focus({ preventScroll: true });\\n          }\\n    \\n          // This essentially marks the picker as closed\\n          currentEl = undefined;\\n        }\\n      }\\n    \\n      /**\\n       * Set the active color from a string.\\n       * @param {string} str String representing a color.\\n       */\\n      function setColorFromStr(str) {\\n        var rgba = strToRGBA(str);\\n        var hsva = RGBAtoHSVA(rgba);\\n    \\n        updateMarkerA11yLabel(hsva.s, hsva.v);\\n        updateColor(rgba, hsva);\\n    \\n        // Update the UI\\n        hueSlider.value = hsva.h;\\n        picker.style.color = \\\"hsl(\\\" + hsva.h + \\\", 100%, 50%)\\\";\\n        hueMarker.style.left = hsva.h / 360 * 100 + \\\"%\\\";\\n    \\n        colorMarker.style.left = colorAreaDims.width * hsva.s / 100 + \\\"px\\\";\\n        colorMarker.style.top = colorAreaDims.height - colorAreaDims.height * hsva.v / 100 + \\\"px\\\";\\n    \\n        alphaSlider.value = hsva.a * 100;\\n        alphaMarker.style.left = hsva.a * 100 + \\\"%\\\";\\n      }\\n    \\n      /**\\n       * Guess the color format from a string.\\n       * @param {string} str String representing a color.\\n       * @return {string} The color format.\\n       */\\n      function getColorFormatFromStr(str) {\\n        var format = str.substring(0, 3).toLowerCase();\\n    \\n        if (format === 'rgb' || format === 'hsl') {\\n          return format;\\n        }\\n    \\n        return 'hex';\\n      }\\n    \\n      /**\\n       * Copy the active color to the linked input field.\\n       * @param {number} [color] Color value to override the active color.\\n       */\\n      function pickColor(color) {\\n        color = color !== undefined ? color : colorValue.value;\\n    \\n        if (currentEl) {\\n          currentEl.value = color;\\n          currentEl.dispatchEvent(new Event('input', { bubbles: true }));\\n        }\\n    \\n        if (settings.onChange) {\\n          settings.onChange.call(window, color, currentEl);\\n        }\\n    \\n        document.dispatchEvent(new CustomEvent('coloris:pick', { detail: { color: color, currentEl: currentEl } }));\\n      }\\n    \\n      /**\\n       * Set the active color based on a specific point in the color gradient.\\n       * @param {number} x Left position.\\n       * @param {number} y Top position.\\n       */\\n      function setColorAtPosition(x, y) {\\n        var hsva = {\\n          h: hueSlider.value * 1,\\n          s: x / colorAreaDims.width * 100,\\n          v: 100 - y / colorAreaDims.height * 100,\\n          a: alphaSlider.value / 100 };\\n    \\n        var rgba = HSVAtoRGBA(hsva);\\n    \\n        updateMarkerA11yLabel(hsva.s, hsva.v);\\n        updateColor(rgba, hsva);\\n        pickColor();\\n      }\\n    \\n      /**\\n       * Update the color marker's accessibility label.\\n       * @param {number} saturation\\n       * @param {number} value\\n       */\\n      function updateMarkerA11yLabel(saturation, value) {\\n        var label = settings.a11y.marker;\\n    \\n        saturation = saturation.toFixed(1) * 1;\\n        value = value.toFixed(1) * 1;\\n        label = label.replace('{s}', saturation);\\n        label = label.replace('{v}', value);\\n        colorMarker.setAttribute('aria-label', label);\\n      }\\n    \\n      //\\n      /**\\n       * Get the pageX and pageY positions of the pointer.\\n       * @param {object} event The MouseEvent or TouchEvent object.\\n       * @return {object} The pageX and pageY positions.\\n       */\\n      function getPointerPosition(event) {\\n        return {\\n          pageX: event.changedTouches ? event.changedTouches[0].pageX : event.pageX,\\n          pageY: event.changedTouches ? event.changedTouches[0].pageY : event.pageY };\\n    \\n      }\\n    \\n      /**\\n       * Move the color marker when dragged.\\n       * @param {object} event The MouseEvent object.\\n       */\\n      function moveMarker(event) {\\n        var pointer = getPointerPosition(event);\\n        var x = pointer.pageX - colorAreaDims.x;\\n        var y = pointer.pageY - colorAreaDims.y;\\n    \\n        if (container) {\\n          y += container.scrollTop;\\n        }\\n    \\n        setMarkerPosition(x, y);\\n    \\n        // Prevent scrolling while dragging the marker\\n        event.preventDefault();\\n        event.stopPropagation();\\n      }\\n    \\n      /**\\n       * Move the color marker when the arrow keys are pressed.\\n       * @param {number} offsetX The horizontal amount to move.\\n       * @param {number} offsetY The vertical amount to move.\\n       */\\n      function moveMarkerOnKeydown(offsetX, offsetY) {\\n        var x = colorMarker.style.left.replace('px', '') * 1 + offsetX;\\n        var y = colorMarker.style.top.replace('px', '') * 1 + offsetY;\\n    \\n        setMarkerPosition(x, y);\\n      }\\n    \\n      /**\\n       * Set the color marker's position.\\n       * @param {number} x Left position.\\n       * @param {number} y Top position.\\n       */\\n      function setMarkerPosition(x, y) {\\n        // Make sure the marker doesn't go out of bounds\\n        x = x < 0 ? 0 : x > colorAreaDims.width ? colorAreaDims.width : x;\\n        y = y < 0 ? 0 : y > colorAreaDims.height ? colorAreaDims.height : y;\\n    \\n        // Set the position\\n        colorMarker.style.left = x + \\\"px\\\";\\n        colorMarker.style.top = y + \\\"px\\\";\\n    \\n        // Update the color\\n        setColorAtPosition(x, y);\\n    \\n        // Make sure the marker is focused\\n        colorMarker.focus();\\n      }\\n    \\n      /**\\n       * Update the color picker's input field and preview thumb.\\n       * @param {Object} rgba Red, green, blue and alpha values.\\n       * @param {Object} [hsva] Hue, saturation, value and alpha values.\\n       */\\n      function updateColor(rgba, hsva) {if (rgba === void 0) {rgba = {};}if (hsva === void 0) {hsva = {};}\\n        var format = settings.format;\\n    \\n        for (var key in rgba) {\\n          currentColor[key] = rgba[key];\\n        }\\n    \\n        for (var _key in hsva) {\\n          currentColor[_key] = hsva[_key];\\n        }\\n    \\n        var hex = RGBAToHex(currentColor);\\n        var opaqueHex = hex.substring(0, 7);\\n    \\n        colorMarker.style.color = opaqueHex;\\n        alphaMarker.parentNode.style.color = opaqueHex;\\n        alphaMarker.style.color = hex;\\n        colorPreview.style.color = hex;\\n    \\n        // Force repaint the color and alpha gradients as a workaround for a Google Chrome bug\\n        colorArea.style.display = 'none';\\n        colorArea.offsetHeight;\\n        colorArea.style.display = '';\\n        alphaMarker.nextElementSibling.style.display = 'none';\\n        alphaMarker.nextElementSibling.offsetHeight;\\n        alphaMarker.nextElementSibling.style.display = '';\\n    \\n        if (format === 'mixed') {\\n          format = currentColor.a === 1 ? 'hex' : 'rgb';\\n        } else if (format === 'auto') {\\n          format = currentFormat;\\n        }\\n    \\n        switch (format) {\\n          case 'hex':\\n            colorValue.value = hex;\\n            break;\\n          case 'rgb':\\n            colorValue.value = RGBAToStr(currentColor);\\n            break;\\n          case 'hsl':\\n            colorValue.value = HSLAToStr(HSVAtoHSLA(currentColor));\\n            break;}\\n    \\n    \\n        // Select the current format in the format switcher\\n        document.querySelector(\\\".clr-format [value=\\\\\\\"\\\" + format + \\\"\\\\\\\"]\\\").checked = true;\\n      }\\n    \\n      /**\\n       * Set the hue when its slider is moved.\\n       */\\n      function setHue() {\\n        var hue = hueSlider.value * 1;\\n        var x = colorMarker.style.left.replace('px', '') * 1;\\n        var y = colorMarker.style.top.replace('px', '') * 1;\\n    \\n        picker.style.color = \\\"hsl(\\\" + hue + \\\", 100%, 50%)\\\";\\n        hueMarker.style.left = hue / 360 * 100 + \\\"%\\\";\\n    \\n        setColorAtPosition(x, y);\\n      }\\n    \\n      /**\\n       * Set the alpha when its slider is moved.\\n       */\\n      function setAlpha() {\\n        var alpha = alphaSlider.value / 100;\\n    \\n        alphaMarker.style.left = alpha * 100 + \\\"%\\\";\\n        updateColor({ a: alpha });\\n        pickColor();\\n      }\\n    \\n      /**\\n       * Convert HSVA to RGBA.\\n       * @param {object} hsva Hue, saturation, value and alpha values.\\n       * @return {object} Red, green, blue and alpha values.\\n       */\\n      function HSVAtoRGBA(hsva) {\\n        var saturation = hsva.s / 100;\\n        var value = hsva.v / 100;\\n        var chroma = saturation * value;\\n        var hueBy60 = hsva.h / 60;\\n        var x = chroma * (1 - Math.abs(hueBy60 % 2 - 1));\\n        var m = value - chroma;\\n    \\n        chroma = chroma + m;\\n        x = x + m;\\n    \\n        var index = Math.floor(hueBy60) % 6;\\n        var red = [chroma, x, m, m, x, chroma][index];\\n        var green = [x, chroma, chroma, x, m, m][index];\\n        var blue = [m, m, x, chroma, chroma, x][index];\\n    \\n        return {\\n          r: Math.round(red * 255),\\n          g: Math.round(green * 255),\\n          b: Math.round(blue * 255),\\n          a: hsva.a };\\n    \\n      }\\n    \\n      /**\\n       * Convert HSVA to HSLA.\\n       * @param {object} hsva Hue, saturation, value and alpha values.\\n       * @return {object} Hue, saturation, lightness and alpha values.\\n       */\\n      function HSVAtoHSLA(hsva) {\\n        var value = hsva.v / 100;\\n        var lightness = value * (1 - hsva.s / 100 / 2);\\n        var saturation;\\n    \\n        if (lightness > 0 && lightness < 1) {\\n          saturation = Math.round((value - lightness) / Math.min(lightness, 1 - lightness) * 100);\\n        }\\n    \\n        return {\\n          h: hsva.h,\\n          s: saturation || 0,\\n          l: Math.round(lightness * 100),\\n          a: hsva.a };\\n    \\n      }\\n    \\n      /**\\n       * Convert RGBA to HSVA.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {object} Hue, saturation, value and alpha values.\\n       */\\n      function RGBAtoHSVA(rgba) {\\n        var red = rgba.r / 255;\\n        var green = rgba.g / 255;\\n        var blue = rgba.b / 255;\\n        var xmax = Math.max(red, green, blue);\\n        var xmin = Math.min(red, green, blue);\\n        var chroma = xmax - xmin;\\n        var value = xmax;\\n        var hue = 0;\\n        var saturation = 0;\\n    \\n        if (chroma) {\\n          if (xmax === red) {hue = (green - blue) / chroma;}\\n          if (xmax === green) {hue = 2 + (blue - red) / chroma;}\\n          if (xmax === blue) {hue = 4 + (red - green) / chroma;}\\n          if (xmax) {saturation = chroma / xmax;}\\n        }\\n    \\n        hue = Math.floor(hue * 60);\\n    \\n        return {\\n          h: hue < 0 ? hue + 360 : hue,\\n          s: Math.round(saturation * 100),\\n          v: Math.round(value * 100),\\n          a: rgba.a };\\n    \\n      }\\n    \\n      /**\\n       * Parse a string to RGBA.\\n       * @param {string} str String representing a color.\\n       * @return {object} Red, green, blue and alpha values.\\n       */\\n      function strToRGBA(str) {\\n        var regex = /^((rgba)|rgb)[\\\\D]+([\\\\d.]+)[\\\\D]+([\\\\d.]+)[\\\\D]+([\\\\d.]+)[\\\\D]*?([\\\\d.]+|$)/i;\\n        var match, rgba;\\n    \\n        // Default to black for invalid color strings\\n        ctx.fillStyle = '#000';\\n    \\n        // Use canvas to convert the string to a valid color string\\n        ctx.fillStyle = str;\\n        match = regex.exec(ctx.fillStyle);\\n    \\n        if (match) {\\n          rgba = {\\n            r: match[3] * 1,\\n            g: match[4] * 1,\\n            b: match[5] * 1,\\n            a: match[6] * 1 };\\n    \\n    \\n          // Workaround to mitigate a Chromium bug where the alpha value is rounded incorrectly\\n          rgba.a = +rgba.a.toFixed(2);\\n    \\n        } else {\\n          match = ctx.fillStyle.replace('#', '').match(/.{2}/g).map(function (h) {return parseInt(h, 16);});\\n          rgba = {\\n            r: match[0],\\n            g: match[1],\\n            b: match[2],\\n            a: 1 };\\n    \\n        }\\n    \\n        return rgba;\\n      }\\n    \\n      /**\\n       * Convert RGBA to Hex.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {string} Hex color string.\\n       */\\n      function RGBAToHex(rgba) {\\n        var R = rgba.r.toString(16);\\n        var G = rgba.g.toString(16);\\n        var B = rgba.b.toString(16);\\n        var A = '';\\n    \\n        if (rgba.r < 16) {\\n          R = '0' + R;\\n        }\\n    \\n        if (rgba.g < 16) {\\n          G = '0' + G;\\n        }\\n    \\n        if (rgba.b < 16) {\\n          B = '0' + B;\\n        }\\n    \\n        if (settings.alpha && (rgba.a < 1 || settings.forceAlpha)) {\\n          var alpha = rgba.a * 255 | 0;\\n          A = alpha.toString(16);\\n    \\n          if (alpha < 16) {\\n            A = '0' + A;\\n          }\\n        }\\n    \\n        return '#' + R + G + B + A;\\n      }\\n    \\n      /**\\n       * Convert RGBA values to a CSS rgb/rgba string.\\n       * @param {object} rgba Red, green, blue and alpha values.\\n       * @return {string} CSS color string.\\n       */\\n      function RGBAToStr(rgba) {\\n        if (!settings.alpha || rgba.a === 1 && !settings.forceAlpha) {\\n          return \\\"rgb(\\\" + rgba.r + \\\", \\\" + rgba.g + \\\", \\\" + rgba.b + \\\")\\\";\\n        } else {\\n          return \\\"rgba(\\\" + rgba.r + \\\", \\\" + rgba.g + \\\", \\\" + rgba.b + \\\", \\\" + rgba.a + \\\")\\\";\\n        }\\n      }\\n    \\n      /**\\n       * Convert HSLA values to a CSS hsl/hsla string.\\n       * @param {object} hsla Hue, saturation, lightness and alpha values.\\n       * @return {string} CSS color string.\\n       */\\n      function HSLAToStr(hsla) {\\n        if (!settings.alpha || hsla.a === 1 && !settings.forceAlpha) {\\n          return \\\"hsl(\\\" + hsla.h + \\\", \\\" + hsla.s + \\\"%, \\\" + hsla.l + \\\"%)\\\";\\n        } else {\\n          return \\\"hsla(\\\" + hsla.h + \\\", \\\" + hsla.s + \\\"%, \\\" + hsla.l + \\\"%, \\\" + hsla.a + \\\")\\\";\\n        }\\n      }\\n    \\n      /**\\n       * Init the color picker.\\n       */\\n      function init() {\\n        // Render the UI\\n        container = undefined;\\n        picker = document.createElement('div');\\n        picker.setAttribute('id', 'clr-picker');\\n        picker.className = 'clr-picker';\\n        picker.innerHTML =\\n        \\\"<input id=\\\\\\\"clr-color-value\\\\\\\" name=\\\\\\\"clr-color-value\\\\\\\" class=\\\\\\\"clr-color\\\\\\\" type=\\\\\\\"text\\\\\\\" value=\\\\\\\"\\\\\\\" spellcheck=\\\\\\\"false\\\\\\\" aria-label=\\\\\\\"\\\" + settings.a11y.input + \\\"\\\\\\\">\\\" + (\\\"<div id=\\\\\\\"clr-color-area\\\\\\\" class=\\\\\\\"clr-gradient\\\\\\\" role=\\\\\\\"application\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.instruction + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-color-marker\\\" class=\\\"clr-marker\\\" tabindex=\\\"0\\\"></div>' +\\n        '</div>' +\\n        '<div class=\\\"clr-hue\\\">' + (\\\"<input id=\\\\\\\"clr-hue-slider\\\\\\\" name=\\\\\\\"clr-hue-slider\\\\\\\" type=\\\\\\\"range\\\\\\\" min=\\\\\\\"0\\\\\\\" max=\\\\\\\"360\\\\\\\" step=\\\\\\\"1\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.hueSlider + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-hue-marker\\\"></div>' +\\n        '</div>' +\\n        '<div class=\\\"clr-alpha\\\">' + (\\\"<input id=\\\\\\\"clr-alpha-slider\\\\\\\" name=\\\\\\\"clr-alpha-slider\\\\\\\" type=\\\\\\\"range\\\\\\\" min=\\\\\\\"0\\\\\\\" max=\\\\\\\"100\\\\\\\" step=\\\\\\\"1\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.alphaSlider + \\\"\\\\\\\">\\\") +\\n        '<div id=\\\"clr-alpha-marker\\\"></div>' +\\n        '<span></span>' +\\n        '</div>' +\\n        '<div id=\\\"clr-format\\\" class=\\\"clr-format\\\">' +\\n        '<fieldset class=\\\"clr-segmented\\\">' + (\\\"<legend>\\\" +\\n        settings.a11y.format + \\\"</legend>\\\") +\\n        '<input id=\\\"clr-f1\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"hex\\\">' +\\n        '<label for=\\\"clr-f1\\\">Hex</label>' +\\n        '<input id=\\\"clr-f2\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"rgb\\\">' +\\n        '<label for=\\\"clr-f2\\\">RGB</label>' +\\n        '<input id=\\\"clr-f3\\\" type=\\\"radio\\\" name=\\\"clr-format\\\" value=\\\"hsl\\\">' +\\n        '<label for=\\\"clr-f3\\\">HSL</label>' +\\n        '<span></span>' +\\n        '</fieldset>' +\\n        '</div>' +\\n        '<div id=\\\"clr-swatches\\\" class=\\\"clr-swatches\\\"></div>' + (\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-clear\\\\\\\" class=\\\\\\\"clr-clear\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.clear + \\\"\\\\\\\">\\\" + settings.clearLabel + \\\"</button>\\\") +\\n        '<div id=\\\"clr-color-preview\\\" class=\\\"clr-preview\\\">' + (\\\"<button type=\\\\\\\"button\\\\\\\" id=\\\\\\\"clr-close\\\\\\\" class=\\\\\\\"clr-close\\\\\\\" aria-label=\\\\\\\"\\\" +\\n        settings.a11y.close + \\\"\\\\\\\">\\\" + settings.closeLabel + \\\"</button>\\\") +\\n        '</div>' + (\\\"<span id=\\\\\\\"clr-open-label\\\\\\\" hidden>\\\" +\\n        settings.a11y.open + \\\"</span>\\\") + (\\\"<span id=\\\\\\\"clr-swatch-label\\\\\\\" hidden>\\\" +\\n        settings.a11y.swatch + \\\"</span>\\\");\\n    \\n        // Append the color picker to the DOM\\n        document.body.appendChild(picker);\\n    \\n        // Reference the UI elements\\n        colorArea = getEl('clr-color-area');\\n        colorMarker = getEl('clr-color-marker');\\n        clearButton = getEl('clr-clear');\\n        closeButton = getEl('clr-close');\\n        colorPreview = getEl('clr-color-preview');\\n        colorValue = getEl('clr-color-value');\\n        hueSlider = getEl('clr-hue-slider');\\n        hueMarker = getEl('clr-hue-marker');\\n        alphaSlider = getEl('clr-alpha-slider');\\n        alphaMarker = getEl('clr-alpha-marker');\\n    \\n        // Bind the picker to the default selector\\n        bindFields(settings.el);\\n        wrapFields(settings.el);\\n    \\n        addListener(picker, 'mousedown', function (event) {\\n          picker.classList.remove('clr-keyboard-nav');\\n          event.stopPropagation();\\n        });\\n    \\n        addListener(colorArea, 'mousedown', function (event) {\\n          addListener(document, 'mousemove', moveMarker);\\n        });\\n    \\n        addListener(colorArea, 'touchstart', function (event) {\\n          document.addEventListener('touchmove', moveMarker, { passive: false });\\n        });\\n    \\n        addListener(colorMarker, 'mousedown', function (event) {\\n          addListener(document, 'mousemove', moveMarker);\\n        });\\n    \\n        addListener(colorMarker, 'touchstart', function (event) {\\n          document.addEventListener('touchmove', moveMarker, { passive: false });\\n        });\\n    \\n        addListener(colorValue, 'change', function (event) {\\n          var value = colorValue.value;\\n    \\n          if (currentEl || settings.inline) {\\n            var color = value === '' ? value : setColorFromStr(value);\\n            pickColor(color);\\n          }\\n        });\\n    \\n        addListener(clearButton, 'click', function (event) {\\n          pickColor('');\\n          closePicker();\\n        });\\n    \\n        addListener(closeButton, 'click', function (event) {\\n          pickColor();\\n          closePicker();\\n        });\\n    \\n        addListener(getEl('clr-format'), 'click', '.clr-format input', function (event) {\\n          currentFormat = event.target.value;\\n          updateColor();\\n          pickColor();\\n        });\\n    \\n        addListener(picker, 'click', '.clr-swatches button', function (event) {\\n          setColorFromStr(event.target.textContent);\\n          pickColor();\\n    \\n          if (settings.swatchesOnly) {\\n            closePicker();\\n          }\\n        });\\n    \\n        addListener(document, 'mouseup', function (event) {\\n          document.removeEventListener('mousemove', moveMarker);\\n        });\\n    \\n        addListener(document, 'touchend', function (event) {\\n          document.removeEventListener('touchmove', moveMarker);\\n        });\\n    \\n        addListener(document, 'mousedown', function (event) {\\n          keyboardNav = false;\\n          picker.classList.remove('clr-keyboard-nav');\\n          closePicker();\\n        });\\n    \\n        addListener(document, 'keydown', function (event) {\\n          var key = event.key;\\n          var target = event.target;\\n          var shiftKey = event.shiftKey;\\n          var navKeys = ['Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\\n    \\n          if (key === 'Escape') {\\n            closePicker(true);\\n    \\n            // Display focus rings when using the keyboard\\n          } else if (navKeys.includes(key)) {\\n            keyboardNav = true;\\n            picker.classList.add('clr-keyboard-nav');\\n          }\\n    \\n          // Trap the focus within the color picker while it's open\\n          if (key === 'Tab' && target.matches('.clr-picker *')) {\\n            var focusables = getFocusableElements();\\n            var firstFocusable = focusables.shift();\\n            var lastFocusable = focusables.pop();\\n    \\n            if (shiftKey && target === firstFocusable) {\\n              lastFocusable.focus();\\n              event.preventDefault();\\n            } else if (!shiftKey && target === lastFocusable) {\\n              firstFocusable.focus();\\n              event.preventDefault();\\n            }\\n          }\\n        });\\n    \\n        addListener(document, 'click', '.clr-field button', function (event) {\\n          // Reset any previously set per-instance options\\n          if (hasInstance) {\\n            resetVirtualInstance();\\n          }\\n    \\n          // Open the color picker\\n          event.target.nextElementSibling.dispatchEvent(new Event('click', { bubbles: true }));\\n        });\\n    \\n        addListener(colorMarker, 'keydown', function (event) {\\n          var movements = {\\n            ArrowUp: [0, -1],\\n            ArrowDown: [0, 1],\\n            ArrowLeft: [-1, 0],\\n            ArrowRight: [1, 0] };\\n    \\n    \\n          if (Object.keys(movements).includes(event.key)) {\\n            moveMarkerOnKeydown.apply(void 0, movements[event.key]);\\n            event.preventDefault();\\n          }\\n        });\\n    \\n        addListener(colorArea, 'click', moveMarker);\\n        addListener(hueSlider, 'input', setHue);\\n        addListener(alphaSlider, 'input', setAlpha);\\n      }\\n    \\n      /**\\n       * Return a list of focusable elements within the color picker.\\n       * @return {array} The list of focusable DOM elemnts.\\n       */\\n      function getFocusableElements() {\\n        var controls = Array.from(picker.querySelectorAll('input, button'));\\n        var focusables = controls.filter(function (node) {return !!node.offsetWidth;});\\n    \\n        return focusables;\\n      }\\n    \\n      /**\\n       * Shortcut for getElementById to optimize the minified JS.\\n       * @param {string} id The element id.\\n       * @return {object} The DOM element with the provided id.\\n       */\\n      function getEl(id) {\\n        return document.getElementById(id);\\n      }\\n    \\n      /**\\n       * Shortcut for addEventListener to optimize the minified JS.\\n       * @param {object} context The context to which the listener is attached.\\n       * @param {string} type Event type.\\n       * @param {(string|function)} selector Event target if delegation is used, event handler if not.\\n       * @param {function} [fn] Event handler if delegation is used.\\n       */\\n      function addListener(context, type, selector, fn) {\\n        var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\\n    \\n        // Delegate event to the target of the selector\\n        if (typeof selector === 'string') {\\n          context.addEventListener(type, function (event) {\\n            if (matches.call(event.target, selector)) {\\n              fn.call(event.target, event);\\n            }\\n          });\\n    \\n          // If the selector is not a string then it's a function\\n          // in which case we need a regular event listener\\n        } else {\\n          fn = selector;\\n          context.addEventListener(type, fn);\\n        }\\n      }\\n    \\n      /**\\n       * Call a function only when the DOM is ready.\\n       * @param {function} fn The function to call.\\n       * @param {array} [args] Arguments to pass to the function.\\n       */\\n      function DOMReady(fn, args) {\\n        args = args !== undefined ? args : [];\\n    \\n        if (document.readyState !== 'loading') {\\n          fn.apply(void 0, args);\\n        } else {\\n          document.addEventListener('DOMContentLoaded', function () {\\n            fn.apply(void 0, args);\\n          });\\n        }\\n      }\\n    \\n      // Polyfill for Nodelist.forEach\\n      if (NodeList !== undefined && NodeList.prototype && !NodeList.prototype.forEach) {\\n        NodeList.prototype.forEach = Array.prototype.forEach;\\n      }\\n    \\n      // Expose the color picker to the global scope\\n      window.Coloris = function () {\\n        var methods = {\\n          set: configure,\\n          wrap: wrapFields,\\n          close: closePicker,\\n          setInstance: setVirtualInstance,\\n          removeInstance: removeVirtualInstance,\\n          updatePosition: updatePickerPosition };\\n    \\n    \\n        function Coloris(options) {\\n          DOMReady(function () {\\n            if (options) {\\n              if (typeof options === 'string') {\\n                bindFields(options);\\n              } else {\\n                configure(options);\\n              }\\n            }\\n          });\\n        }var _loop2 = function _loop2(\\n    \\n        key) {\\n          Coloris[key] = function () {for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {args[_key2] = arguments[_key2];}\\n            DOMReady(methods[key], args);\\n          };};for (var key in methods) {_loop2(key);\\n        }\\n    \\n        return Coloris;\\n      }();\\n    \\n      // Init the color picker when the DOM is ready\\n      DOMReady(init);\\n    \\n    })(window, document, Math);\\n  </script>\\n  \\n  <!-- Example code -->\\n  <a href=\\\"https://github.com/mdbassit/Coloris\\\">View <b>Coloris</b> on GitHub</a>\\n    <div class=\\\"examples\\\">\\n      <div class=\\\"example square\\\">\\n        <p style=\\\"color: white;\\\">Color Picker</p>\\n        <input type=\\\"text\\\" class=\\\"\\\" id=\\\"colorName\\\" value=\\\"Black\\\">\\n        <input type=\\\"text\\\" class=\\\"coloris instance1\\\" id=\\\"colorCode\\\" value=\\\"#000000\\\">\\n      </div>\\n      <div class=\\\"example square\\\">\\n        <input type=\\\"text\\\" class=\\\"coloris instance2\\\" id=\\\"colorCode\\\" value=\\\"#000000\\\">\\n      </div>\\n    </div>\\n    \\n    <!--script type=\\\"text/javascript\\\" src=\\\"coloris.min.js\\\"></script-->\\n    <script type=\\\"text/javascript\\\">\\n    Coloris({ el: '.coloris' });\\n    \\n    function getColorName( color ) {\\n      //const cc = document.getElementById( 'colorCode' );\\n      const cn = document.getElementById( 'colorName' );\\n      //const name = colorCodeToName[cc.value.toUpperCase()];\\n      const name = colorCodeToName[color.toUpperCase()];\\n      cn.value = name;\\n    }\\n    \\n    Coloris.setInstance('.instance1', {\\n      theme: 'pill',\\n      themeMode: 'dark',\\n      //format: 'hex', // if enabled then disable \\\"formatToggle\\\"\\n      formatToggle: true,\\n      closeButton: true,\\n      clearButton: true,\\n      defaultColor: '#000000',\\n      onChange: getColorName,\\n      swatches: [\\n        // // Row 1\\n        // '#067bc2',\\n        // '#84bcda',\\n        // '#80e377',\\n        // '#ecc30b',\\n        // '#f37748',\\n        // '#d56062',\\n        // // Row 2\\n        // '#067bc2',\\n        // '#84bcda',\\n        // '#80e377',\\n        // '#ecc30b',\\n        // '#f37748',\\n        // '#d56062',\\n        \\\"#000000\\\",\\n        \\\"#000080\\\",\\n        \\\"#00008B\\\",\\n        \\\"#0000CD\\\",\\n        \\\"#0000FF\\\",\\n        \\\"#006400\\\",\\n        \\\"#008000\\\",\\n        \\\"#008080\\\",\\n        \\\"#008B8B\\\",\\n        \\\"#00BFFF\\\",\\n        \\\"#00CED1\\\",\\n        \\\"#00FA9A\\\",\\n        \\\"#00FF00\\\",\\n        \\\"#00FF7F\\\",\\n        \\\"#00FFFF\\\",\\n        \\\"#191970\\\",\\n        \\\"#1E90FF\\\",\\n        \\\"#20B2AA\\\",\\n        \\\"#228B22\\\",\\n        \\\"#2E8B57\\\",\\n        \\\"#2F4F4F\\\",\\n        \\\"#32CD32\\\",\\n        \\\"#3CB371\\\",\\n        \\\"#40E0D0\\\",\\n        \\\"#4169E1\\\",\\n        \\\"#4682B4\\\",\\n        \\\"#483D8B\\\",\\n        \\\"#48D1CC\\\",\\n        \\\"#4B0082\\\",\\n        \\\"#556B2F\\\",\\n        \\\"#5F9EA0\\\",\\n        \\\"#6495ED\\\",\\n        \\\"#663399\\\",\\n        \\\"#66CDAA\\\",\\n        \\\"#696969\\\",\\n        \\\"#6A5ACD\\\",\\n        \\\"#6B8E23\\\",\\n        \\\"#708090\\\",\\n        \\\"#778899\\\",\\n        \\\"#7B68EE\\\",\\n        \\\"#7CFC00\\\",\\n        \\\"#7FFF00\\\",\\n        \\\"#7FFFD4\\\",\\n        \\\"#800000\\\",\\n        \\\"#800080\\\",\\n        \\\"#808000\\\",\\n        \\\"#808080\\\",\\n        \\\"#87CEEB\\\",\\n        \\\"#87CEFA\\\",\\n        \\\"#8A2BE2\\\",\\n        \\\"#8B0000\\\",\\n        \\\"#8B008B\\\",\\n        \\\"#8B4513\\\",\\n        \\\"#8FBC8F\\\",\\n        \\\"#90EE90\\\",\\n        \\\"#9370DB\\\",\\n        \\\"#9400D3\\\",\\n        \\\"#98FB98\\\",\\n        \\\"#9932CC\\\",\\n        \\\"#9ACD32\\\",\\n        \\\"#A0522D\\\",\\n        \\\"#A52A2A\\\",\\n        \\\"#A9A9A9\\\",\\n        \\\"#ADD8E6\\\",\\n        \\\"#ADFF2F\\\",\\n        \\\"#AFEEEE\\\",\\n        \\\"#B0C4DE\\\",\\n        \\\"#B0E0E6\\\",\\n        \\\"#B22222\\\",\\n        \\\"#B8860B\\\",\\n        \\\"#BA55D3\\\",\\n        \\\"#BC8F8F\\\",\\n        \\\"#BDB76B\\\",\\n        \\\"#C0C0C0\\\",\\n        \\\"#C71585\\\",\\n        \\\"#CD5C5C\\\",\\n        \\\"#CD853F\\\",\\n        \\\"#D2691E\\\",\\n        \\\"#D2B48C\\\",\\n        \\\"#D3D3D3\\\",\\n        \\\"#D8BFD8\\\",\\n        \\\"#DA70D6\\\",\\n        \\\"#DAA520\\\",\\n        \\\"#DB7093\\\",\\n        \\\"#DC143C\\\",\\n        \\\"#DCDCDC\\\",\\n        \\\"#DDA0DD\\\",\\n        \\\"#DEB887\\\",\\n        \\\"#E0FFFF\\\",\\n        \\\"#E6E6FA\\\",\\n        \\\"#E9967A\\\",\\n        \\\"#EE82EE\\\",\\n        \\\"#EEE8AA\\\",\\n        \\\"#F08080\\\",\\n        \\\"#F0E68C\\\",\\n        \\\"#F0F8FF\\\",\\n        \\\"#F0FFF0\\\",\\n        \\\"#F0FFFF\\\",\\n        \\\"#F4A460\\\",\\n        \\\"#F5DEB3\\\",\\n        \\\"#F5F5DC\\\",\\n        \\\"#F5F5F5\\\",\\n        \\\"#F5FFFA\\\",\\n        \\\"#F8F8FF\\\",\\n        \\\"#FA8072\\\",\\n        \\\"#FAEBD7\\\",\\n        \\\"#FAF0E6\\\",\\n        \\\"#FAFAD2\\\",\\n        \\\"#FDF5E6\\\",\\n        \\\"#FF0000\\\",\\n        \\\"#FF00FF\\\",\\n        \\\"#FF1493\\\",\\n        \\\"#FF4500\\\",\\n        \\\"#FF6347\\\",\\n        \\\"#FF69B4\\\",\\n        \\\"#FF7F50\\\",\\n        \\\"#FF8C00\\\",\\n        \\\"#FFA07A\\\",\\n        \\\"#FFA500\\\",\\n        \\\"#FFB6C1\\\",\\n        \\\"#FFC0CB\\\",\\n        \\\"#FFD700\\\",\\n        \\\"#FFDAB9\\\",\\n        \\\"#FFDEAD\\\",\\n        \\\"#FFE4B5\\\",\\n        \\\"#FFE4C4\\\",\\n        \\\"#FFE4E1\\\",\\n        \\\"#FFEBCD\\\",\\n        \\\"#FFEFD5\\\",\\n        \\\"#FFF0F5\\\",\\n        \\\"#FFF5EE\\\",\\n        \\\"#FFF8DC\\\",\\n        \\\"#FFFACD\\\",\\n        \\\"#FFFAF0\\\",\\n        \\\"#FFFAFA\\\",\\n        \\\"#FFFF00\\\",\\n        \\\"#FFFFE0\\\",\\n        \\\"#FFFFF0\\\",\\n        \\\"#FFFFFF\\\"\\n      ]\\n    });\\n    \\n    Coloris.setInstance('.instance2', {\\n      theme: 'pill',\\n      themeMode: 'dark',\\n      //format: 'hex', // if enabled then disable \\\"formatToggle\\\"\\n      formatToggle: true,\\n      closeButton: true,\\n      clearButton: true,\\n      defaultColor: '#000000',\\n      onChange: getColorName,\\n      swatches: [\\n        \\\"#f9ebea\\\",\\n        \\\"#f2d7d5\\\",\\n        \\\"#e6b0aa\\\",\\n        \\\"#d98880\\\",\\n        \\\"#cd6155\\\",\\n        \\\"#c0392b\\\",\\n        \\\"#a93226\\\",\\n        \\\"#922b21\\\",\\n        \\\"#7b241c\\\",\\n        \\\"#641e16\\\",\\n        \\\"#fdedec\\\",\\n        \\\"#fadbd8\\\",\\n        \\\"#f5b7b1\\\",\\n        \\\"#f1948a\\\",\\n        \\\"#ec7063\\\",\\n        \\\"#e74c3c\\\",\\n        \\\"#cb4335\\\",\\n        \\\"#b03a2e\\\",\\n        \\\"#943126\\\",\\n        \\\"#78281f\\\",\\n        \\\"#f5eef8\\\",\\n        \\\"#ebdef0\\\",\\n        \\\"#d7bde2\\\",\\n        \\\"#c39bd3\\\",\\n        \\\"#af7ac5\\\",\\n        \\\"#9b59b6\\\",\\n        \\\"#884ea0\\\",\\n        \\\"#76448a\\\",\\n        \\\"#633974\\\",\\n        \\\"#512e5f\\\",\\n        \\\"#f4ecf7\\\",\\n        \\\"#e8daef\\\",\\n        \\\"#d2b4de\\\",\\n        \\\"#bb8fce\\\",\\n        \\\"#a569bd\\\",\\n        \\\"#8e44ad\\\",\\n        \\\"#7d3c98\\\",\\n        \\\"#6c3483\\\",\\n        \\\"#5b2c6f\\\",\\n        \\\"#4a235a\\\",\\n        \\\"#eaf2f8\\\",\\n        \\\"#d4e6f1\\\",\\n        \\\"#a9cce3\\\",\\n        \\\"#7fb3d5\\\",\\n        \\\"#5499c7\\\",\\n        \\\"#2980b9\\\",\\n        \\\"#2471a3\\\",\\n        \\\"#1f618d\\\",\\n        \\\"#1a5276\\\",\\n        \\\"#154360\\\",\\n        \\\"#ebf5fb\\\",\\n        \\\"#d6eaf8\\\",\\n        \\\"#aed6f1\\\",\\n        \\\"#85c1e9\\\",\\n        \\\"#5dade2\\\",\\n        \\\"#3498db\\\",\\n        \\\"#2e86c1\\\",\\n        \\\"#2874a6\\\",\\n        \\\"#21618c\\\",\\n        \\\"#1b4f72\\\",\\n        \\\"#e8f8f5\\\",\\n        \\\"#d1f2eb\\\",\\n        \\\"#a3e4d7\\\",\\n        \\\"#76d7c4\\\",\\n        \\\"#48c9b0\\\",\\n        \\\"#1abc9c\\\",\\n        \\\"#17a589\\\",\\n        \\\"#148f77\\\",\\n        \\\"#117864\\\",\\n        \\\"#0e6251\\\",\\n        \\\"#e8f6f3\\\",\\n        \\\"#d0ece7\\\",\\n        \\\"#a2d9ce\\\",\\n        \\\"#73c6b6\\\",\\n        \\\"#45b39d\\\",\\n        \\\"#16a085\\\",\\n        \\\"#138d75\\\",\\n        \\\"#117a65\\\",\\n        \\\"#0e6655\\\",\\n        \\\"#0b5345\\\",\\n        \\\"#e9f7ef\\\",\\n        \\\"#d4efdf\\\",\\n        \\\"#a9dfbf\\\",\\n        \\\"#7dcea0\\\",\\n        \\\"#52be80\\\",\\n        \\\"#27ae60\\\",\\n        \\\"#229954\\\",\\n        \\\"#1e8449\\\",\\n        \\\"#196f3d\\\",\\n        \\\"#145a32\\\",\\n        \\\"#eafaf1\\\",\\n        \\\"#d5f5e3\\\",\\n        \\\"#abebc6\\\",\\n        \\\"#82e0aa\\\",\\n        \\\"#58d68d\\\",\\n        \\\"#2ecc71\\\",\\n        \\\"#28b463\\\",\\n        \\\"#239b56\\\",\\n        \\\"#1d8348\\\",\\n        \\\"#186a3b\\\",\\n        \\\"#fef9e7\\\",\\n        \\\"#fcf3cf\\\",\\n        \\\"#f9e79f\\\",\\n        \\\"#f7dc6f\\\",\\n        \\\"#f4d03f\\\",\\n        \\\"#f1c40f\\\",\\n        \\\"#d4ac0d\\\",\\n        \\\"#b7950b\\\",\\n        \\\"#9a7d0a\\\",\\n        \\\"#7d6608\\\",\\n        \\\"#fef5e7\\\",\\n        \\\"#fdebd0\\\",\\n        \\\"#fad7a0\\\",\\n        \\\"#f8c471\\\",\\n        \\\"#f5b041\\\",\\n        \\\"#f39c12\\\",\\n        \\\"#d68910\\\",\\n        \\\"#b9770e\\\",\\n        \\\"#9c640c\\\",\\n        \\\"#7e5109\\\",\\n        \\\"#fdf2e9\\\",\\n        \\\"#fae5d3\\\",\\n        \\\"#f5cba7\\\",\\n        \\\"#f0b27a\\\",\\n        \\\"#eb984e\\\",\\n        \\\"#e67e22\\\",\\n        \\\"#ca6f1e\\\",\\n        \\\"#af601a\\\",\\n        \\\"#935116\\\",\\n        \\\"#784212\\\",\\n        \\\"#fbeee6\\\",\\n        \\\"#f6ddcc\\\",\\n        \\\"#edbb99\\\",\\n        \\\"#e59866\\\",\\n        \\\"#dc7633\\\",\\n        \\\"#d35400\\\",\\n        \\\"#ba4a00\\\",\\n        \\\"#a04000\\\",\\n        \\\"#873600\\\",\\n        \\\"#6e2c00\\\",\\n        \\\"#fdfefe\\\",\\n        \\\"#fbfcfc\\\",\\n        \\\"#f7f9f9\\\",\\n        \\\"#f4f6f7\\\",\\n        \\\"#f0f3f4\\\",\\n        \\\"#ecf0f1\\\",\\n        \\\"#d0d3d4\\\",\\n        \\\"#b3b6b7\\\",\\n        \\\"#979a9a\\\",\\n        \\\"#7b7d7d\\\",\\n        \\\"#f8f9f9\\\",\\n        \\\"#f2f3f4\\\",\\n        \\\"#e5e7e9\\\",\\n        \\\"#d7dbdd\\\",\\n        \\\"#cacfd2\\\",\\n        \\\"#bdc3c7\\\",\\n        \\\"#a6acaf\\\",\\n        \\\"#909497\\\",\\n        \\\"#797d7f\\\",\\n        \\\"#626567\\\",\\n        \\\"#f4f6f6\\\",\\n        \\\"#eaeded\\\",\\n        \\\"#d5dbdb\\\",\\n        \\\"#bfc9ca\\\",\\n        \\\"#aab7b8\\\",\\n        \\\"#95a5a6\\\",\\n        \\\"#839192\\\",\\n        \\\"#717d7e\\\",\\n        \\\"#5f6a6a\\\",\\n        \\\"#4d5656\\\",\\n        \\\"#f2f4f4\\\",\\n        \\\"#e5e8e8\\\",\\n        \\\"#ccd1d1\\\",\\n        \\\"#b2babb\\\",\\n        \\\"#99a3a4\\\",\\n        \\\"#7f8c8d\\\",\\n        \\\"#707b7c\\\",\\n        \\\"#616a6b\\\",\\n        \\\"#515a5a\\\",\\n        \\\"#424949\\\",\\n        \\\"#ebedef\\\",\\n        \\\"#d6dbdf\\\",\\n        \\\"#aeb6bf\\\",\\n        \\\"#85929e\\\",\\n        \\\"#5d6d7e\\\",\\n        \\\"#34495e\\\",\\n        \\\"#2e4053\\\",\\n        \\\"#283747\\\",\\n        \\\"#212f3c\\\",\\n        \\\"#1b2631\\\",\\n        \\\"#eaecee\\\",\\n        \\\"#d5d8dc\\\",\\n        \\\"#abb2b9\\\",\\n        \\\"#808b96\\\",\\n        \\\"#566573\\\",\\n        \\\"#2c3e50\\\",\\n        \\\"#273746\\\",\\n        \\\"#212f3d\\\",\\n        \\\"#1c2833\\\",\\n        \\\"#17202a\\\",\\n        \\\"#CD5C5C\\\",\\n        \\\"#F08080\\\",\\n        \\\"#FA8072\\\",\\n        \\\"#E9967A\\\",\\n        \\\"#FFA07A\\\",\\n        \\\"#DFFF00\\\",\\n        \\\"#FFBF00\\\",\\n        \\\"#FF7F50\\\",\\n        \\\"#DE3163\\\",\\n        \\\"#9FE2BF\\\",\\n        \\\"#40E0D0\\\",\\n        \\\"#6495ED\\\",\\n        \\\"#CCCCFF\\\",\\n        \\\"#FFFFFF\\\",\\n        \\\"#C0C0C0\\\",\\n        \\\"#808080\\\",\\n        \\\"#000000\\\",\\n        \\\"#FF0000\\\",\\n        \\\"#800000\\\",\\n        \\\"#FFFF00\\\",\\n        \\\"#808000\\\",\\n        \\\"#00FF00\\\",\\n        \\\"#008000\\\",\\n        \\\"#00FFFF\\\",\\n        \\\"#008080\\\",\\n        \\\"#0000FF\\\",\\n        \\\"#000080\\\",\\n        \\\"#FF00FF\\\",\\n        \\\"#800080\\\"\\n      ]\\n    });\\n    \\n    const colorNameToCode = {\\n      \\\"AliceBlue\\\": \\\"#F0F8FF\\\",\\n      \\\"AntiqueWhite\\\": \\\"#FAEBD7\\\",\\n      \\\"Aqua\\\": \\\"#00FFFF\\\",\\n      \\\"Aquamarine\\\": \\\"#7FFFD4\\\",\\n      \\\"Azure\\\": \\\"#F0FFFF\\\",\\n      \\\"Beige\\\": \\\"#F5F5DC\\\",\\n      \\\"Bisque\\\": \\\"#FFE4C4\\\",\\n      \\\"Black\\\": \\\"#000000\\\",\\n      \\\"BlanchedAlmond\\\": \\\"#FFEBCD\\\",\\n      \\\"Blue\\\": \\\"#0000FF\\\",\\n      \\\"BlueViolet\\\": \\\"#8A2BE2\\\",\\n      \\\"Brown\\\": \\\"#A52A2A\\\",\\n      \\\"BurlyWood\\\": \\\"#DEB887\\\",\\n      \\\"CadetBlue\\\": \\\"#5F9EA0\\\",\\n      \\\"Chartreuse\\\": \\\"#7FFF00\\\",\\n      \\\"Chocolate\\\": \\\"#D2691E\\\",\\n      \\\"Coral\\\": \\\"#FF7F50\\\",\\n      \\\"CornflowerBlue\\\": \\\"#6495ED\\\",\\n      \\\"Cornsilk\\\": \\\"#FFF8DC\\\",\\n      \\\"Crimson\\\": \\\"#DC143C\\\",\\n      \\\"Cyan\\\": \\\"#00FFFF\\\",\\n      \\\"DarkBlue\\\": \\\"#00008B\\\",\\n      \\\"DarkCyan\\\": \\\"#008B8B\\\",\\n      \\\"DarkGoldenRod\\\": \\\"#B8860B\\\",\\n      \\\"DarkGray\\\": \\\"#A9A9A9\\\",\\n      \\\"DarkGrey\\\": \\\"#A9A9A9\\\",\\n      \\\"DarkGreen\\\": \\\"#006400\\\",\\n      \\\"DarkKhaki\\\": \\\"#BDB76B\\\",\\n      \\\"DarkMagenta\\\": \\\"#8B008B\\\",\\n      \\\"DarkOliveGreen\\\": \\\"#556B2F\\\",\\n      \\\"DarkOrange\\\": \\\"#FF8C00\\\",\\n      \\\"DarkOrchid\\\": \\\"#9932CC\\\",\\n      \\\"DarkRed\\\": \\\"#8B0000\\\",\\n      \\\"DarkSalmon\\\": \\\"#E9967A\\\",\\n      \\\"DarkSeaGreen\\\": \\\"#8FBC8F\\\",\\n      \\\"DarkSlateBlue\\\": \\\"#483D8B\\\",\\n      \\\"DarkSlateGray\\\": \\\"#2F4F4F\\\",\\n      \\\"DarkSlateGrey\\\": \\\"#2F4F4F\\\",\\n      \\\"DarkTurquoise\\\": \\\"#00CED1\\\",\\n      \\\"DarkViolet\\\": \\\"#9400D3\\\",\\n      \\\"DeepPink\\\": \\\"#FF1493\\\",\\n      \\\"DeepSkyBlue\\\": \\\"#00BFFF\\\",\\n      \\\"DimGray\\\": \\\"#696969\\\",\\n      \\\"DimGrey\\\": \\\"#696969\\\",\\n      \\\"DodgerBlue\\\": \\\"#1E90FF\\\",\\n      \\\"FireBrick\\\": \\\"#B22222\\\",\\n      \\\"FloralWhite\\\": \\\"#FFFAF0\\\",\\n      \\\"ForestGreen\\\": \\\"#228B22\\\",\\n      \\\"Fuchsia\\\": \\\"#FF00FF\\\",\\n      \\\"Gainsboro\\\": \\\"#DCDCDC\\\",\\n      \\\"GhostWhite\\\": \\\"#F8F8FF\\\",\\n      \\\"Gold\\\": \\\"#FFD700\\\",\\n      \\\"GoldenRod\\\": \\\"#DAA520\\\",\\n      \\\"Gray\\\": \\\"#808080\\\",\\n      \\\"Grey\\\": \\\"#808080\\\",\\n      \\\"Green\\\": \\\"#008000\\\",\\n      \\\"GreenYellow\\\": \\\"#ADFF2F\\\",\\n      \\\"HoneyDew\\\": \\\"#F0FFF0\\\",\\n      \\\"HotPink\\\": \\\"#FF69B4\\\",\\n      \\\"IndianRed\\\": \\\"#CD5C5C\\\",\\n      \\\"Indigo\\\": \\\"#4B0082\\\",\\n      \\\"Ivory\\\": \\\"#FFFFF0\\\",\\n      \\\"Khaki\\\": \\\"#F0E68C\\\",\\n      \\\"Lavender\\\": \\\"#E6E6FA\\\",\\n      \\\"LavenderBlush\\\": \\\"#FFF0F5\\\",\\n      \\\"LawnGreen\\\": \\\"#7CFC00\\\",\\n      \\\"LemonChiffon\\\": \\\"#FFFACD\\\",\\n      \\\"LightBlue\\\": \\\"#ADD8E6\\\",\\n      \\\"LightCoral\\\": \\\"#F08080\\\",\\n      \\\"LightCyan\\\": \\\"#E0FFFF\\\",\\n      \\\"LightGoldenRodYellow\\\": \\\"#FAFAD2\\\",\\n      \\\"LightGray\\\": \\\"#D3D3D3\\\",\\n      \\\"LightGrey\\\": \\\"#D3D3D3\\\",\\n      \\\"LightGreen\\\": \\\"#90EE90\\\",\\n      \\\"LightPink\\\": \\\"#FFB6C1\\\",\\n      \\\"LightSalmon\\\": \\\"#FFA07A\\\",\\n      \\\"LightSeaGreen\\\": \\\"#20B2AA\\\",\\n      \\\"LightSkyBlue\\\": \\\"#87CEFA\\\",\\n      \\\"LightSlateGray\\\": \\\"#778899\\\",\\n      \\\"LightSlateGrey\\\": \\\"#778899\\\",\\n      \\\"LightSteelBlue\\\": \\\"#B0C4DE\\\",\\n      \\\"LightYellow\\\": \\\"#FFFFE0\\\",\\n      \\\"Lime\\\": \\\"#00FF00\\\",\\n      \\\"LimeGreen\\\": \\\"#32CD32\\\",\\n      \\\"Linen\\\": \\\"#FAF0E6\\\",\\n      \\\"Magenta\\\": \\\"#FF00FF\\\",\\n      \\\"Maroon\\\": \\\"#800000\\\",\\n      \\\"MediumAquaMarine\\\": \\\"#66CDAA\\\",\\n      \\\"MediumBlue\\\": \\\"#0000CD\\\",\\n      \\\"MediumOrchid\\\": \\\"#BA55D3\\\",\\n      \\\"MediumPurple\\\": \\\"#9370DB\\\",\\n      \\\"MediumSeaGreen\\\": \\\"#3CB371\\\",\\n      \\\"MediumSlateBlue\\\": \\\"#7B68EE\\\",\\n      \\\"MediumSpringGreen\\\": \\\"#00FA9A\\\",\\n      \\\"MediumTurquoise\\\": \\\"#48D1CC\\\",\\n      \\\"MediumVioletRed\\\": \\\"#C71585\\\",\\n      \\\"MidnightBlue\\\": \\\"#191970\\\",\\n      \\\"MintCream\\\": \\\"#F5FFFA\\\",\\n      \\\"MistyRose\\\": \\\"#FFE4E1\\\",\\n      \\\"Moccasin\\\": \\\"#FFE4B5\\\",\\n      \\\"NavajoWhite\\\": \\\"#FFDEAD\\\",\\n      \\\"Navy\\\": \\\"#000080\\\",\\n      \\\"OldLace\\\": \\\"#FDF5E6\\\",\\n      \\\"Olive\\\": \\\"#808000\\\",\\n      \\\"OliveDrab\\\": \\\"#6B8E23\\\",\\n      \\\"Orange\\\": \\\"#FFA500\\\",\\n      \\\"OrangeRed\\\": \\\"#FF4500\\\",\\n      \\\"Orchid\\\": \\\"#DA70D6\\\",\\n      \\\"PaleGoldenRod\\\": \\\"#EEE8AA\\\",\\n      \\\"PaleGreen\\\": \\\"#98FB98\\\",\\n      \\\"PaleTurquoise\\\": \\\"#AFEEEE\\\",\\n      \\\"PaleVioletRed\\\": \\\"#DB7093\\\",\\n      \\\"PapayaWhip\\\": \\\"#FFEFD5\\\",\\n      \\\"PeachPuff\\\": \\\"#FFDAB9\\\",\\n      \\\"Peru\\\": \\\"#CD853F\\\",\\n      \\\"Pink\\\": \\\"#FFC0CB\\\",\\n      \\\"Plum\\\": \\\"#DDA0DD\\\",\\n      \\\"PowderBlue\\\": \\\"#B0E0E6\\\",\\n      \\\"Purple\\\": \\\"#800080\\\",\\n      \\\"RebeccaPurple\\\": \\\"#663399\\\",\\n      \\\"Red\\\": \\\"#FF0000\\\",\\n      \\\"RosyBrown\\\": \\\"#BC8F8F\\\",\\n      \\\"RoyalBlue\\\": \\\"#4169E1\\\",\\n      \\\"SaddleBrown\\\": \\\"#8B4513\\\",\\n      \\\"Salmon\\\": \\\"#FA8072\\\",\\n      \\\"SandyBrown\\\": \\\"#F4A460\\\",\\n      \\\"SeaGreen\\\": \\\"#2E8B57\\\",\\n      \\\"SeaShell\\\": \\\"#FFF5EE\\\",\\n      \\\"Sienna\\\": \\\"#A0522D\\\",\\n      \\\"Silver\\\": \\\"#C0C0C0\\\",\\n      \\\"SkyBlue\\\": \\\"#87CEEB\\\",\\n      \\\"SlateBlue\\\": \\\"#6A5ACD\\\",\\n      \\\"SlateGray\\\": \\\"#708090\\\",\\n      \\\"SlateGrey\\\": \\\"#708090\\\",\\n      \\\"Snow\\\": \\\"#FFFAFA\\\",\\n      \\\"SpringGreen\\\": \\\"#00FF7F\\\",\\n      \\\"SteelBlue\\\": \\\"#4682B4\\\",\\n      \\\"Tan\\\": \\\"#D2B48C\\\",\\n      \\\"Teal\\\": \\\"#008080\\\",\\n      \\\"Thistle\\\": \\\"#D8BFD8\\\",\\n      \\\"Tomato\\\": \\\"#FF6347\\\",\\n      \\\"Turquoise\\\": \\\"#40E0D0\\\",\\n      \\\"Violet\\\": \\\"#EE82EE\\\",\\n      \\\"Wheat\\\": \\\"#F5DEB3\\\",\\n      \\\"White\\\": \\\"#FFFFFF\\\",\\n      \\\"WhiteSmoke\\\": \\\"#F5F5F5\\\",\\n      \\\"Yellow\\\": \\\"#FFFF00\\\",\\n      \\\"YellowGreen\\\": \\\"#9ACD32\\\",\\n    }\\n    const colorCodeToName = {\\n      \\\"#F0F8FF\\\": \\\"AliceBlue\\\",\\n      \\\"#FAEBD7\\\": \\\"AntiqueWhite\\\",\\n      \\\"#00FFFF\\\": \\\"Cyan\\\",\\n      \\\"#7FFFD4\\\": \\\"Aquamarine\\\",\\n      \\\"#F0FFFF\\\": \\\"Azure\\\",\\n      \\\"#F5F5DC\\\": \\\"Beige\\\",\\n      \\\"#FFE4C4\\\": \\\"Bisque\\\",\\n      \\\"#000000\\\": \\\"Black\\\",\\n      \\\"#FFEBCD\\\": \\\"BlanchedAlmond\\\",\\n      \\\"#0000FF\\\": \\\"Blue\\\",\\n      \\\"#8A2BE2\\\": \\\"BlueViolet\\\",\\n      \\\"#A52A2A\\\": \\\"Brown\\\",\\n      \\\"#DEB887\\\": \\\"BurlyWood\\\",\\n      \\\"#5F9EA0\\\": \\\"CadetBlue\\\",\\n      \\\"#7FFF00\\\": \\\"Chartreuse\\\",\\n      \\\"#D2691E\\\": \\\"Chocolate\\\",\\n      \\\"#FF7F50\\\": \\\"Coral\\\",\\n      \\\"#6495ED\\\": \\\"CornflowerBlue\\\",\\n      \\\"#FFF8DC\\\": \\\"Cornsilk\\\",\\n      \\\"#DC143C\\\": \\\"Crimson\\\",\\n      \\\"#00008B\\\": \\\"DarkBlue\\\",\\n      \\\"#008B8B\\\": \\\"DarkCyan\\\",\\n      \\\"#B8860B\\\": \\\"DarkGoldenRod\\\",\\n      \\\"#A9A9A9\\\": \\\"DarkGrey\\\",\\n      \\\"#006400\\\": \\\"DarkGreen\\\",\\n      \\\"#BDB76B\\\": \\\"DarkKhaki\\\",\\n      \\\"#8B008B\\\": \\\"DarkMagenta\\\",\\n      \\\"#556B2F\\\": \\\"DarkOliveGreen\\\",\\n      \\\"#FF8C00\\\": \\\"DarkOrange\\\",\\n      \\\"#9932CC\\\": \\\"DarkOrchid\\\",\\n      \\\"#8B0000\\\": \\\"DarkRed\\\",\\n      \\\"#E9967A\\\": \\\"DarkSalmon\\\",\\n      \\\"#8FBC8F\\\": \\\"DarkSeaGreen\\\",\\n      \\\"#483D8B\\\": \\\"DarkSlateBlue\\\",\\n      \\\"#2F4F4F\\\": \\\"DarkSlateGrey\\\",\\n      \\\"#00CED1\\\": \\\"DarkTurquoise\\\",\\n      \\\"#9400D3\\\": \\\"DarkViolet\\\",\\n      \\\"#FF1493\\\": \\\"DeepPink\\\",\\n      \\\"#00BFFF\\\": \\\"DeepSkyBlue\\\",\\n      \\\"#696969\\\": \\\"DimGrey\\\",\\n      \\\"#1E90FF\\\": \\\"DodgerBlue\\\",\\n      \\\"#B22222\\\": \\\"FireBrick\\\",\\n      \\\"#FFFAF0\\\": \\\"FloralWhite\\\",\\n      \\\"#228B22\\\": \\\"ForestGreen\\\",\\n      \\\"#FF00FF\\\": \\\"Magenta\\\",\\n      \\\"#DCDCDC\\\": \\\"Gainsboro\\\",\\n      \\\"#F8F8FF\\\": \\\"GhostWhite\\\",\\n      \\\"#FFD700\\\": \\\"Gold\\\",\\n      \\\"#DAA520\\\": \\\"GoldenRod\\\",\\n      \\\"#808080\\\": \\\"Grey\\\",\\n      \\\"#008000\\\": \\\"Green\\\",\\n      \\\"#ADFF2F\\\": \\\"GreenYellow\\\",\\n      \\\"#F0FFF0\\\": \\\"HoneyDew\\\",\\n      \\\"#FF69B4\\\": \\\"HotPink\\\",\\n      \\\"#CD5C5C\\\": \\\"IndianRed\\\",\\n      \\\"#4B0082\\\": \\\"Indigo\\\",\\n      \\\"#FFFFF0\\\": \\\"Ivory\\\",\\n      \\\"#F0E68C\\\": \\\"Khaki\\\",\\n      \\\"#E6E6FA\\\": \\\"Lavender\\\",\\n      \\\"#FFF0F5\\\": \\\"LavenderBlush\\\",\\n      \\\"#7CFC00\\\": \\\"LawnGreen\\\",\\n      \\\"#FFFACD\\\": \\\"LemonChiffon\\\",\\n      \\\"#ADD8E6\\\": \\\"LightBlue\\\",\\n      \\\"#F08080\\\": \\\"LightCoral\\\",\\n      \\\"#E0FFFF\\\": \\\"LightCyan\\\",\\n      \\\"#FAFAD2\\\": \\\"LightGoldenRodYellow\\\",\\n      \\\"#D3D3D3\\\": \\\"LightGrey\\\",\\n      \\\"#90EE90\\\": \\\"LightGreen\\\",\\n      \\\"#FFB6C1\\\": \\\"LightPink\\\",\\n      \\\"#FFA07A\\\": \\\"LightSalmon\\\",\\n      \\\"#20B2AA\\\": \\\"LightSeaGreen\\\",\\n      \\\"#87CEFA\\\": \\\"LightSkyBlue\\\",\\n      \\\"#778899\\\": \\\"LightSlateGrey\\\",\\n      \\\"#B0C4DE\\\": \\\"LightSteelBlue\\\",\\n      \\\"#FFFFE0\\\": \\\"LightYellow\\\",\\n      \\\"#00FF00\\\": \\\"Lime\\\",\\n      \\\"#32CD32\\\": \\\"LimeGreen\\\",\\n      \\\"#FAF0E6\\\": \\\"Linen\\\",\\n      \\\"#800000\\\": \\\"Maroon\\\",\\n      \\\"#66CDAA\\\": \\\"MediumAquaMarine\\\",\\n      \\\"#0000CD\\\": \\\"MediumBlue\\\",\\n      \\\"#BA55D3\\\": \\\"MediumOrchid\\\",\\n      \\\"#9370DB\\\": \\\"MediumPurple\\\",\\n      \\\"#3CB371\\\": \\\"MediumSeaGreen\\\",\\n      \\\"#7B68EE\\\": \\\"MediumSlateBlue\\\",\\n      \\\"#00FA9A\\\": \\\"MediumSpringGreen\\\",\\n      \\\"#48D1CC\\\": \\\"MediumTurquoise\\\",\\n      \\\"#C71585\\\": \\\"MediumVioletRed\\\",\\n      \\\"#191970\\\": \\\"MidnightBlue\\\",\\n      \\\"#F5FFFA\\\": \\\"MintCream\\\",\\n      \\\"#FFE4E1\\\": \\\"MistyRose\\\",\\n      \\\"#FFE4B5\\\": \\\"Moccasin\\\",\\n      \\\"#FFDEAD\\\": \\\"NavajoWhite\\\",\\n      \\\"#000080\\\": \\\"Navy\\\",\\n      \\\"#FDF5E6\\\": \\\"OldLace\\\",\\n      \\\"#808000\\\": \\\"Olive\\\",\\n      \\\"#6B8E23\\\": \\\"OliveDrab\\\",\\n      \\\"#FFA500\\\": \\\"Orange\\\",\\n      \\\"#FF4500\\\": \\\"OrangeRed\\\",\\n      \\\"#DA70D6\\\": \\\"Orchid\\\",\\n      \\\"#EEE8AA\\\": \\\"PaleGoldenRod\\\",\\n      \\\"#98FB98\\\": \\\"PaleGreen\\\",\\n      \\\"#AFEEEE\\\": \\\"PaleTurquoise\\\",\\n      \\\"#DB7093\\\": \\\"PaleVioletRed\\\",\\n      \\\"#FFEFD5\\\": \\\"PapayaWhip\\\",\\n      \\\"#FFDAB9\\\": \\\"PeachPuff\\\",\\n      \\\"#CD853F\\\": \\\"Peru\\\",\\n      \\\"#FFC0CB\\\": \\\"Pink\\\",\\n      \\\"#DDA0DD\\\": \\\"Plum\\\",\\n      \\\"#B0E0E6\\\": \\\"PowderBlue\\\",\\n      \\\"#800080\\\": \\\"Purple\\\",\\n      \\\"#663399\\\": \\\"RebeccaPurple\\\",\\n      \\\"#FF0000\\\": \\\"Red\\\",\\n      \\\"#BC8F8F\\\": \\\"RosyBrown\\\",\\n      \\\"#4169E1\\\": \\\"RoyalBlue\\\",\\n      \\\"#8B4513\\\": \\\"SaddleBrown\\\",\\n      \\\"#FA8072\\\": \\\"Salmon\\\",\\n      \\\"#F4A460\\\": \\\"SandyBrown\\\",\\n      \\\"#2E8B57\\\": \\\"SeaGreen\\\",\\n      \\\"#FFF5EE\\\": \\\"SeaShell\\\",\\n      \\\"#A0522D\\\": \\\"Sienna\\\",\\n      \\\"#C0C0C0\\\": \\\"Silver\\\",\\n      \\\"#87CEEB\\\": \\\"SkyBlue\\\",\\n      \\\"#6A5ACD\\\": \\\"SlateBlue\\\",\\n      \\\"#708090\\\": \\\"SlateGrey\\\",\\n      \\\"#FFFAFA\\\": \\\"Snow\\\",\\n      \\\"#00FF7F\\\": \\\"SpringGreen\\\",\\n      \\\"#4682B4\\\": \\\"SteelBlue\\\",\\n      \\\"#D2B48C\\\": \\\"Tan\\\",\\n      \\\"#008080\\\": \\\"Teal\\\",\\n      \\\"#D8BFD8\\\": \\\"Thistle\\\",\\n      \\\"#FF6347\\\": \\\"Tomato\\\",\\n      \\\"#40E0D0\\\": \\\"Turquoise\\\",\\n      \\\"#EE82EE\\\": \\\"Violet\\\",\\n      \\\"#F5DEB3\\\": \\\"Wheat\\\",\\n      \\\"#FFFFFF\\\": \\\"White\\\",\\n      \\\"#F5F5F5\\\": \\\"WhiteSmoke\\\",\\n      \\\"#FFFF00\\\": \\\"Yellow\\\",\\n      \\\"#9ACD32\\\": \\\"YellowGreen\\\"\\n    };\\n    </script>\\n\\n</body>\\n</html>\",\"fileTypeName\":\"Web Page\",\"fileType\":\"application/html\",\"key\":25,\"location\":\"5310 280\"},\n{\"label\":\"Color Picker App\",\"color\":\"lightsalmon\",\"size\":\"390 140\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"Web Page\",\"fileType\":\"application/html\",\"fileURL\":\"/fileServer/01/64.html\",\"key\":18,\"location\":\"5100 460\"},\n{\"label\":\"Development Nodes for a Color App\",\"category\":\"TextLabels_Size4\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"750 170\",\"key\":22,\"location\":\"5090 90\"}\n],\n  \"linkDataArray\": []}"
}