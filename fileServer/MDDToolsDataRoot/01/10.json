{
  "dslNameList": [
    "DefaultDSL",
    "HierarchyDSL",
    "ThinkingDSL",
    "TextLabelsDSL",
    "CodeFlowDSL",
    "ConnectorsDSL",
    "PicturesDSL",
    "TreeDSL",
    "KanbanDSL",
    "AIFlowDSL"
  ],
  "view": {
    "scale": 1.0493308329063844,
    "position": [
      3858.522661597626,
      -1109.3763984550665
    ],
    "isGridOn": true
  },
  "model": "{ \"class\": \"GraphLinksModel\",\n  \"copiesArrays\": true,\n  \"copiesArrayObjects\": true,\n  \"copiesKey\": false,\n  \"linkKeyProperty\": \"key\",\n  \"linkFromPortIdProperty\": \"fromPort\",\n  \"linkToPortIdProperty\": \"toPort\",\n  \"nodeDataArray\": [\n{\"label\":\"AI Flow DSL Robot\\nWebsocket Client\",\"size\":\"150 100\",\"category\":\"Hierarchy_FolderContent\",\"fileType\":\"text/json\",\"isDir\":true,\"fileURL\":\"/fileServer/01/28.json\",\"key\":22,\"location\":\"5710 300\"},\n{\"label\":\"Client Sniplets\",\"category\":\"TextLabels_Size5\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"840 140\",\"key\":25,\"location\":\"6380 -585\"},\n{\"label\":\"Graph Info\",\"category\":\"Hierarchy_GraphInfo\",\"size\":\"180 80\",\"rows\":[{\"name\":\"Name\",\"value\":\"tbd\"},{\"name\":\"Version\",\"value\":\"1.0\"},{\"name\":\"Date\",\"value\":\"@getDate()\"},{\"name\":\"Path\",\"value\":\"./\"},{\"name\":\"Authors\",\"value\":\"Frankonello\"}],\"key\":3,\"location\":\"6130 -610\"},\n{\"label\":\"Model\",\"size\":\"180 60\",\"category\":\"Hierarchy_Model\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphModel$\",\"key\":5,\"location\":\"5880 -610\"},\n{\"label\":\"Selection\",\"size\":\"180 60\",\"category\":\"Hierarchy_Selection\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphSelection$\",\"key\":7,\"location\":\"5880 -540\"},\n{\"label\":\"WinBox Example\",\"size\":\"150 100\",\"category\":\"Hierarchy_FolderContent\",\"fileType\":\"text/json\",\"isDir\":true,\"fileURL\":\"/fileServer/01/29.json\",\"key\":8,\"location\":\"6010 300\"},\n{\"label\":\"Vanilla Clock\",\"size\":\"150 100\",\"category\":\"Hierarchy_FolderContent\",\"fileType\":\"text/json\",\"isDir\":true,\"fileURL\":\"/fileServer/01/30.json\",\"key\":9,\"location\":\"6310 300\"},\n{\"label\":\"Range Date Picker\",\"size\":\"150 100\",\"category\":\"Hierarchy_FolderContent\",\"fileType\":\"text/json\",\"isDir\":true,\"fileURL\":\"/fileServer/01/32.json\",\"key\":11,\"location\":\"6610 300\"},\n{\"label\":\"GoJS Graph\",\"color\":\"lightsalmon\",\"size\":\"240 143\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<!DOCTYPE html>\\n<html>\\n  <script type=\\\"text/javascript\\\" src=\\\"/library/gojs/2.1/go.js\\\"></script>\\n  <script>\\n    var myDiagram = null;\\n     \\n    function init() {\\n      var $ = go.GraphObject.make;  // for conciseness in defining templates\\n      \\n      myDiagram =\\n      $(go.Diagram, \\\"myDiagramDiv\\\",  // create a Diagram for the DIV HTML element\\n        {\\n          \\\"undoManager.isEnabled\\\": true\\n        });\\n        \\n      // define a simple Node template (but use the default Link template)\\n      myDiagram.nodeTemplate =\\n        $(go.Node, \\\"Auto\\\",\\n          //{ contextMenu: myContextMenu },\\n          $(go.Shape, \\\"RoundedRectangle\\\",\\n            // Shape.fill is bound to Node.data.color\\n            new go.Binding(\\\"fill\\\", \\\"color\\\")),\\n          $(go.TextBlock,\\n            { margin: 3 },  // some room around the text\\n            // TextBlock.text is bound to Node.data.key\\n            new go.Binding(\\\"text\\\", \\\"key\\\"))\\n        );\\n  \\n      // create the model data that will be represented by Nodes and Links\\n      myDiagram.model = new go.GraphLinksModel(\\n        [\\n          { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n          { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n          { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n          { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n        ],\\n        [\\n          { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n          { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n          { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n        ]\\n      );\\n    }\\n    \\n    // A custom command, for changing the color of the selected node(s).\\n    function changeColor(diagram, color) {\\n      // Always make changes in a transaction, except when initializing the diagram.\\n      diagram.startTransaction(\\\"change color\\\");\\n      diagram.selection.each(function(node) {\\n        if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n          // Examine and modify the data, not the Node directly.\\n          var data = node.data;\\n          // Call setDataProperty to support undo/redo as well as\\n          // automatically evaluating any relevant bindings.\\n          diagram.model.setDataProperty(data, \\\"color\\\", color);\\n        }\\n      });\\n      diagram.commitTransaction(\\\"change color\\\");\\n    }\\n    window.addEventListener('DOMContentLoaded', init);\\n  </script>\\n  <body style=\\\"background-color: lightgray;\\\">\\n    <div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n  </body>\\n</html>\",\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":10,\"location\":\"5940 60\",\"editorPosition\":[1310,1146,400,350]},\n{\"label\":\"This Example 1.1 shows\\nan HTML menu integrated\\nin a GoJS graph\",\"category\":\"TextLabels_Size3\",\"size\":\"526 154\",\"key\":12,\"location\":\"7490 710\"},\n{\"label\":\"This Example 1.0 shows\\na standard GoJS menu\",\"category\":\"TextLabels_Size3\",\"size\":\"507 128\",\"key\":13,\"location\":\"7490 380\"},\n{\"label\":\"GoJS HTML Menu is a simple\\nexample of a web page\\nshowing a GoJS graph using \\nan HTML Menu\",\"category\":\"TextLabels_Size3\",\"size\":\"673 209\",\"key\":14,\"location\":\"7490 80\"},\n{\"label\":\"GoJS Graph is a simple\\nexample of a web page\\nshowing a GoJS graph\",\"category\":\"TextLabels_Size3\",\"size\":\"514 152\",\"key\":15,\"location\":\"6210 70\"},\n{\"label\":\"HTML Popup Menu 1.2\",\"color\":\"lightsalmon\",\"size\":\"238 127\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"fileURL\":\"/fileServer/00/72.html\",\"key\":16,\"location\":\"7210 980\",\"editorPosition\":[1769,667,400,350]},\n{\"label\":\"HTML Popup Menu 1.2\",\"color\":\"lightsalmon\",\"size\":\"240 134\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"Web Page\",\"fileType\":\"application/html\",\"fileURL\":\"/fileServer/00/72.html\",\"key\":17,\"location\":\"6960 980\",\"editorPosition\":[816,266,655,998],\"linkToKey\":16},\n{\"label\":\"HTML Popup Menu 1.1\",\"color\":\"lightsalmon\",\"size\":\"240 153\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<!DOCTYPE html>\\n<html>\\n  <script type=\\\"text/javascript\\\" src=\\\"/library/gojs/2.1/go.js\\\"></script>\\n  <style type=\\\"text/css\\\">\\n    /* CSS for the traditional context menu */\\n    .menu {\\n      display: none;\\n      position: absolute;\\n      opacity: 0;\\n      margin: 0;\\n      padding: 8px 0;\\n      z-index: 999;\\n      box-shadow: 0 5px 5px -3px rgba(0, 0, 0, .2), 0 8px 10px 1px rgba(0, 0, 0, .14), 0 3px 14px 2px rgba(0, 0, 0, .12);\\n      list-style: none;\\n      background-color: #ffffff;\\n      border-radius: 4px;\\n    }\\n\\n    .menu-item {\\n      display: block;\\n      position: relative;\\n      min-width: 60px;\\n      margin: 0;\\n      padding: 6px 16px;\\n      font: bold 12px sans-serif;\\n      color: rgba(0, 0, 0, .87);\\n      cursor: pointer;\\n    }\\n\\n    .menu-item::before {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      opacity: 0;\\n      pointer-events: none;\\n      content: \\\"\\\";\\n      width: 100%;\\n      height: 100%;\\n      background-color: #000000;\\n    }\\n\\n    .menu-item:hover::before {\\n      opacity: .04;\\n    }\\n\\n    .menu .menu {\\n      top: -8px;\\n      left: 100%;\\n    }\\n\\n    .show-menu, .menu-item:hover > .menu {\\n      display: block;\\n      opacity: 1;\\n    }\\n  </style>\\n  <script>\\n    var $ = go.GraphObject.make;  // for conciseness in defining templates\\n    let myDiagram = null;\\n  \\n    console.log('00000000000000000000000000000000000000000000000000000000000000000000000');\\n    //window.parent.debug();\\n    \\n    class ContextMenu {\\n      constructor( diagram ) {\\n        this.menuList = {};\\n        this.diagram = diagram;\\n        \\n        this.hideCX = ()=> {\\n          if ( this.diagram.currentTool instanceof go.ContextMenuTool) {\\n            this.diagram.currentTool.doCancel();\\n          }\\n        }\\n      }\\n      add( name, data, parentId ) {\\n        // Start creation from root\\n        const parent = document.getElementById( parentId );\\n        // Collect menu info\\n        const menuData = {\\n          parent,\\n          name,\\n          data,\\n          contextMenu: null,\\n        };\\n        \\n        // Create context menu\\n        const menuElement = this._createDOMMenu( menuData );\\n        menuData.menuElement = menuElement;\\n        \\n        // Store the new menu\\n        this.menuList[name] = menuData;\\n        \\n        // We don't want the div acting as a context menu to have a (browser) context menu!\\n        menuElement.addEventListener( \\\"contextmenu\\\", function(e) {\\n          e.preventDefault();\\n          return false;\\n        }, false);\\n      }\\n      get( name ) {\\n        return( this.menuList[name] );\\n      }\\n      getShowCallback( name ) {\\n        const menuData = this.get( name );\\n        // This is the actual HTML context menu:\\n        const cxElement = menuData.menuElement;\\n        \\n        const showCM = ( obj, diagram, tool )=> {\\n          const hasMenuItem = this._show( name, obj );\\n          \\n          // Now show the whole context menu element\\n          if( hasMenuItem ) {\\n            cxElement.classList.add( \\\"show-menu\\\" );\\n            // we don't bother overriding positionContextMenu, we just do it here:\\n            const mousePt = diagram.lastInput.viewPoint;\\n            cxElement.style.left = mousePt.x + 5 + \\\"px\\\";\\n            cxElement.style.top = mousePt.y + \\\"px\\\";\\n          }\\n    \\n          // Optional: Use a `window` click listener with event capture to\\n          //           remove the context menu if the user clicks elsewhere on the page\\n          window.addEventListener( \\\"click\\\", this.hideCX, true );\\n        };\\n        return( showCM );\\n      }\\n      getHideCallback( name ) {\\n        const menuData = this.get( name );\\n        // This is the actual HTML context menu:\\n        const cxElement = menuData.menuElement;\\n        \\n        const hideCM = ()=> {\\n          cxElement.classList.remove( \\\"show-menu\\\" );\\n          // Optional: Use a `window` click listener with event capture to\\n          //           remove the context menu if the user clicks elsewhere on the page\\n          window.removeEventListener( \\\"click\\\", this.hideCX, true );\\n        };\\n        return( hideCM );\\n      }\\n      _show( name, obj ) {\\n        const menuData = this.get( name );\\n        let hasMenuItem = false;\\n        \\n        const d = {\\n          diagram: this.diagram,\\n          tool: this.diagram.currentTool,\\n          cmd: this.diagram.commandHandler,\\n          cmt: this.diagram.toolManager.contextMenuTool,\\n        }\\n        \\n        const showMenu = ( menuData )=> {\\n          for( const item of menuData.data ) {\\n            const o = {\\n              item,\\n              obj,\\n              d,\\n            };\\n            if( item.if( o ) ) {\\n              item.element.style.display = \\\"block\\\";\\n              hasMenuItem = true;\\n              if( item.sub ) {\\n                const subMenuData = {\\n                  data: item.sub,\\n                };\\n                showMenu( subMenuData );\\n              }\\n            } else {\\n              item.element.style.display = \\\"none\\\";\\n            }\\n          }\\n        }\\n        showMenu( menuData );\\n        return( hasMenuItem );\\n      }\\n      _createDOMMenu( menuData ) {\\n        const d = {\\n          diagram: this.diagram,\\n          tool: this.diagram.currentTool,\\n          cmd: this.diagram.commandHandler,\\n          cmt: this.diagram.toolManager.contextMenuTool,\\n        }\\n        const createMenu = ( menuData )=> {\\n          // Create ul element \\n          const ul = document.createElement( 'ul' );\\n          ul.id = menuData.name;\\n          ul.className = 'menu';\\n          menuData.parent.appendChild( ul );\\n          \\n          // Create li elements\\n          for( const item of menuData.data ) {\\n            // We create the element first\\n            const li = document.createElement( 'li' );\\n            li.id = item.label;\\n            li.className = 'menu-item';\\n            li.innerHTML = item.label;\\n            item.element = li;\\n            \\n            let clickParam = {\\n              item,\\n              d,\\n            };\\n            li.onclick = ( event )=> { clickParam.event = event; if( item.do ) item.do( clickParam ) };\\n            ul.appendChild( li );\\n            \\n            if( item.sub ) {\\n              const subMenuData = {\\n                parent: li,\\n                name: '',\\n                data: item.sub,\\n                d,\\n              };\\n              createMenu( subMenuData );\\n            }\\n          }\\n          return( ul );\\n        }\\n        \\n        const ul = createMenu( menuData );\\n        return( ul );\\n      }\\n    }\\n  \\n    // if: ( o )=> {} where o has properties\\n    //  o.item    = selected menu data item\\n    //  o.obj     = selected node in graph\\n    //  o.d.diagram = diagram\\n    //  o.d.tool    = diagram.currentTool,\\n    //  o.d.cmd     = diagram.commandHandler;\\n    //  o.d.cmt     = diagram.toolManager.contextMenuTool\\n    // do: ( o )=> {} where e has properties\\n    //  o.item    = selected menu data item\\n    //  o.event   = DOM event\\n    //  o.d.diagram = diagram\\n    //  o.d.tool    = diagram.currentTool,\\n    //  o.d.cmd     = diagram.commandHandler;\\n    //  o.d.cmt     = diagram.toolManager.contextMenuTool\\n    const diagramMenu = [\\n      { label: 'cut',         if: ( o )=> o.d.cmd.canCutSelection(),\\n                              do: ( o )=> o.d.cmd.cutSelection() },\\n      { label: 'copy',        if: ( o )=> o.d.cmd.canCopySelection(),\\n                              do: ( o )=> o.d.cmd.copySelection() },\\n      { label: 'paste',       if: ( o )=> o.d.cmd.canPasteSelection( o.d.cmt.mouseDownPoint ),\\n                              do: ( o )=> o.d.cmd.pasteSelection( o.d.cmt.mouseDownPoint ) },\\n      { label: 'delete',      if: ( o )=> o.d.cmd.canDeleteSelection(),\\n                              do: ( o )=> o.d.cmd.deleteSelection() },\\n      { label: 'color',       if: ( o )=> o.obj !== null, \\n                              sub:[\\n          { label: 'red',     if: ( o )=> { o.item.element.style['backgroundColor'] = '#f38181';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'green',   if: ( o )=> { o.item.element.style['backgroundColor'] = '#eaffd0';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'blue',    if: ( o )=> { o.item.element.style['backgroundColor'] = '#95e1d3';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'yellow',  if: ( o )=> { o.item.element.style['backgroundColor'] = '#fce38a';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n        ]},\\n    ];\\n     \\n    function init() {\\n      myDiagram =\\n      $(go.Diagram, \\\"myDiagramDiv\\\",  // create a Diagram for the DIV HTML element\\n        {\\n          \\\"undoManager.isEnabled\\\": true\\n        });\\n      \\n      // Create context menu\\n      const cm = new ContextMenu( myDiagram );\\n      cm.add( 'diagramMenu', diagramMenu, 'contextMenuContainer' );\\n      \\n      // an HTMLInfo object is needed to invoke the code to set up the HTML cxElement\\n      const contextMenu = $(go.HTMLInfo, {\\n        show: cm.getShowCallback( 'diagramMenu' ),\\n        hide: cm.getHideCallback( 'diagramMenu' ),\\n      });\\n      myDiagram.contextMenu = contextMenu;\\n        \\n      // define a simple Node template (but use the default Link template)\\n      myDiagram.nodeTemplate =\\n        $(go.Node, \\\"Auto\\\",\\n          { contextMenu: contextMenu },\\n          $(go.Shape, \\\"RoundedRectangle\\\",\\n            // Shape.fill is bound to Node.data.color\\n            new go.Binding(\\\"fill\\\", \\\"color\\\")),\\n          $(go.TextBlock,\\n            { margin: 3 },  // some room around the text\\n            // TextBlock.text is bound to Node.data.key\\n            new go.Binding(\\\"text\\\", \\\"key\\\"))\\n        );\\n  \\n      // create the model data that will be represented by Nodes and Links\\n      myDiagram.model = new go.GraphLinksModel(\\n        [\\n          { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n          { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n          { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n          { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n        ],\\n        [\\n          { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n          { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n          { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n        ]\\n      );\\n    }\\n    \\n    // A custom command, for changing the color of the selected node(s).\\n    function changeColor(diagram, color) {\\n      // Always make changes in a transaction, except when initializing the diagram.\\n      diagram.startTransaction(\\\"change color\\\");\\n      diagram.selection.each(function(node) {\\n        if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n          // Examine and modify the data, not the Node directly.\\n          var data = node.data;\\n          // Call setDataProperty to support undo/redo as well as\\n          // automatically evaluating any relevant bindings.\\n          diagram.model.setDataProperty(data, \\\"color\\\", color);\\n        }\\n      });\\n      diagram.commitTransaction(\\\"change color\\\");\\n    }\\n    window.addEventListener('DOMContentLoaded', init);\\n  </script>\\n  <body style=\\\"background-color: lightgray;\\\">\\n    <div id=\\\"contextMenuContainer\\\" style=\\\"position: relative; zIndex: 10000;\\\"></div>\\n    <div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n  </body>\\n</html>\\n\\n\",\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":18,\"location\":\"7210 690\",\"editorPosition\":[554,413,858,1447]},\n{\"label\":\"HTML Popup Menu 1.0\",\"color\":\"lightsalmon\",\"size\":\"240 139\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<!DOCTYPE html>\\n<html>\\n  <script type=\\\"text/javascript\\\" src=\\\"/library/gojs/2.1/go.js\\\"></script>\\n  <style type=\\\"text/css\\\">\\n    /* CSS for the traditional context menu */\\n    .menu {\\n      display: none;\\n      position: absolute;\\n      opacity: 0;\\n      margin: 0;\\n      padding: 8px 0;\\n      z-index: 999;\\n      box-shadow: 0 5px 5px -3px rgba(0, 0, 0, .2), 0 8px 10px 1px rgba(0, 0, 0, .14), 0 3px 14px 2px rgba(0, 0, 0, .12);\\n      list-style: none;\\n      background-color: #ffffff;\\n      border-radius: 4px;\\n    }\\n\\n    .menu-item {\\n      display: block;\\n      position: relative;\\n      min-width: 60px;\\n      margin: 0;\\n      padding: 6px 16px;\\n      font: bold 12px sans-serif;\\n      color: rgba(0, 0, 0, .87);\\n      cursor: pointer;\\n    }\\n\\n    .menu-item::before {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      opacity: 0;\\n      pointer-events: none;\\n      content: \\\"\\\";\\n      width: 100%;\\n      height: 100%;\\n      background-color: #000000;\\n    }\\n\\n    .menu-item:hover::before {\\n      opacity: .04;\\n    }\\n\\n    .menu .menu {\\n      top: -8px;\\n      left: 100%;\\n    }\\n\\n    .show-menu, .menu-item:hover > .menu {\\n      display: block;\\n      opacity: 1;\\n    }\\n  </style>\\n  <script>\\n    var $ = go.GraphObject.make;  // for conciseness in defining templates\\n    let myDiagram = null;\\n  \\n    console.log('00000000000000000000000000000000000000000000000000000000000000000000000');\\n    //window.parent.debug();\\n    \\n    class ContextMenu {\\n      constructor( diagram ) {\\n        this.menuList = {};\\n        this.diagram = diagram;\\n      }\\n      add( containerId, name, data ) {\\n        // Start creation from root\\n        const parent = document.getElementById( containerId );\\n        // Collect menu info\\n        const menuData = {\\n          parent,\\n          name,\\n          data,\\n          contextMenu: null,\\n        };\\n        \\n        // Create context menu\\n        const menuElement = this._createDOMMenu( menuData );\\n        menuData.menuElement = menuElement;\\n        \\n        // Store the new menu\\n        this.menuList[name] = menuData;\\n      }\\n      get( name ) {\\n        return( this.menuList[name] );\\n      }\\n      show( obj, name ) {\\n        const menuData = this.get( name );\\n        let hasMenuItem = false;\\n        \\n        const d = {\\n          diagram: this.diagram,\\n          tool: this.diagram.currentTool,\\n          cmd: this.diagram.commandHandler,\\n          cmt: this.diagram.toolManager.contextMenuTool,\\n        }\\n        \\n        const showMenu = ( menuData )=> {\\n          for( const item of menuData.data ) {\\n            const o = {\\n              item,\\n              obj,\\n              d,\\n            };\\n            if( item.if( o ) ) {\\n              item.element.style.display = \\\"block\\\";\\n              hasMenuItem = true;\\n              if( item.sub ) {\\n                const subMenuData = {\\n                  data: item.sub,\\n                };\\n                showMenu( subMenuData );\\n              }\\n            } else {\\n              item.element.style.display = \\\"none\\\";\\n            }\\n          }\\n        }\\n        showMenu( menuData );\\n        return( hasMenuItem );\\n      }\\n      hide( name ) {\\n      }\\n      _createDOMMenu( menuData ) {\\n        const d = {\\n          diagram: this.diagram,\\n          tool: this.diagram.currentTool,\\n          cmd: this.diagram.commandHandler,\\n          cmt: this.diagram.toolManager.contextMenuTool,\\n        }\\n        const createMenu = ( menuData )=> {\\n          // Create ul element \\n          const ul = document.createElement( 'ul' );\\n          ul.id = menuData.name;\\n          ul.className = 'menu';\\n          menuData.parent.appendChild( ul );\\n          \\n          // Create li elements\\n          for( const item of menuData.data ) {\\n            // We create the element first\\n            const li = document.createElement( 'li' );\\n            li.id = item.label;\\n            li.className = 'menu-item';\\n            li.innerHTML = item.label;\\n            item.element = li;\\n            \\n            let clickParam = {\\n              item,\\n              d,\\n            };\\n            li.onclick = ( event )=> { clickParam.event = event; if( item.do ) item.do( clickParam ) };\\n            ul.appendChild( li );\\n            \\n            if( item.sub ) {\\n              const subMenuData = {\\n                parent: li,\\n                name: '',\\n                data: item.sub,\\n                d,\\n              };\\n              createMenu( subMenuData );\\n            }\\n          }\\n          return( ul );\\n        }\\n        \\n        const ul = createMenu( menuData );\\n        return( ul );\\n      }\\n    }\\n  \\n    // if: ( o )=> {} where o has properties\\n    //  o.item    = selected menu data item\\n    //  o.obj     = selected node in graph\\n    //  o.d.diagram = diagram\\n    //  o.d.tool    = diagram.currentTool,\\n    //  o.d.cmd     = diagram.commandHandler;\\n    //  o.d.cmt     = diagram.toolManager.contextMenuTool\\n    // do: ( o )=> {} where e has properties\\n    //  o.item    = selected menu data item\\n    //  o.event   = DOM event\\n    //  o.d.diagram = diagram\\n    //  o.d.tool    = diagram.currentTool,\\n    //  o.d.cmd     = diagram.commandHandler;\\n    //  o.d.cmt     = diagram.toolManager.contextMenuTool\\n    const diagramMenu = [\\n      { label: 'cut',         if: ( o )=> o.d.cmd.canCutSelection(),\\n                              do: ( o )=> o.d.cmd.cutSelection() },\\n      { label: 'copy',        if: ( o )=> o.d.cmd.canCopySelection(),\\n                              do: ( o )=> o.d.cmd.copySelection() },\\n      { label: 'paste',       if: ( o )=> o.d.cmd.canPasteSelection( o.d.cmt.mouseDownPoint ),\\n                              do: ( o )=> o.d.cmd.pasteSelection( o.d.cmt.mouseDownPoint ) },\\n      { label: 'delete',      if: ( o )=> o.d.cmd.canDeleteSelection(),\\n                              do: ( o )=> o.d.cmd.deleteSelection() },\\n      { label: 'color',       if: ( o )=> o.obj !== null, \\n                              sub:[\\n          { label: 'red',     if: ( o )=> { o.item.element.style['backgroundColor'] = '#f38181';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'green',   if: ( o )=> { o.item.element.style['backgroundColor'] = '#eaffd0';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'blue',    if: ( o )=> { o.item.element.style['backgroundColor'] = '#95e1d3';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'yellow',  if: ( o )=> { o.item.element.style['backgroundColor'] = '#fce38a';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n        ]},\\n    ];\\n     \\n    function init() {\\n      myDiagram =\\n      $(go.Diagram, \\\"myDiagramDiv\\\",  // create a Diagram for the DIV HTML element\\n        {\\n          \\\"undoManager.isEnabled\\\": true\\n        });\\n      \\n      // Create context menu\\n      const cm = new ContextMenu( myDiagram );\\n      cm.add( 'contextMenuContainer', 'diagramMenu', diagramMenu );\\n      \\n      const menuData = cm.get( 'diagramMenu' );\\n      // This is the actual HTML context menu:\\n      const cxElement = menuData.menuElement;\\n      \\n      // We don't want the div acting as a context menu to have a (browser) context menu!\\n      cxElement.addEventListener( \\\"contextmenu\\\", function(e) {\\n        e.preventDefault();\\n        return false;\\n      }, false);\\n      \\n      function hideCX() {\\n        if (myDiagram.currentTool instanceof go.ContextMenuTool) {\\n          myDiagram.currentTool.doCancel();\\n        }\\n      }\\n      const showCM = ( obj, diagram, tool )=> {\\n        // Show only the relevant buttons given the current state.\\n        const cmd = diagram.commandHandler;\\n      \\n        const name = 'diagramMenu';\\n        const hasMenuItem = cm.show( obj, name );\\n        \\n        // Now show the whole context menu element\\n        if( hasMenuItem ) {\\n          cxElement.classList.add( \\\"show-menu\\\" );\\n          // we don't bother overriding positionContextMenu, we just do it here:\\n          const mousePt = diagram.lastInput.viewPoint;\\n          cxElement.style.left = mousePt.x + 5 + \\\"px\\\";\\n          cxElement.style.top = mousePt.y + \\\"px\\\";\\n        }\\n  \\n        // Optional: Use a `window` click listener with event capture to\\n        //           remove the context menu if the user clicks elsewhere on the page\\n        window.addEventListener( \\\"click\\\", hideCX, true );\\n      };\\n      const hideCM = ()=> {\\n        cxElement.classList.remove( \\\"show-menu\\\" );\\n        // Optional: Use a `window` click listener with event capture to\\n        //           remove the context menu if the user clicks elsewhere on the page\\n        window.removeEventListener( \\\"click\\\", hideCX, true );\\n      };\\n      \\n      // an HTMLInfo object is needed to invoke the code to set up the HTML cxElement\\n      const contextMenu = $(go.HTMLInfo, {\\n        show: showCM,\\n        hide: hideCM,\\n      });\\n      myDiagram.contextMenu = contextMenu;\\n        \\n      // define a simple Node template (but use the default Link template)\\n      myDiagram.nodeTemplate =\\n        $(go.Node, \\\"Auto\\\",\\n          { contextMenu: contextMenu },\\n          $(go.Shape, \\\"RoundedRectangle\\\",\\n            // Shape.fill is bound to Node.data.color\\n            new go.Binding(\\\"fill\\\", \\\"color\\\")),\\n          $(go.TextBlock,\\n            { margin: 3 },  // some room around the text\\n            // TextBlock.text is bound to Node.data.key\\n            new go.Binding(\\\"text\\\", \\\"key\\\"))\\n        );\\n  \\n      // create the model data that will be represented by Nodes and Links\\n      myDiagram.model = new go.GraphLinksModel(\\n        [\\n          { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n          { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n          { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n          { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n        ],\\n        [\\n          { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n          { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n          { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n        ]\\n      );\\n    }\\n    \\n    // A custom command, for changing the color of the selected node(s).\\n    function changeColor(diagram, color) {\\n      // Always make changes in a transaction, except when initializing the diagram.\\n      diagram.startTransaction(\\\"change color\\\");\\n      diagram.selection.each(function(node) {\\n        if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n          // Examine and modify the data, not the Node directly.\\n          var data = node.data;\\n          // Call setDataProperty to support undo/redo as well as\\n          // automatically evaluating any relevant bindings.\\n          diagram.model.setDataProperty(data, \\\"color\\\", color);\\n        }\\n      });\\n      diagram.commitTransaction(\\\"change color\\\");\\n    }\\n    window.addEventListener('DOMContentLoaded', init);\\n  </script>\\n  <body style=\\\"background-color: lightgray;\\\">\\n    <div id=\\\"contextMenuContainer\\\" style=\\\"position: relative;\\\"></div>\\n    <div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n  </body>\\n</html>\\n\\n\",\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":19,\"location\":\"7210 370\",\"editorPosition\":[588,512,947,1458]},\n{\"label\":\"GoJS HTML Menu Example\",\"color\":\"lightsalmon\",\"size\":\"240 140\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n<meta charset=\\\"utf-8\\\"/>\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover\\\"/>\\n<meta name=\\\"description\\\" content=\\\"Context menus implemented in HTML rather than as GoJS objects.\\\"/> \\n<script type=\\\"text/javascript\\\" src=\\\"/library/gojs/2.1/go.js\\\"></script>\\n<!-- Copyright 1998-2021 by Northwoods Software Corporation. -->\\n<title>HTML Context Menu</title>\\n</head>\\n\\n<body style=\\\"background-color: white;\\\">\\n  <style type=\\\"text/css\\\">\\n    /* CSS for the traditional context menu */\\n    .menu {\\n      display: none;\\n      position: absolute;\\n      opacity: 0;\\n      margin: 0;\\n      padding: 8px 0;\\n      z-index: 999;\\n      box-shadow: 0 5px 5px -3px rgba(0, 0, 0, .2), 0 8px 10px 1px rgba(0, 0, 0, .14), 0 3px 14px 2px rgba(0, 0, 0, .12);\\n      list-style: none;\\n      background-color: #ffffff;\\n      border-radius: 4px;\\n    }\\n\\n    .menu-item {\\n      display: block;\\n      position: relative;\\n      min-width: 60px;\\n      margin: 0;\\n      padding: 6px 16px;\\n      font: bold 12px sans-serif;\\n      color: rgba(0, 0, 0, .87);\\n      cursor: pointer;\\n    }\\n\\n    .menu-item::before {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      opacity: 0;\\n      pointer-events: none;\\n      content: \\\"\\\";\\n      width: 100%;\\n      height: 100%;\\n      background-color: #000000;\\n    }\\n\\n    .menu-item:hover::before {\\n      opacity: .04;\\n    }\\n\\n    .menu .menu {\\n      top: -8px;\\n      left: 100%;\\n    }\\n\\n    .show-menu, .menu-item:hover > .menu {\\n      display: block;\\n      opacity: 1;\\n    }\\n  </style>\\n  <script id=\\\"code\\\">\\n\\n  var myDiagram = null;\\n\\n  function init() {\\n    if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this\\n    var $ = go.GraphObject.make;  // for conciseness in defining templates\\n\\n    myDiagram =\\n      $(go.Diagram, \\\"myDiagramDiv\\\",  // create a Diagram for the DIV HTML element\\n        {\\n          \\\"undoManager.isEnabled\\\": true\\n        });\\n\\n    // This is the actual HTML context menu:\\n    var cxElement = document.getElementById(\\\"contextMenu\\\");\\n\\n    // an HTMLInfo object is needed to invoke the code to set up the HTML cxElement\\n    var myContextMenu = $(go.HTMLInfo, {\\n      show: showContextMenu,\\n      hide: hideContextMenu\\n    });\\n\\n    // define a simple Node template (but use the default Link template)\\n    myDiagram.nodeTemplate =\\n      $(go.Node, \\\"Auto\\\",\\n        { contextMenu: myContextMenu },\\n        $(go.Shape, \\\"RoundedRectangle\\\",\\n          // Shape.fill is bound to Node.data.color\\n          new go.Binding(\\\"fill\\\", \\\"color\\\")),\\n        $(go.TextBlock,\\n          { margin: 3 },  // some room around the text\\n          // TextBlock.text is bound to Node.data.key\\n          new go.Binding(\\\"text\\\", \\\"key\\\"))\\n      );\\n\\n    // create the model data that will be represented by Nodes and Links\\n    myDiagram.model = new go.GraphLinksModel(\\n      [\\n        { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n        { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n        { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n        { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n      ],\\n      [\\n        { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n        { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n        { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n        { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n        { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n      ]);\\n\\n    myDiagram.contextMenu = myContextMenu;\\n\\n    // We don't want the div acting as a context menu to have a (browser) context menu!\\n    cxElement.addEventListener(\\\"contextmenu\\\", function(e) {\\n      e.preventDefault();\\n      return false;\\n    }, false);\\n\\n    function hideCX() {\\n      if (myDiagram.currentTool instanceof go.ContextMenuTool) {\\n        myDiagram.currentTool.doCancel();\\n      }\\n    }\\n\\n    function showContextMenu(obj, diagram, tool) {\\n      // Show only the relevant buttons given the current state.\\n      var cmd = diagram.commandHandler;\\n      var hasMenuItem = false;\\n      function maybeShowItem(elt, pred) {\\n        if (pred) {\\n          elt.style.display = \\\"block\\\";\\n          hasMenuItem = true;\\n        } else {\\n          elt.style.display = \\\"none\\\";\\n        }\\n      }\\n      maybeShowItem(document.getElementById(\\\"cut\\\"), cmd.canCutSelection());\\n      maybeShowItem(document.getElementById(\\\"copy\\\"), cmd.canCopySelection());\\n      maybeShowItem(document.getElementById(\\\"paste\\\"), cmd.canPasteSelection(diagram.toolManager.contextMenuTool.mouseDownPoint));\\n      maybeShowItem(document.getElementById(\\\"delete\\\"), cmd.canDeleteSelection());\\n      maybeShowItem(document.getElementById(\\\"color\\\"), obj !== null);\\n\\n      // Now show the whole context menu element\\n      if (hasMenuItem) {\\n        cxElement.classList.add(\\\"show-menu\\\");\\n        // we don't bother overriding positionContextMenu, we just do it here:\\n        var mousePt = diagram.lastInput.viewPoint;\\n        cxElement.style.left = mousePt.x + 5 + \\\"px\\\";\\n        cxElement.style.top = mousePt.y + \\\"px\\\";\\n      }\\n\\n      // Optional: Use a `window` click listener with event capture to\\n      //           remove the context menu if the user clicks elsewhere on the page\\n      window.addEventListener(\\\"click\\\", hideCX, true);\\n    }\\n\\n    function hideContextMenu() {\\n      cxElement.classList.remove(\\\"show-menu\\\");\\n      // Optional: Use a `window` click listener with event capture to\\n      //           remove the context menu if the user clicks elsewhere on the page\\n      window.removeEventListener(\\\"click\\\", hideCX, true);\\n    }\\n  }\\n\\n  // This is the general menu command handler, parameterized by the name of the command.\\n  function cxcommand(event, val) {\\n    if (val === undefined) val = event.currentTarget.id;\\n    var diagram = myDiagram;\\n    switch (val) {\\n      case \\\"cut\\\": diagram.commandHandler.cutSelection(); break;\\n      case \\\"copy\\\": diagram.commandHandler.copySelection(); break;\\n      case \\\"paste\\\": diagram.commandHandler.pasteSelection(diagram.toolManager.contextMenuTool.mouseDownPoint); break;\\n      case \\\"delete\\\": diagram.commandHandler.deleteSelection(); break;\\n      case \\\"color\\\": {\\n        var color = window.getComputedStyle(event.target)['background-color'];\\n        changeColor(diagram, color); break;\\n      }\\n    }\\n    diagram.currentTool.stopTool();\\n  }\\n\\n  // A custom command, for changing the color of the selected node(s).\\n  function changeColor(diagram, color) {\\n    // Always make changes in a transaction, except when initializing the diagram.\\n    diagram.startTransaction(\\\"change color\\\");\\n    diagram.selection.each(function(node) {\\n      if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n        // Examine and modify the data, not the Node directly.\\n        var data = node.data;\\n        // Call setDataProperty to support undo/redo as well as\\n        // automatically evaluating any relevant bindings.\\n        diagram.model.setDataProperty(data, \\\"color\\\", color);\\n      }\\n    });\\n    diagram.commitTransaction(\\\"change color\\\");\\n  }\\n  window.addEventListener('DOMContentLoaded', init);\\n</script>\\n\\n<div id=\\\"sample\\\">\\n  <div style=\\\"display: inline-block;\\\">\\n    <!-- We make a div to contain both the Diagram div and the context menu (such that they are siblings)\\n         so that absolute positioning works easily.\\n         This DIV containing both MUST have a non-static CSS position (we use position: relative)\\n         so that our context menu's absolute coordinates work correctly. -->\\n    <div style=\\\"position: relative;\\\"  >\\n      <div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n      <ul id=\\\"contextMenu\\\" class=\\\"menu\\\">\\n        <li id=\\\"cut\\\" class=\\\"menu-item\\\" onclick=\\\"cxcommand(event)\\\">Cut</li>\\n        <li id=\\\"copy\\\" class=\\\"menu-item\\\" onclick=\\\"cxcommand(event)\\\">Copy</li>\\n        <li id=\\\"paste\\\" class=\\\"menu-item\\\" onclick=\\\"cxcommand(event)\\\">Paste</li>\\n        <li id=\\\"delete\\\" class=\\\"menu-item\\\" onclick=\\\"cxcommand(event)\\\">Delete</li>\\n        <li id=\\\"color\\\" class=\\\"menu-item\\\">Color\\n          <ul class=\\\"menu\\\">\\n            <li class=\\\"menu-item\\\" style=\\\"background-color: #f38181;\\\" onclick=\\\"cxcommand(event, 'color')\\\">Red</li>\\n            <li class=\\\"menu-item\\\" style=\\\"background-color: #eaffd0;\\\" onclick=\\\"cxcommand(event, 'color')\\\">Green</li>\\n            <li class=\\\"menu-item\\\" style=\\\"background-color: #95e1d3;\\\" onclick=\\\"cxcommand(event, 'color')\\\">Blue</li>\\n            <li class=\\\"menu-item\\\" style=\\\"background-color: #fce38a;\\\" onclick=\\\"cxcommand(event, 'color')\\\">Yellow</li>\\n          </ul>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div id=\\\"description\\\">\\n      <p>This demonstrates the implementation of a custom HTML context menu.</p>\\n      <p>For a light-box style HTML context menu implementation, see the <a href=\\\"htmlLightBoxContextMenu.html\\\">LightBox Context Menu</a> sample.</p>\\n      <p>Right-click or tap-hold on a Node to bring up a context menu.\\n      If you have a selection copied in the clipboard, you can bring up a context menu anywhere to paste.</p>\\n    </div>\\n  </div>\\n</div>\\n</body>\\n</html>\\n\",\"fileTypeName\":\"HTML\",\"fileType\":\"text/html\",\"key\":20,\"location\":\"7200 60\",\"editorPosition\":[1476,26,916,1939]},\n{\"label\":\"GoJS Graph\\n(Link)\",\"color\":\"lightsalmon\",\"size\":\"240 143\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<!DOCTYPE html>\\n<html>\\n  <script type=\\\"text/javascript\\\" src=\\\"/library/gojs/2.1/go.js\\\"></script>\\n  <script>\\n    var myDiagram = null;\\n     \\n    function init() {\\n      var $ = go.GraphObject.make;  // for conciseness in defining templates\\n      \\n      myDiagram =\\n      $(go.Diagram, \\\"myDiagramDiv\\\",  // create a Diagram for the DIV HTML element\\n        {\\n          \\\"undoManager.isEnabled\\\": true\\n        });\\n        \\n      // define a simple Node template (but use the default Link template)\\n      myDiagram.nodeTemplate =\\n        $(go.Node, \\\"Auto\\\",\\n          //{ contextMenu: myContextMenu },\\n          $(go.Shape, \\\"RoundedRectangle\\\",\\n            // Shape.fill is bound to Node.data.color\\n            new go.Binding(\\\"fill\\\", \\\"color\\\")),\\n          $(go.TextBlock,\\n            { margin: 3 },  // some room around the text\\n            // TextBlock.text is bound to Node.data.key\\n            new go.Binding(\\\"text\\\", \\\"key\\\"))\\n        );\\n  \\n      // create the model data that will be represented by Nodes and Links\\n      myDiagram.model = new go.GraphLinksModel(\\n        [\\n          { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n          { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n          { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n          { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n        ],\\n        [\\n          { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n          { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n          { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n        ]\\n      );\\n    }\\n    \\n    // A custom command, for changing the color of the selected node(s).\\n    function changeColor(diagram, color) {\\n      // Always make changes in a transaction, except when initializing the diagram.\\n      diagram.startTransaction(\\\"change color\\\");\\n      diagram.selection.each(function(node) {\\n        if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n          // Examine and modify the data, not the Node directly.\\n          var data = node.data;\\n          // Call setDataProperty to support undo/redo as well as\\n          // automatically evaluating any relevant bindings.\\n          diagram.model.setDataProperty(data, \\\"color\\\", color);\\n        }\\n      });\\n      diagram.commitTransaction(\\\"change color\\\");\\n    }\\n    window.addEventListener('DOMContentLoaded', init);\\n  </script>\\n  <body style=\\\"background-color: lightgray;\\\">\\n    <div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n  </body>\\n</html>\",\"fileTypeName\":\"Web Page\",\"fileType\":\"application/html\",\"key\":21,\"location\":\"5690 60\",\"editorPosition\":[1310,1146,400,350],\"linkToKey\":10},\n{\"label\":\"HTML Popup Menu 1.0\\n(Link)\",\"color\":\"lightsalmon\",\"size\":\"240 139\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<!DOCTYPE html>\\n<html>\\n  <script type=\\\"text/javascript\\\" src=\\\"/library/gojs/2.1/go.js\\\"></script>\\n  <style type=\\\"text/css\\\">\\n    /* CSS for the traditional context menu */\\n    .menu {\\n      display: none;\\n      position: absolute;\\n      opacity: 0;\\n      margin: 0;\\n      padding: 8px 0;\\n      z-index: 999;\\n      box-shadow: 0 5px 5px -3px rgba(0, 0, 0, .2), 0 8px 10px 1px rgba(0, 0, 0, .14), 0 3px 14px 2px rgba(0, 0, 0, .12);\\n      list-style: none;\\n      background-color: #ffffff;\\n      border-radius: 4px;\\n    }\\n\\n    .menu-item {\\n      display: block;\\n      position: relative;\\n      min-width: 60px;\\n      margin: 0;\\n      padding: 6px 16px;\\n      font: bold 12px sans-serif;\\n      color: rgba(0, 0, 0, .87);\\n      cursor: pointer;\\n    }\\n\\n    .menu-item::before {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      opacity: 0;\\n      pointer-events: none;\\n      content: \\\"\\\";\\n      width: 100%;\\n      height: 100%;\\n      background-color: #000000;\\n    }\\n\\n    .menu-item:hover::before {\\n      opacity: .04;\\n    }\\n\\n    .menu .menu {\\n      top: -8px;\\n      left: 100%;\\n    }\\n\\n    .show-menu, .menu-item:hover > .menu {\\n      display: block;\\n      opacity: 1;\\n    }\\n  </style>\\n  <script>\\n    var $ = go.GraphObject.make;  // for conciseness in defining templates\\n    let myDiagram = null;\\n  \\n    console.log('00000000000000000000000000000000000000000000000000000000000000000000000');\\n    //window.parent.debug();\\n    \\n    class ContextMenu {\\n      constructor( diagram ) {\\n        this.menuList = {};\\n        this.diagram = diagram;\\n      }\\n      add( containerId, name, data ) {\\n        // Start creation from root\\n        const parent = document.getElementById( containerId );\\n        // Collect menu info\\n        const menuData = {\\n          parent,\\n          name,\\n          data,\\n          contextMenu: null,\\n        };\\n        \\n        // Create context menu\\n        const menuElement = this._createDOMMenu( menuData );\\n        menuData.menuElement = menuElement;\\n        \\n        // Store the new menu\\n        this.menuList[name] = menuData;\\n      }\\n      get( name ) {\\n        return( this.menuList[name] );\\n      }\\n      show( obj, name ) {\\n        const menuData = this.get( name );\\n        let hasMenuItem = false;\\n        \\n        const d = {\\n          diagram: this.diagram,\\n          tool: this.diagram.currentTool,\\n          cmd: this.diagram.commandHandler,\\n          cmt: this.diagram.toolManager.contextMenuTool,\\n        }\\n        \\n        const showMenu = ( menuData )=> {\\n          for( const item of menuData.data ) {\\n            const o = {\\n              item,\\n              obj,\\n              d,\\n            };\\n            if( item.if( o ) ) {\\n              item.element.style.display = \\\"block\\\";\\n              hasMenuItem = true;\\n              if( item.sub ) {\\n                const subMenuData = {\\n                  data: item.sub,\\n                };\\n                showMenu( subMenuData );\\n              }\\n            } else {\\n              item.element.style.display = \\\"none\\\";\\n            }\\n          }\\n        }\\n        showMenu( menuData );\\n        return( hasMenuItem );\\n      }\\n      hide( name ) {\\n      }\\n      _createDOMMenu( menuData ) {\\n        const d = {\\n          diagram: this.diagram,\\n          tool: this.diagram.currentTool,\\n          cmd: this.diagram.commandHandler,\\n          cmt: this.diagram.toolManager.contextMenuTool,\\n        }\\n        const createMenu = ( menuData )=> {\\n          // Create ul element \\n          const ul = document.createElement( 'ul' );\\n          ul.id = menuData.name;\\n          ul.className = 'menu';\\n          menuData.parent.appendChild( ul );\\n          \\n          // Create li elements\\n          for( const item of menuData.data ) {\\n            // We create the element first\\n            const li = document.createElement( 'li' );\\n            li.id = item.label;\\n            li.className = 'menu-item';\\n            li.innerHTML = item.label;\\n            item.element = li;\\n            \\n            let clickParam = {\\n              item,\\n              d,\\n            };\\n            li.onclick = ( event )=> { clickParam.event = event; if( item.do ) item.do( clickParam ) };\\n            ul.appendChild( li );\\n            \\n            if( item.sub ) {\\n              const subMenuData = {\\n                parent: li,\\n                name: '',\\n                data: item.sub,\\n                d,\\n              };\\n              createMenu( subMenuData );\\n            }\\n          }\\n          return( ul );\\n        }\\n        \\n        const ul = createMenu( menuData );\\n        return( ul );\\n      }\\n    }\\n  \\n    // if: ( o )=> {} where o has properties\\n    //  o.item    = selected menu data item\\n    //  o.obj     = selected node in graph\\n    //  o.d.diagram = diagram\\n    //  o.d.tool    = diagram.currentTool,\\n    //  o.d.cmd     = diagram.commandHandler;\\n    //  o.d.cmt     = diagram.toolManager.contextMenuTool\\n    // do: ( o )=> {} where e has properties\\n    //  o.item    = selected menu data item\\n    //  o.event   = DOM event\\n    //  o.d.diagram = diagram\\n    //  o.d.tool    = diagram.currentTool,\\n    //  o.d.cmd     = diagram.commandHandler;\\n    //  o.d.cmt     = diagram.toolManager.contextMenuTool\\n    const diagramMenu = [\\n      { label: 'cut',         if: ( o )=> o.d.cmd.canCutSelection(),\\n                              do: ( o )=> o.d.cmd.cutSelection() },\\n      { label: 'copy',        if: ( o )=> o.d.cmd.canCopySelection(),\\n                              do: ( o )=> o.d.cmd.copySelection() },\\n      { label: 'paste',       if: ( o )=> o.d.cmd.canPasteSelection( o.d.cmt.mouseDownPoint ),\\n                              do: ( o )=> o.d.cmd.pasteSelection( o.d.cmt.mouseDownPoint ) },\\n      { label: 'delete',      if: ( o )=> o.d.cmd.canDeleteSelection(),\\n                              do: ( o )=> o.d.cmd.deleteSelection() },\\n      { label: 'color',       if: ( o )=> o.obj !== null, \\n                              sub:[\\n          { label: 'red',     if: ( o )=> { o.item.element.style['backgroundColor'] = '#f38181';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'green',   if: ( o )=> { o.item.element.style['backgroundColor'] = '#eaffd0';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'blue',    if: ( o )=> { o.item.element.style['backgroundColor'] = '#95e1d3';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'yellow',  if: ( o )=> { o.item.element.style['backgroundColor'] = '#fce38a';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n        ]},\\n    ];\\n     \\n    function init() {\\n      myDiagram =\\n      $(go.Diagram, \\\"myDiagramDiv\\\",  // create a Diagram for the DIV HTML element\\n        {\\n          \\\"undoManager.isEnabled\\\": true\\n        });\\n      \\n      // Create context menu\\n      const cm = new ContextMenu( myDiagram );\\n      cm.add( 'contextMenuContainer', 'diagramMenu', diagramMenu );\\n      \\n      const menuData = cm.get( 'diagramMenu' );\\n      // This is the actual HTML context menu:\\n      const cxElement = menuData.menuElement;\\n      \\n      // We don't want the div acting as a context menu to have a (browser) context menu!\\n      cxElement.addEventListener( \\\"contextmenu\\\", function(e) {\\n        e.preventDefault();\\n        return false;\\n      }, false);\\n      \\n      function hideCX() {\\n        if (myDiagram.currentTool instanceof go.ContextMenuTool) {\\n          myDiagram.currentTool.doCancel();\\n        }\\n      }\\n      const showCM = ( obj, diagram, tool )=> {\\n        // Show only the relevant buttons given the current state.\\n        const cmd = diagram.commandHandler;\\n      \\n        const name = 'diagramMenu';\\n        const hasMenuItem = cm.show( obj, name );\\n        \\n        // Now show the whole context menu element\\n        if( hasMenuItem ) {\\n          cxElement.classList.add( \\\"show-menu\\\" );\\n          // we don't bother overriding positionContextMenu, we just do it here:\\n          const mousePt = diagram.lastInput.viewPoint;\\n          cxElement.style.left = mousePt.x + 5 + \\\"px\\\";\\n          cxElement.style.top = mousePt.y + \\\"px\\\";\\n        }\\n  \\n        // Optional: Use a `window` click listener with event capture to\\n        //           remove the context menu if the user clicks elsewhere on the page\\n        window.addEventListener( \\\"click\\\", hideCX, true );\\n      };\\n      const hideCM = ()=> {\\n        cxElement.classList.remove( \\\"show-menu\\\" );\\n        // Optional: Use a `window` click listener with event capture to\\n        //           remove the context menu if the user clicks elsewhere on the page\\n        window.removeEventListener( \\\"click\\\", hideCX, true );\\n      };\\n      \\n      // an HTMLInfo object is needed to invoke the code to set up the HTML cxElement\\n      const contextMenu = $(go.HTMLInfo, {\\n        show: showCM,\\n        hide: hideCM,\\n      });\\n      myDiagram.contextMenu = contextMenu;\\n        \\n      // define a simple Node template (but use the default Link template)\\n      myDiagram.nodeTemplate =\\n        $(go.Node, \\\"Auto\\\",\\n          { contextMenu: contextMenu },\\n          $(go.Shape, \\\"RoundedRectangle\\\",\\n            // Shape.fill is bound to Node.data.color\\n            new go.Binding(\\\"fill\\\", \\\"color\\\")),\\n          $(go.TextBlock,\\n            { margin: 3 },  // some room around the text\\n            // TextBlock.text is bound to Node.data.key\\n            new go.Binding(\\\"text\\\", \\\"key\\\"))\\n        );\\n  \\n      // create the model data that will be represented by Nodes and Links\\n      myDiagram.model = new go.GraphLinksModel(\\n        [\\n          { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n          { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n          { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n          { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n        ],\\n        [\\n          { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n          { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n          { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n        ]\\n      );\\n    }\\n    \\n    // A custom command, for changing the color of the selected node(s).\\n    function changeColor(diagram, color) {\\n      // Always make changes in a transaction, except when initializing the diagram.\\n      diagram.startTransaction(\\\"change color\\\");\\n      diagram.selection.each(function(node) {\\n        if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n          // Examine and modify the data, not the Node directly.\\n          var data = node.data;\\n          // Call setDataProperty to support undo/redo as well as\\n          // automatically evaluating any relevant bindings.\\n          diagram.model.setDataProperty(data, \\\"color\\\", color);\\n        }\\n      });\\n      diagram.commitTransaction(\\\"change color\\\");\\n    }\\n    window.addEventListener('DOMContentLoaded', init);\\n  </script>\\n  <body style=\\\"background-color: lightgray;\\\">\\n    <div id=\\\"contextMenuContainer\\\" style=\\\"position: relative;\\\"></div>\\n    <div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n  </body>\\n</html>\\n\\n\",\"fileTypeName\":\"Web Page\",\"fileType\":\"application/html\",\"key\":23,\"location\":\"6960 370\",\"editorPosition\":[588,512,947,1458],\"linkToKey\":19},\n{\"label\":\"HTML Popup Menu 1.1\\n(Link)\",\"color\":\"lightsalmon\",\"size\":\"240 153\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<!DOCTYPE html>\\n<html>\\n  <script type=\\\"text/javascript\\\" src=\\\"/library/gojs/2.1/go.js\\\"></script>\\n  <style type=\\\"text/css\\\">\\n    /* CSS for the traditional context menu */\\n    .menu {\\n      display: none;\\n      position: absolute;\\n      opacity: 0;\\n      margin: 0;\\n      padding: 8px 0;\\n      z-index: 999;\\n      box-shadow: 0 5px 5px -3px rgba(0, 0, 0, .2), 0 8px 10px 1px rgba(0, 0, 0, .14), 0 3px 14px 2px rgba(0, 0, 0, .12);\\n      list-style: none;\\n      background-color: #ffffff;\\n      border-radius: 4px;\\n    }\\n\\n    .menu-item {\\n      display: block;\\n      position: relative;\\n      min-width: 60px;\\n      margin: 0;\\n      padding: 6px 16px;\\n      font: bold 12px sans-serif;\\n      color: rgba(0, 0, 0, .87);\\n      cursor: pointer;\\n    }\\n\\n    .menu-item::before {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      opacity: 0;\\n      pointer-events: none;\\n      content: \\\"\\\";\\n      width: 100%;\\n      height: 100%;\\n      background-color: #000000;\\n    }\\n\\n    .menu-item:hover::before {\\n      opacity: .04;\\n    }\\n\\n    .menu .menu {\\n      top: -8px;\\n      left: 100%;\\n    }\\n\\n    .show-menu, .menu-item:hover > .menu {\\n      display: block;\\n      opacity: 1;\\n    }\\n  </style>\\n  <script>\\n    var $ = go.GraphObject.make;  // for conciseness in defining templates\\n    let myDiagram = null;\\n  \\n    console.log('00000000000000000000000000000000000000000000000000000000000000000000000');\\n    //window.parent.debug();\\n    \\n    class ContextMenu {\\n      constructor( diagram ) {\\n        this.menuList = {};\\n        this.diagram = diagram;\\n        \\n        this.hideCX = ()=> {\\n          if ( this.diagram.currentTool instanceof go.ContextMenuTool) {\\n            this.diagram.currentTool.doCancel();\\n          }\\n        }\\n      }\\n      add( name, data, parentId ) {\\n        // Start creation from root\\n        const parent = document.getElementById( parentId );\\n        // Collect menu info\\n        const menuData = {\\n          parent,\\n          name,\\n          data,\\n          contextMenu: null,\\n        };\\n        \\n        // Create context menu\\n        const menuElement = this._createDOMMenu( menuData );\\n        menuData.menuElement = menuElement;\\n        \\n        // Store the new menu\\n        this.menuList[name] = menuData;\\n        \\n        // We don't want the div acting as a context menu to have a (browser) context menu!\\n        menuElement.addEventListener( \\\"contextmenu\\\", function(e) {\\n          e.preventDefault();\\n          return false;\\n        }, false);\\n      }\\n      get( name ) {\\n        return( this.menuList[name] );\\n      }\\n      getShowCallback( name ) {\\n        const menuData = this.get( name );\\n        // This is the actual HTML context menu:\\n        const cxElement = menuData.menuElement;\\n        \\n        const showCM = ( obj, diagram, tool )=> {\\n          const hasMenuItem = this._show( name, obj );\\n          \\n          // Now show the whole context menu element\\n          if( hasMenuItem ) {\\n            cxElement.classList.add( \\\"show-menu\\\" );\\n            // we don't bother overriding positionContextMenu, we just do it here:\\n            const mousePt = diagram.lastInput.viewPoint;\\n            cxElement.style.left = mousePt.x + 5 + \\\"px\\\";\\n            cxElement.style.top = mousePt.y + \\\"px\\\";\\n          }\\n    \\n          // Optional: Use a `window` click listener with event capture to\\n          //           remove the context menu if the user clicks elsewhere on the page\\n          window.addEventListener( \\\"click\\\", this.hideCX, true );\\n        };\\n        return( showCM );\\n      }\\n      getHideCallback( name ) {\\n        const menuData = this.get( name );\\n        // This is the actual HTML context menu:\\n        const cxElement = menuData.menuElement;\\n        \\n        const hideCM = ()=> {\\n          cxElement.classList.remove( \\\"show-menu\\\" );\\n          // Optional: Use a `window` click listener with event capture to\\n          //           remove the context menu if the user clicks elsewhere on the page\\n          window.removeEventListener( \\\"click\\\", this.hideCX, true );\\n        };\\n        return( hideCM );\\n      }\\n      _show( name, obj ) {\\n        const menuData = this.get( name );\\n        let hasMenuItem = false;\\n        \\n        const d = {\\n          diagram: this.diagram,\\n          tool: this.diagram.currentTool,\\n          cmd: this.diagram.commandHandler,\\n          cmt: this.diagram.toolManager.contextMenuTool,\\n        }\\n        \\n        const showMenu = ( menuData )=> {\\n          for( const item of menuData.data ) {\\n            const o = {\\n              item,\\n              obj,\\n              d,\\n            };\\n            if( item.if( o ) ) {\\n              item.element.style.display = \\\"block\\\";\\n              hasMenuItem = true;\\n              if( item.sub ) {\\n                const subMenuData = {\\n                  data: item.sub,\\n                };\\n                showMenu( subMenuData );\\n              }\\n            } else {\\n              item.element.style.display = \\\"none\\\";\\n            }\\n          }\\n        }\\n        showMenu( menuData );\\n        return( hasMenuItem );\\n      }\\n      _createDOMMenu( menuData ) {\\n        const d = {\\n          diagram: this.diagram,\\n          tool: this.diagram.currentTool,\\n          cmd: this.diagram.commandHandler,\\n          cmt: this.diagram.toolManager.contextMenuTool,\\n        }\\n        const createMenu = ( menuData )=> {\\n          // Create ul element \\n          const ul = document.createElement( 'ul' );\\n          ul.id = menuData.name;\\n          ul.className = 'menu';\\n          menuData.parent.appendChild( ul );\\n          \\n          // Create li elements\\n          for( const item of menuData.data ) {\\n            // We create the element first\\n            const li = document.createElement( 'li' );\\n            li.id = item.label;\\n            li.className = 'menu-item';\\n            li.innerHTML = item.label;\\n            item.element = li;\\n            \\n            let clickParam = {\\n              item,\\n              d,\\n            };\\n            li.onclick = ( event )=> { clickParam.event = event; if( item.do ) item.do( clickParam ) };\\n            ul.appendChild( li );\\n            \\n            if( item.sub ) {\\n              const subMenuData = {\\n                parent: li,\\n                name: '',\\n                data: item.sub,\\n                d,\\n              };\\n              createMenu( subMenuData );\\n            }\\n          }\\n          return( ul );\\n        }\\n        \\n        const ul = createMenu( menuData );\\n        return( ul );\\n      }\\n    }\\n  \\n    // if: ( o )=> {} where o has properties\\n    //  o.item    = selected menu data item\\n    //  o.obj     = selected node in graph\\n    //  o.d.diagram = diagram\\n    //  o.d.tool    = diagram.currentTool,\\n    //  o.d.cmd     = diagram.commandHandler;\\n    //  o.d.cmt     = diagram.toolManager.contextMenuTool\\n    // do: ( o )=> {} where e has properties\\n    //  o.item    = selected menu data item\\n    //  o.event   = DOM event\\n    //  o.d.diagram = diagram\\n    //  o.d.tool    = diagram.currentTool,\\n    //  o.d.cmd     = diagram.commandHandler;\\n    //  o.d.cmt     = diagram.toolManager.contextMenuTool\\n    const diagramMenu = [\\n      { label: 'cut',         if: ( o )=> o.d.cmd.canCutSelection(),\\n                              do: ( o )=> o.d.cmd.cutSelection() },\\n      { label: 'copy',        if: ( o )=> o.d.cmd.canCopySelection(),\\n                              do: ( o )=> o.d.cmd.copySelection() },\\n      { label: 'paste',       if: ( o )=> o.d.cmd.canPasteSelection( o.d.cmt.mouseDownPoint ),\\n                              do: ( o )=> o.d.cmd.pasteSelection( o.d.cmt.mouseDownPoint ) },\\n      { label: 'delete',      if: ( o )=> o.d.cmd.canDeleteSelection(),\\n                              do: ( o )=> o.d.cmd.deleteSelection() },\\n      { label: 'color',       if: ( o )=> o.obj !== null, \\n                              sub:[\\n          { label: 'red',     if: ( o )=> { o.item.element.style['backgroundColor'] = '#f38181';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'green',   if: ( o )=> { o.item.element.style['backgroundColor'] = '#eaffd0';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'blue',    if: ( o )=> { o.item.element.style['backgroundColor'] = '#95e1d3';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n          { label: 'yellow',  if: ( o )=> { o.item.element.style['backgroundColor'] = '#fce38a';\\n                                            return( true ); },\\n                              do: ( o )=> { const color = window.getComputedStyle( o.event.target )['backgroundColor'];\\n                                            changeColor( o.d.diagram, color ); } },\\n        ]},\\n    ];\\n     \\n    function init() {\\n      myDiagram =\\n      $(go.Diagram, \\\"myDiagramDiv\\\",  // create a Diagram for the DIV HTML element\\n        {\\n          \\\"undoManager.isEnabled\\\": true\\n        });\\n      \\n      // Create context menu\\n      const cm = new ContextMenu( myDiagram );\\n      cm.add( 'diagramMenu', diagramMenu, 'contextMenuContainer' );\\n      \\n      // an HTMLInfo object is needed to invoke the code to set up the HTML cxElement\\n      const contextMenu = $(go.HTMLInfo, {\\n        show: cm.getShowCallback( 'diagramMenu' ),\\n        hide: cm.getHideCallback( 'diagramMenu' ),\\n      });\\n      myDiagram.contextMenu = contextMenu;\\n        \\n      // define a simple Node template (but use the default Link template)\\n      myDiagram.nodeTemplate =\\n        $(go.Node, \\\"Auto\\\",\\n          { contextMenu: contextMenu },\\n          $(go.Shape, \\\"RoundedRectangle\\\",\\n            // Shape.fill is bound to Node.data.color\\n            new go.Binding(\\\"fill\\\", \\\"color\\\")),\\n          $(go.TextBlock,\\n            { margin: 3 },  // some room around the text\\n            // TextBlock.text is bound to Node.data.key\\n            new go.Binding(\\\"text\\\", \\\"key\\\"))\\n        );\\n  \\n      // create the model data that will be represented by Nodes and Links\\n      myDiagram.model = new go.GraphLinksModel(\\n        [\\n          { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n          { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n          { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n          { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n        ],\\n        [\\n          { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n          { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n          { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n          { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n        ]\\n      );\\n    }\\n    \\n    // A custom command, for changing the color of the selected node(s).\\n    function changeColor(diagram, color) {\\n      // Always make changes in a transaction, except when initializing the diagram.\\n      diagram.startTransaction(\\\"change color\\\");\\n      diagram.selection.each(function(node) {\\n        if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n          // Examine and modify the data, not the Node directly.\\n          var data = node.data;\\n          // Call setDataProperty to support undo/redo as well as\\n          // automatically evaluating any relevant bindings.\\n          diagram.model.setDataProperty(data, \\\"color\\\", color);\\n        }\\n      });\\n      diagram.commitTransaction(\\\"change color\\\");\\n    }\\n    window.addEventListener('DOMContentLoaded', init);\\n  </script>\\n  <body style=\\\"background-color: lightgray;\\\">\\n    <div id=\\\"contextMenuContainer\\\" style=\\\"position: relative; zIndex: 10000;\\\"></div>\\n    <div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n  </body>\\n</html>\\n\\n\",\"fileTypeName\":\"WebPage\",\"fileType\":\"application/html\",\"key\":24,\"location\":\"6960 690\",\"editorPosition\":[554,413,858,1447],\"linkToKey\":18},\n{\"label\":\"GoJS HTML Menu Example\\n(Link)\",\"color\":\"lightsalmon\",\"size\":\"240 140\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n<meta charset=\\\"utf-8\\\"/>\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover\\\"/>\\n<meta name=\\\"description\\\" content=\\\"Context menus implemented in HTML rather than as GoJS objects.\\\"/> \\n<script type=\\\"text/javascript\\\" src=\\\"/library/gojs/2.1/go.js\\\"></script>\\n<!-- Copyright 1998-2021 by Northwoods Software Corporation. -->\\n<title>HTML Context Menu</title>\\n</head>\\n\\n<body style=\\\"background-color: white;\\\">\\n  <style type=\\\"text/css\\\">\\n    /* CSS for the traditional context menu */\\n    .menu {\\n      display: none;\\n      position: absolute;\\n      opacity: 0;\\n      margin: 0;\\n      padding: 8px 0;\\n      z-index: 999;\\n      box-shadow: 0 5px 5px -3px rgba(0, 0, 0, .2), 0 8px 10px 1px rgba(0, 0, 0, .14), 0 3px 14px 2px rgba(0, 0, 0, .12);\\n      list-style: none;\\n      background-color: #ffffff;\\n      border-radius: 4px;\\n    }\\n\\n    .menu-item {\\n      display: block;\\n      position: relative;\\n      min-width: 60px;\\n      margin: 0;\\n      padding: 6px 16px;\\n      font: bold 12px sans-serif;\\n      color: rgba(0, 0, 0, .87);\\n      cursor: pointer;\\n    }\\n\\n    .menu-item::before {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      opacity: 0;\\n      pointer-events: none;\\n      content: \\\"\\\";\\n      width: 100%;\\n      height: 100%;\\n      background-color: #000000;\\n    }\\n\\n    .menu-item:hover::before {\\n      opacity: .04;\\n    }\\n\\n    .menu .menu {\\n      top: -8px;\\n      left: 100%;\\n    }\\n\\n    .show-menu, .menu-item:hover > .menu {\\n      display: block;\\n      opacity: 1;\\n    }\\n  </style>\\n  <script id=\\\"code\\\">\\n\\n  var myDiagram = null;\\n\\n  function init() {\\n    if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this\\n    var $ = go.GraphObject.make;  // for conciseness in defining templates\\n\\n    myDiagram =\\n      $(go.Diagram, \\\"myDiagramDiv\\\",  // create a Diagram for the DIV HTML element\\n        {\\n          \\\"undoManager.isEnabled\\\": true\\n        });\\n\\n    // This is the actual HTML context menu:\\n    var cxElement = document.getElementById(\\\"contextMenu\\\");\\n\\n    // an HTMLInfo object is needed to invoke the code to set up the HTML cxElement\\n    var myContextMenu = $(go.HTMLInfo, {\\n      show: showContextMenu,\\n      hide: hideContextMenu\\n    });\\n\\n    // define a simple Node template (but use the default Link template)\\n    myDiagram.nodeTemplate =\\n      $(go.Node, \\\"Auto\\\",\\n        { contextMenu: myContextMenu },\\n        $(go.Shape, \\\"RoundedRectangle\\\",\\n          // Shape.fill is bound to Node.data.color\\n          new go.Binding(\\\"fill\\\", \\\"color\\\")),\\n        $(go.TextBlock,\\n          { margin: 3 },  // some room around the text\\n          // TextBlock.text is bound to Node.data.key\\n          new go.Binding(\\\"text\\\", \\\"key\\\"))\\n      );\\n\\n    // create the model data that will be represented by Nodes and Links\\n    myDiagram.model = new go.GraphLinksModel(\\n      [\\n        { key: \\\"Alpha\\\", color: \\\"#f38181\\\" },\\n        { key: \\\"Beta\\\", color: \\\"#eaffd0\\\" },\\n        { key: \\\"Gamma\\\", color: \\\"#95e1d3\\\" },\\n        { key: \\\"Delta\\\", color: \\\"#fce38a\\\" }\\n      ],\\n      [\\n        { from: \\\"Alpha\\\", to: \\\"Beta\\\" },\\n        { from: \\\"Alpha\\\", to: \\\"Gamma\\\" },\\n        { from: \\\"Beta\\\", to: \\\"Beta\\\" },\\n        { from: \\\"Gamma\\\", to: \\\"Delta\\\" },\\n        { from: \\\"Delta\\\", to: \\\"Alpha\\\" }\\n      ]);\\n\\n    myDiagram.contextMenu = myContextMenu;\\n\\n    // We don't want the div acting as a context menu to have a (browser) context menu!\\n    cxElement.addEventListener(\\\"contextmenu\\\", function(e) {\\n      e.preventDefault();\\n      return false;\\n    }, false);\\n\\n    function hideCX() {\\n      if (myDiagram.currentTool instanceof go.ContextMenuTool) {\\n        myDiagram.currentTool.doCancel();\\n      }\\n    }\\n\\n    function showContextMenu(obj, diagram, tool) {\\n      // Show only the relevant buttons given the current state.\\n      var cmd = diagram.commandHandler;\\n      var hasMenuItem = false;\\n      function maybeShowItem(elt, pred) {\\n        if (pred) {\\n          elt.style.display = \\\"block\\\";\\n          hasMenuItem = true;\\n        } else {\\n          elt.style.display = \\\"none\\\";\\n        }\\n      }\\n      maybeShowItem(document.getElementById(\\\"cut\\\"), cmd.canCutSelection());\\n      maybeShowItem(document.getElementById(\\\"copy\\\"), cmd.canCopySelection());\\n      maybeShowItem(document.getElementById(\\\"paste\\\"), cmd.canPasteSelection(diagram.toolManager.contextMenuTool.mouseDownPoint));\\n      maybeShowItem(document.getElementById(\\\"delete\\\"), cmd.canDeleteSelection());\\n      maybeShowItem(document.getElementById(\\\"color\\\"), obj !== null);\\n\\n      // Now show the whole context menu element\\n      if (hasMenuItem) {\\n        cxElement.classList.add(\\\"show-menu\\\");\\n        // we don't bother overriding positionContextMenu, we just do it here:\\n        var mousePt = diagram.lastInput.viewPoint;\\n        cxElement.style.left = mousePt.x + 5 + \\\"px\\\";\\n        cxElement.style.top = mousePt.y + \\\"px\\\";\\n      }\\n\\n      // Optional: Use a `window` click listener with event capture to\\n      //           remove the context menu if the user clicks elsewhere on the page\\n      window.addEventListener(\\\"click\\\", hideCX, true);\\n    }\\n\\n    function hideContextMenu() {\\n      cxElement.classList.remove(\\\"show-menu\\\");\\n      // Optional: Use a `window` click listener with event capture to\\n      //           remove the context menu if the user clicks elsewhere on the page\\n      window.removeEventListener(\\\"click\\\", hideCX, true);\\n    }\\n  }\\n\\n  // This is the general menu command handler, parameterized by the name of the command.\\n  function cxcommand(event, val) {\\n    if (val === undefined) val = event.currentTarget.id;\\n    var diagram = myDiagram;\\n    switch (val) {\\n      case \\\"cut\\\": diagram.commandHandler.cutSelection(); break;\\n      case \\\"copy\\\": diagram.commandHandler.copySelection(); break;\\n      case \\\"paste\\\": diagram.commandHandler.pasteSelection(diagram.toolManager.contextMenuTool.mouseDownPoint); break;\\n      case \\\"delete\\\": diagram.commandHandler.deleteSelection(); break;\\n      case \\\"color\\\": {\\n        var color = window.getComputedStyle(event.target)['background-color'];\\n        changeColor(diagram, color); break;\\n      }\\n    }\\n    diagram.currentTool.stopTool();\\n  }\\n\\n  // A custom command, for changing the color of the selected node(s).\\n  function changeColor(diagram, color) {\\n    // Always make changes in a transaction, except when initializing the diagram.\\n    diagram.startTransaction(\\\"change color\\\");\\n    diagram.selection.each(function(node) {\\n      if (node instanceof go.Node) {  // ignore any selected Links and simple Parts\\n        // Examine and modify the data, not the Node directly.\\n        var data = node.data;\\n        // Call setDataProperty to support undo/redo as well as\\n        // automatically evaluating any relevant bindings.\\n        diagram.model.setDataProperty(data, \\\"color\\\", color);\\n      }\\n    });\\n    diagram.commitTransaction(\\\"change color\\\");\\n  }\\n  window.addEventListener('DOMContentLoaded', init);\\n</script>\\n\\n<div id=\\\"sample\\\">\\n  <div style=\\\"display: inline-block;\\\">\\n    <!-- We make a div to contain both the Diagram div and the context menu (such that they are siblings)\\n         so that absolute positioning works easily.\\n         This DIV containing both MUST have a non-static CSS position (we use position: relative)\\n         so that our context menu's absolute coordinates work correctly. -->\\n    <div style=\\\"position: relative;\\\"  >\\n      <div id=\\\"myDiagramDiv\\\" style=\\\"border: solid 1px black; width:400px; height:400px\\\"></div>\\n      <ul id=\\\"contextMenu\\\" class=\\\"menu\\\">\\n        <li id=\\\"cut\\\" class=\\\"menu-item\\\" onclick=\\\"cxcommand(event)\\\">Cut</li>\\n        <li id=\\\"copy\\\" class=\\\"menu-item\\\" onclick=\\\"cxcommand(event)\\\">Copy</li>\\n        <li id=\\\"paste\\\" class=\\\"menu-item\\\" onclick=\\\"cxcommand(event)\\\">Paste</li>\\n        <li id=\\\"delete\\\" class=\\\"menu-item\\\" onclick=\\\"cxcommand(event)\\\">Delete</li>\\n        <li id=\\\"color\\\" class=\\\"menu-item\\\">Color\\n          <ul class=\\\"menu\\\">\\n            <li class=\\\"menu-item\\\" style=\\\"background-color: #f38181;\\\" onclick=\\\"cxcommand(event, 'color')\\\">Red</li>\\n            <li class=\\\"menu-item\\\" style=\\\"background-color: #eaffd0;\\\" onclick=\\\"cxcommand(event, 'color')\\\">Green</li>\\n            <li class=\\\"menu-item\\\" style=\\\"background-color: #95e1d3;\\\" onclick=\\\"cxcommand(event, 'color')\\\">Blue</li>\\n            <li class=\\\"menu-item\\\" style=\\\"background-color: #fce38a;\\\" onclick=\\\"cxcommand(event, 'color')\\\">Yellow</li>\\n          </ul>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div id=\\\"description\\\">\\n      <p>This demonstrates the implementation of a custom HTML context menu.</p>\\n      <p>For a light-box style HTML context menu implementation, see the <a href=\\\"htmlLightBoxContextMenu.html\\\">LightBox Context Menu</a> sample.</p>\\n      <p>Right-click or tap-hold on a Node to bring up a context menu.\\n      If you have a selection copied in the clipboard, you can bring up a context menu anywhere to paste.</p>\\n    </div>\\n  </div>\\n</div>\\n</body>\\n</html>\\n\",\"fileTypeName\":\"Web Page\",\"fileType\":\"application/html\",\"key\":26,\"location\":\"6950 60\",\"editorPosition\":[1476,26,916,1939],\"linkToKey\":20},\n{\"label\":\"This Example 1.2 shows\\nsome changes (I don't remember which)\",\"category\":\"TextLabels_Size3\",\"size\":\"526 154\",\"key\":28,\"location\":\"7490 980\"},\n{\"label\":\"Coloris Color Picker\",\"size\":\"150 100\",\"category\":\"Hierarchy_FolderContent\",\"fileType\":\"text/json\",\"isDir\":true,\"fileURL\":\"/fileServer/01/63.json\",\"key\":27,\"location\":\"5710 510\"}\n],\n  \"linkDataArray\": []}"
}