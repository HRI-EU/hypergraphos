{
  "dslNameList": [
    "HierarchyDSL",
    "TextLabelsDSL",
    "CodeFlowDSL",
    "DSLConfigDSL"
  ],
  "view": {
    "scale": 0.3931552859695762,
    "position": [
      -5623.6557423898075,
      -1839.1444004360103
    ],
    "isGridOn": true
  },
  "model": "{ \"class\": \"GraphLinksModel\",\n  \"copiesArrays\": true,\n  \"copiesArrayObjects\": true,\n  \"copiesKey\": false,\n  \"linkKeyProperty\": \"key\",\n  \"linkFromPortIdProperty\": \"fromPort\",\n  \"linkToPortIdProperty\": \"toPort\",\n  \"nodeDataArray\": [\n{\"label\":\"CodeFlowDSL\",\"category\":\"TextLabels_Size5\",\"size\":\"840 30\",\"key\":0,\"location\":\"-3490 -900\"},\n{\"category\":\"DSL_CGButton\",\"size\":\"550 80\",\"buttons\":[{\"name\":\"Generate\",\"checked\":true}],\"isFile\":true,\"fileContent\":\"var event, obj, nodeData;\\n//console.log( 'NodeData Info: '+JSON.stringify( nodeData ) );\\n//console.log( 'Button Label: '+obj.data.name );\\n//console.log( 'Button Status: '+obj.data.checked );\\n\\n// Get main graph editor\\nconst g = m.e.getEditor( config.htmlDiv.graphDiv );\\n// Get current graph model\\nconst model = g.getJSONModel();\\nconst modelId = 'main';\\n\\n// Instantiate Model Explorer\\nconst me = new ModelExplorer();\\nme.setJSONModel( modelId, model );\\n\\n// Cache of all data generated or stored in the model\\nconst dataCache = {\\n  //'Header.body': ['Line1', 'Line2', ...],\\n  //'Style.url': ['http://styleServer.come/style.css'],\\n  // Missing entry => generate and add to cache\\n  // Then return the entry content\\n};\\n\\n/************************\\n * Utility functions\\n ************************/\\n// Filter nodes in disabled features as condition for \\\"me\\\" functions\\nfunction filterOutDisabledNodes (d) {\\n  return( !d.isGroup && ( !d.group || activeFeature.has( d.group ) ) ); \\n}\\nfunction isNumber( v ) {\\n  return( parseInt(v).toString() === v.toString() );\\n}\\nfunction getArrayOf( v ) {\\n   if( v instanceof String ) {\\n    return( v.split( '\\\\n' ) );\\n  } else if( Array.isArray( v ) ) {\\n    return( v );\\n  } else {\\n    return( [v] );\\n  }\\n}\\nfunction getId( nodeData, property ) {\\n  return( nodeData.key + ( ( property != null ) && ( property != undefined )? '.'+ property: '' ) );\\n}\\nfunction parseInputPortName( portName ) {\\n  let value = '';\\n  let [name, reference] = portName.split( '@' );\\n  if( name.endsWith( '\\\\\\\\' ) ) {\\n    // Case of refValue containing a \\\\@ to avoid interpretation as reference\\n    // Example: emailServer: \\\\@gmail.com\\n    // Example: email: antonello\\\\@gmail.com\\n    // Remove the '\\\\'\\n    name = name.substing( name.length-1 );\\n    value = getArrayOf( name+'@'+reference );\\n    reference = '';\\n    name = '';\\n  }\\n  if( reference == undefined ) {\\n    reference = '';\\n  }\\n  return({ name, reference, value });\\n}\\n/************************\\n * DataCache functions\\n ************************/\\nfunction getCacheValue( id ) {\\n  let value = [''];\\n  const dValue = dataCache[id];\\n  if( dValue ) {\\n    // Case of ref being defined in the dataCache\\n    value = dValue;\\n  } else {\\n    // Case of ref being not defined in the dataCache\\n    // Split the reference into key.property\\n    const [key, property] = id.split( '.' );\\n    if( ( key != null ) && ( key != undefined ) &&\\n        ( property != null ) && ( property != undefined ) ) {\\n      const funcName = key;\\n      if( libraryNameList.has( funcName ) ) {\\n        // Case of a javascript function \\n        eval( `value = getArrayOf( ${property} )` );\\n      } else {\\n        // Case of recursion\\n        value = getValueOfNode( key, property );\\n        setCacheValue( id, value );\\n      }\\n    } else if( ( key != null ) && ( key != undefined ) ) {\\n      value = getValueOfNode( key );\\n    } else {\\n      value = [`Error: could not resolve \\\"${id}\\\"`];\\n    }\\n  }\\n  return( value );\\n}\\nfunction setCacheValue( id, value ) {\\n  if( !dataCache.hasOwnProperty( id ) ) {\\n    dataCache[id] = value;\\n  }\\n}\\n/************************\\n * Generation functions\\n ************************/\\nfunction getFanInNodeValueList( nodeData, portName ) {\\n  let valueList = [];\\n  // Get node from fan in\\n  const linkList = me.getLinkListFanInByNodeKey( 'main', nodeData.key, portName );\\n  if( !linkList || linkList.length == 0 ) {\\n    const value = getValueOfRef( portName, {} ); // Provide {} as empty link\\n    // this is necessary to get an empty value in case the input is not connected\\n    // or connected to a disable node\\n    valueList.push( value );\\n  } else {\\n    for( const linkData of linkList ) {\\n      //const refValue = linkData.toPort;\\n      const refValue = linkData.fromPort;\\n      const value = getValueOfRef( refValue, linkData );\\n      if( value && value.length > 0 ) {\\n        valueList.push( value );\\n      }\\n    }\\n  }\\n  return( valueList );\\n}\\nfunction getGenerationValueFrom( nodeData, portName ) {\\n  let value = [];\\n  \\n  const valueList = getFanInNodeValueList( nodeData, portName );\\n  if( valueList && valueList.length == 1 ) {\\n    value = valueList[0];\\n  } else {\\n    if( !valueList || valueList.length == 0 ) {\\n      // Reference name is not found in the graph\\n      value = [];\\n    } else {\\n      // Reference name is used multiple time in the graph\\n      value = [`Error: Multiple source enalbled for \\\"${nodeData.label}.${portName}\\\"`];\\n    }\\n  }\\n  return( value );\\n}\\nfunction generateNode( nodeData, property ) {\\n  let value = [''];\\n  let id = '';\\n  \\n  switch( nodeData.category ) {\\n    case 'Hierarchy_CodeInGraph':\\n    case 'Hierarchy_CodeInFile':\\n      value = getGenerationValueFrom( nodeData, '' );\\n      nodeData.fileContent = value.join( '\\\\n' );\\n      // NOTE: then next function is async, but we don't handle \\n      // the callback for now\\n      saveNodeContent( nodeData );\\n      id = getId( nodeData );\\n      setCacheValue( id, value );\\n      break;\\n    case 'CodeFlow_Code':\\n      // Data model for node code generation\\n      let m = {};\\n      if( nodeData.in ) {\\n        for( const input of nodeData.in ) {\\n          const inValue = getGenerationValueFrom( nodeData, input.portId );\\n          const refInfo = parseInputPortName( input.portId );\\n          let funcName = 'Begin_'+refInfo.name.replaceAll( ' ', '_' );\\n          //m[funcName] = ()=> [inValue];\\n          // We put undefined in case the input is not connected\\n          m[funcName] = ()=> ( inValue.length == 0? undefined: inValue );\\n          funcName = 'Define_'+refInfo.name.replaceAll( ' ', '_' );\\n          //m[funcName] = ()=> [inValue];\\n          m[funcName] = ()=> ( inValue.length == 0? undefined: inValue );\\n          funcName = 'Insert_'+refInfo.name.replaceAll( ' ', '_' );\\n          m[funcName] = ()=> ( inValue.length == 0? undefined: inValue );\\n        }\\n      }\\n      if( nodeData.rows && ( nodeData.rows.length > 0 ) ) {\\n        let objData = {};\\n        for( const row of nodeData.rows ) {\\n          let pValue = getValueOfRef( row.value );\\n          if( Array.isArray( pValue ) && ( pValue.length > 0 ) ) {\\n            pValue = pValue[0];\\n          } else {\\n            pValue = '';\\n          }\\n          objData[row.name] = pValue;\\n        }\\n        funcName = 'Begin_Property';\\n        m[funcName] = ()=> objData;\\n        funcName = 'Define_Property';\\n        m[funcName] = ()=> objData;\\n      }\\n      // Get node template\\n      const templateSource = nodeData.fileContent;\\n      const templateLen = templateSource.length;\\n      // Get the output to be generated\\n      const outputName = property;\\n      // Create the template generator\\n      const tg = new TemplateGenerator( templateSource );\\n      const beginTag = `[# Begin ${outputName} #]`;\\n      const endTag = `[# End ${outputName} #]`;\\n      // Get output template and trim to first line indentation (true)\\n      const block = tg.extractNextLineBlock( true, beginTag, endTag );\\n      //const blockSrc = block.getTemplate();\\n      // Set template language\\n      const [format, language] = nodeData.fileType.split( '/' );\\n      block.setLanguage( language );\\n      block.setProperty( 'isKeepBlockOnNoData', true );\\n      // Execute code generation\\n      block.process( m );\\n      // Get output\\n      value = block.getOutput();\\n      //debug();\\n      break;\\n    case 'CodeFlow_Operator':\\n      let inOutValue = {};\\n      if( nodeData.in ) {\\n        for( const input of nodeData.in ) {\\n          const inValue = getGenerationValueFrom( nodeData, input.portId );\\n          const refInfo = parseInputPortName( input.portId );\\n          inOutValue[refInfo.name] = inValue.join( '\\\\n' );\\n        }\\n      }\\n      if( nodeData.rows ) {\\n        for( const row of nodeData.rows ) {\\n          const pValue = getValueOfRef( row.value );\\n          inOutValue[row.name] = pValue;\\n        }\\n      }\\n      if( nodeData.fileContent ) {\\n        const getPort = (name)=>{ return( inOutValue[name] ); };\\n        const setPort = (name, value)=>{ inOutValue[name] = value; };\\n        eval( nodeData.fileContent );\\n        if( nodeData.out ) {\\n          for( const output of nodeData.out ) {\\n            let oValue = inOutValue[output.portId];\\n            if( oValue ) {\\n              oValue = oValue.split( '\\\\n' );\\n            }\\n            if( property == output.portId ) {\\n              value = oValue;\\n            }\\n          }\\n        }\\n      }\\n      break;\\n    case 'CodeFlow_Merge':\\n      value = [];\\n      const sep = nodeData.label;\\n      if( nodeData.in ) {\\n        for( const input of nodeData.in ) {\\n          const inValue = getGenerationValueFrom( nodeData, input.portId );\\n          const i = inValue.length-1;\\n          if( i >= 0 ) {\\n            inValue[i] = inValue[i] + sep;\\n          }\\n          value = value.concat( inValue );\\n        }\\n      }\\n      break;\\n    case 'CodeFlow_Param':\\n    case 'Hierarchy_GraphInfo':\\n      if( nodeData.rows ) {\\n        for( const row of nodeData.rows ) {\\n          const pValue = getValueOfRef( row.value );\\n          if( row.name == property ) {\\n            value = pValue;\\n          }\\n        }\\n      }\\n      break;\\n    case 'DSL_Data':\\n      value = this[`${nodeData.category}_get`]( nodeData );\\n      // Add inputs\\n      if( nodeData.in ) {\\n        for( const input of nodeData.in ) {\\n          const inKey = input.portId;\\n          const inValue = getGenerationValueFrom( nodeData, inKey );\\n          // Add new key/values\\n          if ( inValue.length > 0 ) {\\n            const inV = [...inValue];\\n            inV[0] = `  ${inKey}: ${inV[0]},`;\\n            value.splice( 1, 0, ...inV );\\n          }\\n        }\\n      }\\n      // Add label\\n      if( nodeData.label ) {\\n        value.splice( 1, 0, `  label: '${nodeData.label}',` );\\n      }\\n      //debugger;\\n      break;\\n    case 'DSL_Component':\\n    case 'DSL_BasicNode':\\n    case 'DSL_Picture':\\n    case 'DSL_BasicLink':\\n      value = this[`${nodeData.category}_get`]( nodeData, property );\\n      break;\\n  }\\n  return( value );\\n}\\nfunction getValueOfNode( key, property ) {\\n  let value = [''];\\n  let nodeData = null;\\n  \\n  // If name is a node key ==> get the node by key\\n  nodeData = me.getNodeByFieldName( 'main', 'key', [key], filterOutDisabledNodes );\\n  \\n  // If we found a node\\n  if( nodeData ) {\\n    value = generateNode( nodeData, property );\\n  }\\n  return( value );\\n}\\nfunction getValueOfRef( refValue, linkData ) {\\n  let value = [];\\n  \\n  const refInfo = parseInputPortName( refValue );\\n  if( ( refInfo.reference == '' ) && \\n      ( refInfo.name == '' ) && \\n      ( refInfo.value ) ) {\\n    // Case of refValue containing a \\\\@ to avoid interpretation as reference\\n    // Example: emailServer: \\\\@gmail.com\\n    // Example: email: antonello\\\\@gmail.com\\n    // Remove the '\\\\'\\n    value = refInfo.value;\\n  } else if( refInfo.reference ) {\\n    // Case of refValue being a reference\\n    // Remove the '@'\\n    const id = refInfo.reference;\\n    value = getCacheValue( id );\\n  } else {\\n    // Case of refValue being a value like string, array or number\\n    if( linkData ) {\\n      // Get all nodes connected to the nodeData\\n      const fromKey = linkData.from;\\n      const fromPort = linkData.fromPort;\\n      const nodeData = me.getNodeByFieldName( 'main', 'key', fromKey, filterOutDisabledNodes );\\n      if( nodeData ) {\\n        const id = getId( nodeData, fromPort );\\n        value = getCacheValue( id );\\n        //value = getGenerationValueFrom( nodeData, fromPort );\\n      } else {\\n        // We do nothing, because the node is not in an enabled feature\\n      }\\n    } else {\\n      value = getArrayOf( refValue );\\n    }\\n  }\\n  return( value );\\n}\\nfunction generateStartNode( nodeData ) {\\n  generateNode( nodeData );\\n}\\n\\n/************************\\n * Setup functions\\n ************************/\\n// Detect all active features\\nvar activeFeature = new Set();\\nconst featureList = me.getNodeListByFieldNameList( 'main', 'category', ['CodeFlow_Feature'] );\\nfor( const feature of featureList ) {\\n  if( feature.buttons[0].checked ) {\\n    // We get here all enabled groups (green titla backgound)\\n    const groupData = me.getNodeByFieldName( 'main', 'label', feature.label, (d)=> d.isGroup == true );\\n    if( groupData ) {\\n      activeFeature.add( groupData.key );\\n    }\\n  }\\n}\\n// Load all libraries for code generation\\nconst libraryNodeList = me.getNodeListByFieldNameList( 'main', 'category', ['CodeFlow_Library'], filterOutDisabledNodes );\\nlet libraryNameList = new Set( ['javascript' ] );\\nfor( const libraryNode of libraryNodeList ) {\\n  // Add the library to the available libraries\\n  libraryNameList.add( libraryNode.label );\\n  // If library has JavaScript code, we load it\\n  if( libraryNode.fileContent ) {\\n    eval( libraryNode.fileContent );\\n  }\\n}\\n/************************\\n * Property caching functions\\n ************************/\\n// Cache all name/value pairs from CodeFlow_Param nodes\\nconst paramNodeList = me.getNodeListByFieldNameList( 'main', 'category', ['CodeFlow_Param', 'Hierarchy_GraphInfo'], filterOutDisabledNodes );\\nfor( const paramNode of paramNodeList ) {\\n  if( nodeData.rows ) {\\n    for( const row of paramNode.rows ) {\\n      const value = getValueOfRef( row.value );\\n    }\\n  }\\n}\\ndebugger;\\n/************************\\n * Start generation\\n ************************/\\n// Detect starting nodes for code generation\\nconst categoryList = ['Hierarchy_CodeInGraph','Hierarchy_CodeInFile'];\\nconst startNodeList = me.getNodeListByFieldNameList( 'main', 'category', categoryList, filterOutDisabledNodes );\\nfor( const startNode of startNodeList ) {\\n  generateStartNode( startNode );\\n}\\nconsole.log( dataCache );\\n\\n\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":9,\"location\":\"-2240 -912.5\",\"group\":18,\"label\":\"Pressing this button will generate the DSL based on the selected features\",\"editorPosition\":[906,385,577,1763]},\n{\"label\":\"Model\",\"size\":\"180 60\",\"category\":\"Hierarchy_Model\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphModel$\",\"key\":7,\"location\":\"-3740 -940\"},\n{\"label\":\"Selection\",\"size\":\"180 60\",\"category\":\"Hierarchy_Selection\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphSelection$\",\"key\":16,\"location\":\"-3740 -880\"},\n{\"label\":\"Graph Info\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 40'\\ncolor: 'SkyBlue'\\nrows: [\\n  { name: 'Name', value: 'tbd' }\\n  { name: 'Version', value: '1.0' }\\n  { name: 'Date', value: '@getDate()' }\\n  { name: 'Path', value: './' }\\n  { name: 'Authors', value: 'Frankonello' }\\n]\"}],\"key\":20,\"location\":\"-2570 2389.708\",\"group\":67},\n{\"label\":\"Example101\",\"category\":\"CodeFlow_Code\",\"size\":\"180 100\",\"color\":\"orange\",\"rows\":[],\"in\":[{\"portId\":\"in0\"},{\"portId\":\"in1\"}],\"out\":[{\"portId\":\"out\"}],\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":13,\"location\":\"-310 -64.47715250169206\",\"editorPosition\":[36,-55,3718,583],\"fileContent\":\"/*\\r\\n   DSL for list of buttons\\r\\n*/\\r\\nfunction CodeFlowDSL_includeList() {\\r\\n  return(['/fileServer/System/Includes/DSLInclude.js']);\\r\\n}\\r\\nfunction CodeFlowDSL_getDSL( g ) {\\r\\n  let diagram = (g.diagram? g.diagram: g.nodePalette);\\r\\n\\r\\n  const cm = g.contextMenu;\\r\\n  cm.add( menuDSL, 'fileTypeMenu' );\\r\\n\\r\\n  const fileTypeContextMenu = cm.getMenu( 'fileTypeMenu' );\\r\\n \\r\\n  //-----------------------\\r\\n  // Event Listener\\r\\n  //-----------------------\\r\\n  \\r\\n  turnOnVisibitityOfButtonsProxy = function(evt) {\\r\\n    turnOnVisibitityOfButtons(evt,diagram);\\r\\n  }\\r\\n  turnOffVisibitityOfButtonsProxy = function(evt) {\\r\\n    turnOffVisibitityOfButtons(evt,diagram);\\r\\n  }\\r\\n\\r\\n  // Connectivity rules\\r\\n  if( diagram ) {\\r\\n    diagram.addDiagramListener( 'LinkDrawn',\\r\\n      function(evt) {\\r\\n        const linkCategory = {\\r\\n          Code: {\\r\\n            Code:         'CodeFlow_Code',\\r\\n            Feature:      'x',\\r\\n            Button:       'x',\\r\\n            File:         'CodeFlow_Code',\\r\\n            Bus:          'CodeFlow_Code',\\r\\n            in:           'x',\\r\\n          },\\r\\n          Feature: {\\r\\n            Code:         'x',\\r\\n            Feature:      'CodeFlow_Feature',\\r\\n            Button:       'x',\\r\\n            File:         'CodeFlow_Feature',\\r\\n            Bus:          'x',\\r\\n            in:           'x',\\r\\n        },\\r\\n          Button: {\\r\\n            Code:         'x',\\r\\n            Feature:      'x',\\r\\n            Button:       'x',\\r\\n            File:         'CodeFlow_Button',\\r\\n            Bus:          'x',\\r\\n            in:           'x',\\r\\n          },\\r\\n          out: {\\r\\n            Code:         'x',\\r\\n            Feature:      'x',\\r\\n            Button:       'x',\\r\\n            File:         'CodeFlow_Code',\\r\\n            Bus:          'CodeFlow_Code',\\r\\n            in:           'x',\\r\\n          },\\r\\n          Bus: {\\r\\n            Code:         'x',\\r\\n            Feature:      'x',\\r\\n            Button:       'x',\\r\\n            File:         'x',\\r\\n            Bus:          'x',\\r\\n            in:           'CodeFlow_Code',\\r\\n          },\\r\\n        };\\r\\n        const link = evt.subject;\\r\\n        const diagram = evt.diagram;\\r\\n        const model = diagram.model;\\r\\n        const linkData = model.findLinkDataForKey( link.data.key );\\r\\n        const fromPort = linkData.fromPort;\\r\\n        const toPort = linkData.toPort;\\r\\n        const fromNode = link.fromNode;\\r\\n        //const fromNodeColor = fromNode.findObject(\\\"MAIN\\\").fill;\\r\\n        const fromNodeColor = fromNode.data.color;\\r\\n        const fromNodeCategory = fromNode.data.category;\\r\\n        console.log(fromNodeColor);\\r\\n        //if( (fromPort == 'out' && toPort != 'File') ) {\\r\\n        if( fromNodeCategory.startsWith( 'CodeFlow_' ) ) {\\r\\n          category = 'CodeFlow_Code';\\r\\n          diagram.startTransaction( 'set link category' );\\r\\n            //link.stroke = fromNodeColor;\\r\\n            model.setDataProperty( linkData, 'color', fromNodeColor );\\r\\n            model.setCategoryForLinkData( linkData, category );\\r\\n          diagram.commitTransaction('set link category');\\r\\n        }\\r\\n        else if( fromPort && linkCategory[fromPort] && toPort && linkCategory[fromPort][toPort] ) {\\r\\n          let category = linkCategory[fromPort][toPort];\\r\\n          if( category == 'x' ) {\\r\\n            diagram.startTransaction( 'delete link' );\\r\\n              diagram.remove(link);\\r\\n            diagram.commitTransaction('setLinkCategory');\\r\\n          } else {\\r\\n            diagram.startTransaction( 'set link category' );\\r\\n              model.setDataProperty( linkData, 'color', fromNodeColor );\\r\\n              model.setCategoryForLinkData( linkData, category );\\r\\n            diagram.commitTransaction('set link category');\\r\\n          }\\r\\n        } else {\\r\\n          //diagram.startTransaction( 'delete link' );\\r\\n          //  diagram.remove(link);\\r\\n          //diagram.commitTransaction('setLinkCategory');\\r\\n        }\\r\\n      }\\r\\n    );\\r\\n    diagram.addDiagramListener( 'ChangingSelection', turnOffVisibitityOfButtonsProxy );\\r\\n    diagram.addDiagramListener( 'ChangedSelection', turnOnVisibitityOfButtonsProxy );\\r\\n  }\\r\\n\\r\\n  // Internal button function to propagate checkbox status\\r\\n  function featureOnOff( event, obj ) {\\r\\n    function swapColor( nodeData ) {\\r\\n      const partColor = nodeData.color;\\r\\n      const uncheckedColor = nodeData.buttons[0].color;\\r\\n      diagram.model.setDataProperty( nodeData, \\\"color\\\", uncheckedColor );\\r\\n      diagram.model.setDataProperty( nodeData.buttons[0], \\\"color\\\", partColor );\\r\\n      const groupList = diagram.findNodesByExample({ label: nodeData.label, isGroup: true });\\r\\n      if( groupList ) {\\r\\n        const it = groupList.iterator;\\r\\n        while( it.next() ) {\\r\\n          const node = it.value;\\r\\n          let groupColor = node.data.color;\\r\\n          let colorSwap = node.data.colorSwap;\\r\\n          if( !colorSwap ) {\\r\\n            colorSwap = groupColor;\\r\\n            groupColor = 'green';\\r\\n          } else {\\r\\n            const tmpColor = groupColor;\\r\\n            groupColor = colorSwap;\\r\\n            colorSwap = tmpColor;\\r\\n          }\\r\\n          diagram.model.setDataProperty( node.data, \\\"color\\\", groupColor );\\r\\n          diagram.model.setDataProperty( node.data, \\\"colorSwap\\\", colorSwap );\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    function propagateState( node, isChecked ) {\\r\\n      // Update status\\r\\n      if( node.data.buttons[0].checked != isChecked ) {\\r\\n        diagram.model.setDataProperty( node.data.buttons[0], 'checked', isChecked );\\r\\n        swapColor( node.data );\\r\\n      }\\r\\n\\r\\n      // Find all links in fanout and update their status\\r\\n      let nodeIterator = node.findNodesOutOf().iterator;\\r\\n      while (nodeIterator.next()) {\\r\\n        const node = nodeIterator.value;\\r\\n        propagateState( node, isChecked );\\r\\n      }\\r\\n    }\\r\\n    function uncheckAll( group ) {\\r\\n      const groupNode = diagram.findNodeForKey( group );\\r\\n      const it = groupNode.memberParts;\\r\\n      // Find all links in fanout and update their status\\r\\n      while (it.next()) {\\r\\n        const part = it.value;\\r\\n        if( it.value instanceof go.Node ) {\\r\\n          // part is a node\\r\\n          const nodeData = it.value.data;\\r\\n          if( nodeData.category.startsWith( 'CodeFlow_Feature' ) &&\\r\\n              nodeData.buttons[0].checked ) {\\r\\n            diagram.model.setDataProperty( nodeData.buttons[0], 'checked', false );\\r\\n            swapColor( nodeData );\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    const nodePart = obj.part;\\r\\n    //const diagram = nodePart.diagram;\\r\\n    const node = diagram.findNodeForKey( nodePart.key );\\r\\n    const nodeData = node.data;\\r\\n    diagram.startTransaction( \\\"Check Box\\\" );\\r\\n      const targetState = !obj.data.checked;\\r\\n      uncheckAll( nodeData.group );\\r\\n      if( targetState ) {\\r\\n        const isChecked = true;    \\r\\n        propagateState( node, isChecked );\\r\\n      }\\r\\n    diagram.commitTransaction( \\\"Check Box\\\" );\\r\\n  };\\r\\n\\r\\n  \\r\\n  //-----------------------\\r\\n  // Define palette\\r\\n  //-----------------------\\r\\n\\r\\n  const dsl = {\\r\\n    templateNodeList: [\\r\\n      { category: 'CodeFlow_Operator',        template: dsl_Component, param: { portId: '',        isFromLinkable: false, isToLinkable: false, hasTag: false,  hasType: true,  isTypeEditable: false, type: '@fileTypeName', hasValue: false, hasUnit: false,  figure: 'SquareUShape',    hasInputs: true,  hasOutputs: true,  hasFunctionButtons: false, hasProperties: false, canAddInput: true, canAddOutput: true, } },\\r\\n      { category: 'CodeFlow_OperatorIn',      template: dsl_Component, param: { portId: '',        isFromLinkable: false, isToLinkable: false, hasTag: false,  hasType: true,  isTypeEditable: false, type: '@fileTypeName', hasValue: false, hasUnit: false,  figure: 'SquareUShape',    hasInputs: true,  hasOutputs: true,  hasFunctionButtons: false, hasProperties: false, canAddInput: true, canAddOutput: true, isPortInside: true, } },\\r\\n      { category: 'CodeFlow_Code',            template: dsl_Component, param: { portId: '',        isFromLinkable: false, isToLinkable: false, hasTag: false,  hasType: true,  isTypeEditable: false, type: '@fileTypeName', hasValue: true,  hasUnit: false,  figure: 'Rectangle',       hasInputs: true,  hasOutputs: true,  hasFunctionButtons: false, hasProperties: true,      typeMenu: fileTypeContextMenu, canAddInput: true, canAddOutput: true, } },\\r\\n      { category: 'CodeFlow_CodeIn',          template: dsl_Component, param: { portId: '',        isFromLinkable: false, isToLinkable: false, hasTag: false,  hasType: true,  isTypeEditable: false, type: '@fileTypeName', hasValue: true,  hasUnit: false,  figure: 'Rectangle',       hasInputs: true,  hasOutputs: true,  hasFunctionButtons: false, hasProperties: true,      typeMenu: fileTypeContextMenu, canAddInput: true, canAddOutput: true, isPortInside: true, } },\\r\\n      { category: 'CodeFlow_Merge',           template: dsl_Component, param: { portId: '',        isFromLinkable: false, isToLinkable: false, hasTag: false,  hasType: false, isTypeEditable: false,                        hasValue: false, hasUnit: false,  figure: 'Rectangle',       hasInputs: true,  hasOutputs: true,  hasFunctionButtons: false, hasProperties: false, canAddInput: true, canAddOutput: false, isResizable: false, isLabelEditable: true, maxSize: new go.Size(0, NaN),  } },\\r\\n      { category: 'CodeFlow_Multiplexer',     template: dsl_Component, param: { portId: '',        isFromLinkable: false, isToLinkable: false, hasTag: false,  hasType: false, isTypeEditable: false,                        hasValue: false, hasUnit: false,  figure: 'RightPointSquare',hasInputs: true,  hasOutputs: true,  hasFunctionButtons: false, hasProperties: false, canAddInput: true, canAddOutput: false, isResizable: false, isLabelEditable: false, maxSize: new go.Size(20, NaN),  } },\\r\\n      { category: 'CodeFlow_Demultiplexer',   template: dsl_Component, param: { portId: '',        isFromLinkable: false, isToLinkable: false, hasTag: false,  hasType: false, isTypeEditable: false,                        hasValue: false, hasUnit: false,  figure: 'LeftPointSquare', hasInputs: true,  hasOutputs: true,  hasFunctionButtons: false, hasProperties: false, canAddInput: false, canAddOutput: true, isResizable: false, isLabelEditable: false, maxSize: new go.Size(20, NaN),  } },\\r\\n      { category: 'CodeFlow_Library',         template: dsl_Component, param: { portId: '',        isFromLinkable: false, isToLinkable: false, hasTag: false,  hasType: true,  isTypeEditable: false, type: '@fileTypeName', hasValue: false, hasUnit: false,  figure: 'Rectangle',       hasInputs: false, hasOutputs: false, hasFunctionButtons: false, hasProperties: false,  } },\\r\\n      { category: 'Hierarchy_GraphInfo',       template: dsl_Component, param: { portId: '',        isFromLinkable: false, isToLinkable: false, hasTag: false,  hasType: false, isTypeEditable: false,                        hasValue: true,  hasUnit: false,  figure: 'File',            hasInputs: false, hasOutputs: false, hasFunctionButtons: false, hasProperties: true,  canAddProperties: false} },\\r\\n      { category: 'CodeFlow_Param',           template: dsl_Component, param: { portId: '',        isFromLinkable: false, isToLinkable: false, hasTag: false,  hasType: false, isTypeEditable: false,                        hasValue: true,  hasUnit: false,  figure: 'BendedLeftRight', hasInputs: false, hasOutputs: false, hasFunctionButtons: false, hasProperties: true,  canAddProperties: true, } },\\r\\n      { category: 'CodeFlow_Button',          template: dsl_Component, param: { portId: '',        isFromLinkable: false, isToLinkable: false, hasTag: false,  hasType: false, isTypeEditable: false,                        hasValue: true,  hasUnit: false,  figure: 'Rectangle',       hasInputs: false, hasOutputs: false, hasFunctionButtons: true,  hasProperties: true,  canAddProperties: false,  isFromLinkable: true,  isToLinkable: false, fromSpot: go.Spot.Center, toSpot:go.Spot.Center, buttonMinSize: new go.Size(70, 20), labelTextAlign: 'left', } },\\r\\n      { category: 'CodeFlow_FeatureOnOff',    template: dsl_Component, param: { portId: 'Feature', isFromLinkable: true,  isToLinkable: true,  hasTag: false,  hasType: false, isTypeEditable: false,                        hasValue: false, hasUnit: false,  figure: 'Rectangle',       hasInputs: false, hasOutputs: false, hasFunctionButtons: true,  hasProperties: false, buttonInternalCallback: featureOnOff, isCheckBoxes: true, hasProperties: false, labelStroke: 'white',     fromSpot: go.Spot.Center, toSpot:go.Spot.Center, buttonStroke: 'white', labelTextAlign: 'left',} },\\r\\n      { category: 'CodeFlow_Feature',         template: dsl_Component, param: { portId: 'Feature', isFromLinkable: true,  isToLinkable: true,  hasTag: false,  hasType: false, isTypeEditable: false,                        hasValue: false, hasUnit: false,  figure: 'Rectangle',       hasInputs: false, hasOutputs: false, hasFunctionButtons: false, hasProperties: false, labelStroke: 'white',     fromSpot: go.Spot.Right, toSpot:go.Spot.Left, buttonStroke: 'white', labelTextAlign: 'left',} },\\r\\n      { category: 'CodeFlow_Bus',             template: dsl_BasicNode, param: { portId: 'Bus',     isFromLinkable: true,  isToLinkable: true,  hasTag: false,  hasType: false,  isTypeEditable: false, hasValue: false, hasUnit: false,  figure: 'ellipse',            minSize: new go.Size(40,40), labelTextAlign: 'center',                  labelStroke: 'black',  } },\\r\\n    ],\\r\\n    dataNodeList: [\\r\\n      {\\r\\n        label: 'Graph Info',\\r\\n        category: 'Hierarchy_GraphInfo',\\r\\n        size: '180 40',\\r\\n        color: 'SkyBlue',\\r\\n        rows: [\\r\\n          { name: 'Name', value: 'tbd' },\\r\\n          { name: 'Version', value: '1.0' },\\r\\n          { name: 'Date', value: '@getDate()' },\\r\\n          { name: 'Path', value: './' },\\r\\n          { name: 'Authors', value: 'Frankonello' },\\r\\n        ],\\r\\n      },\\r\\n      {\\r\\n        label: 'Parameters',\\r\\n        category: 'CodeFlow_Param',\\r\\n        size: '180 40',\\r\\n        color: 'sandybrown',\\r\\n        rows: [\\r\\n          { name: 'name1', value: 'value1' },\\r\\n          { name: 'name2', value: 'value2' },\\r\\n        ],\\r\\n      },\\r\\n      {\\r\\n        label: 'Label',\\r\\n        category: 'CodeFlow_Button',\\r\\n        size: '180 40',\\r\\n        color: 'YellowGreen', \\r\\n        buttons: [\\r\\n          {name: 'Generate', checked: false},\\r\\n        ],\\r\\n        'isFile': true,\\r\\n        'fileContent': nodeButtonFileContent,\\r\\n        'fileTypeName': 'Javascript',\\r\\n        'fileType': 'text/javascript',\\r\\n     },\\r\\n      {\\r\\n        label: 'Label',\\r\\n        category: 'CodeFlow_Button',\\r\\n        size: '180 40',\\r\\n        color: 'YellowGreen', \\r\\n        buttons: [\\r\\n          {name: 'Run', checked: false},\\r\\n        ],\\r\\n        'isFile': true,\\r\\n        'fileContent': nodeButtonFileContent,\\r\\n        'fileTypeName': 'Javascript',\\r\\n        'fileType': 'text/javascript',\\r\\n      },\\r\\n      {\\r\\n        label: 'Label',\\r\\n        category: 'CodeFlow_Button',\\r\\n        color: 'YellowGreen', \\r\\n        size: '180 40',\\r\\n        buttons: [\\r\\n          {name: 'Deploy', checked: false},\\r\\n        ],\\r\\n        rows: [\\r\\n          { name: 'path', value: 'value1' },\\r\\n        ],\\r\\n       'isFile': true,\\r\\n        'fileContent': nodeButtonFileContent,\\r\\n        'fileTypeName': 'Javascript',\\r\\n        'fileType': 'text/javascript',\\r\\n      },\\r\\n      {\\r\\n        label: 'Feature',\\r\\n        category: 'CodeFlow_Feature',\\r\\n        size: '180 40',\\r\\n        color: 'RebeccaPurple', \\r\\n        buttons: [\\r\\n          {name: '', checked: false, color: 'green'},\\r\\n        ],\\r\\n      },\\r\\n      {\\r\\n        label: 'Release/version',\\r\\n        category: 'CodeFlow_FeatureOnOff',\\r\\n        size: '180 40',\\r\\n        color: 'RebeccaPurple', \\r\\n        buttons: [\\r\\n          {name: '', checked: false, color: 'green'},\\r\\n        ],\\r\\n      },\\r\\n      {\\r\\n        label: 'Operator',\\r\\n        category: 'CodeFlow_Operator',\\r\\n        size: '180 100',\\r\\n        color: 'orange', \\r\\n        in: [ \\r\\n          { portId:'in' },\\r\\n        ],\\r\\n        out: [ \\r\\n          { portId:'out' },\\r\\n        ],\\r\\n        'isFile': true,\\r\\n        'fileContent': '',\\r\\n        'fileTypeName': 'Javascript',\\r\\n        'fileType': 'text/javascript',\\r\\n      },\\r\\n      {\\r\\n        label: 'Operator',\\r\\n        category: 'CodeFlow_OperatorIn',\\r\\n        size: '180 100',\\r\\n        color: 'orange', \\r\\n        in: [ \\r\\n          { portId:'in' },\\r\\n        ],\\r\\n        out: [ \\r\\n          { portId:'out' },\\r\\n        ],\\r\\n        'isFile': true,\\r\\n        'fileContent': '',\\r\\n        'fileTypeName': 'Javascript',\\r\\n        'fileType': 'text/javascript',\\r\\n      },\\r\\n      {\\r\\n        label: '',\\r\\n        category: 'CodeFlow_Merge',\\r\\n        color: 'white', \\r\\n        rows: [        ],\\r\\n        in: [ \\r\\n          { portId:'in0' },\\r\\n          { portId:'in1' },\\r\\n        ],\\r\\n        out: [ \\r\\n          { portId:'out' },\\r\\n        ],\\r\\n      },\\r\\n      {\\r\\n        label: '',\\r\\n        category: 'CodeFlow_Multiplexer',\\r\\n        color: 'lightseagreen', \\r\\n        rows: [        ],\\r\\n        in: [ \\r\\n          { portId:'in0' },\\r\\n          { portId:'in1' },\\r\\n        ],\\r\\n        out: [ \\r\\n          { portId:'out' },\\r\\n        ],\\r\\n      },\\r\\n      {\\r\\n        label: 'Bus',\\r\\n        size: '35 35',\\r\\n        category: 'CodeFlow_Bus',\\r\\n        color: 'lightseagreen',\\r\\n        'isFile': true,\\r\\n        'fileTypeName': 'Text',\\r\\n        'fileType': 'text/text',\\r\\n        'fileURL': '',\\r\\n      },\\r\\n      {\\r\\n        label: '',\\r\\n        category: 'CodeFlow_Demultiplexer',\\r\\n        color: 'lightseagreen', \\r\\n        rows: [        ],\\r\\n        in: [ \\r\\n          { portId:'in' },\\r\\n        ],\\r\\n        out: [ \\r\\n          { portId:'out1' },\\r\\n          { portId:'out2' },\\r\\n        ],\\r\\n      },\\r\\n      {\\r\\n        label: 'Source Code',\\r\\n        category: 'CodeFlow_Code',\\r\\n        size: '180 100',\\r\\n        color: 'orange', \\r\\n        rows: [\\r\\n        ],\\r\\n        in: [ \\r\\n          { portId:'in0' },\\r\\n          { portId:'in1' },\\r\\n        ],\\r\\n        out: [ \\r\\n          { portId:'out' },\\r\\n        ],\\r\\n        'isFile': true,\\r\\n        'fileTypeName': 'Javascript',\\r\\n        'fileType': 'text/javascript',\\r\\n      },\\r\\n      {\\r\\n        label: 'Source Code',\\r\\n        category: 'CodeFlow_CodeIn',\\r\\n        size: '180 100',\\r\\n        color: 'orange', \\r\\n        rows: [\\r\\n        ],\\r\\n        in: [ \\r\\n          { portId:'in0' },\\r\\n          { portId:'in1' },\\r\\n        ],\\r\\n        out: [ \\r\\n          { portId:'out' },\\r\\n        ],\\r\\n        'isFile': true,\\r\\n        'fileTypeName': 'Javascript',\\r\\n        'fileType': 'text/javascript',\\r\\n      },\\r\\n      {\\r\\n        label: 'Common Code',\\r\\n        category: 'CodeFlow_Library',\\r\\n        size: '180 100',\\r\\n        color: 'orange', \\r\\n        'isFile': true,\\r\\n        'fileTypeName': 'Javascript',\\r\\n        'fileType': 'text/javascript',\\r\\n      },\\r\\n    ],\\r\\n    templateLinkList: [\\r\\n      { category: 'CodeFlow_Code',     template: dsl_BasicLink, param: {toScale: 2, strokeWidth: 4,toShortLength:0}},\\r\\n      { category: 'CodeFlow_Feature',  template: dsl_BasicLink, param: {stroke:'RebeccaPurple', toArrow: 'standard', toScale: 2, strokeWidth: 4, toShortLength:10}},\\r\\n      { category: 'CodeFlow_Button',   template: dsl_BasicLink, param: {stroke:'YellowGreen',  strokeWidth: 4,}},\\r\\n    ],\\r\\n    // Define link palette\\r\\n    dataLinkList: [\\r\\n      {\\r\\n        category: 'CodeFlow_Code',\\r\\n        fromPort: '',\\r\\n        toPort: '',\\r\\n      },\\r\\n      {\\r\\n        category: 'CodeFlow_Feature',\\r\\n        fromPort: '',\\r\\n        toPort: '',\\r\\n      },\\r\\n      {\\r\\n        category: 'CodeFlow_Button',\\r\\n        fromPort: '',\\r\\n        toPort: '',\\r\\n      },\\r\\n    ],\\r\\n  };\\r\\n\\r\\n  return( dsl );\\r\\n}\"},\n{\"label\":\"DSL Template\",\"category\":\"CodeFlow_Code\",\"size\":\"180 180\",\"color\":\"orange\",\"rows\":[],\"in\":[{\"portId\":\"includeList\"},{\"portId\":\"setupCode\"},{\"portId\":\"dslCode\"},{\"portId\":\"templateNodeList\"},{\"portId\":\"dataNodeList\"},{\"portId\":\"templateGroupList\"},{\"portId\":\"dataGroupList\"},{\"portId\":\"templateLinkList\"},{\"portId\":\"dataLinkList\"}],\"out\":[{\"portId\":\"out\"}],\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":19,\"location\":\"-800 1335.230847498308\",\"fileContent\":\"//[# Begin out #]\\n/*\\n=============================================================================\\nLicensed Materials - Property of Frank Joublin and Antonio Ceravola.\\n(C) Copyright Frank Joublin and Antonio Ceravola. 2021, All Rights Reserved.\\nFrance Government Users Restricted Rights - Use, duplication or disclosure\\nrestricted by GSA ADP Schedule Contract with Frank Joublin and Antonio Ceravola.\\n=============================================================================\\nModule: DSL File\\nDate: 10.07.2020\\n=============================================================================\\n*/\\n\\n//--------------------------------------------------\\n// Define list of include files (Optional Function)\\n//--------------------------------------------------\\nfunction NameDSL_includeList() {\\n  return([\\n      //[# Begin includeList #]\\n      '/fileServer/System/Includes/DSLInclude.js',\\n      //[# End includeList #]\\n    ]);\\n}\\n\\n//--------------------------------------------------\\n// Define setup of DSL\\n//--------------------------------------------------\\nfunction NameDSL_setupDSL( g ) {\\n  //[# Insert setupCode #]\\n}\\n\\n//--------------------------------------------------\\n// Define DSL Meta-Model and DSL Model\\n//--------------------------------------------------\\nfunction NameDSL_getDSL( g ) {\\n  let diagram = (g.diagram? g.diagram: g.nodePalette);\\n\\n  //----------------------------------\\n  // Define DSL functions\\n  //----------------------------------\\n  //[# Insert dslCode #]\\n\\n  //----------------------------------\\n  // Define DSL Meta-Models functions\\n  //----------------------------------\\n  //[# Begin Skip #]\\n  const Name_Node1 = ()=> {\\n    return( $(go.Node, \\\"Auto\\\",              // the Shape automatically fits around the TextBlock\\n      $(go.Shape, \\\"RoundedRectangle\\\",       // use this kind of figure for the Shape\\n        new go.Binding(\\\"fill\\\", \\\"color\\\")),   // bind Shape.fill to Node.data.color\\n      $(go.TextBlock,\\n        { margin: 3 },                      // some room around the text\\n        new go.Binding(\\\"text\\\", \\\"label\\\"))    // bind TextBlock.text to Node.data.label\\n    ));\\n  };\\n  //[# End Skip #]\\n  \\n  //----------------------------------\\n  // Define DSL data\\n  //----------------------------------\\n  const dsl = {\\n    \\n    //-----------------------------------\\n    // Define DSL Meta-Models categories\\n    //-----------------------------------\\n    templateNodeList: [\\n      //[# Insert templateNodeList #]\\n      //[# Begin templateNodeList #]\\n      { category: 'Name_Node1', template: Name_Node1 },\\n      //[# End templateNodeList #]\\n    ],\\n\\n    //-----------------------------------\\n    // Define DSL Models Node Elements\\n    //-----------------------------------\\n    dataNodeList:[\\n      //[# Insert dataNodeList #]\\n\\n      //[# Begin dataNodeList #]\\n      {\\n        'label': 'Red Node',\\n        'color': 'Red',\\n        'category': 'Name_Node1',\\n      },\\n      {\\n        'label': 'Green Node',\\n        'color': 'Green',\\n        'category': 'Name_Node1',\\n      },\\n      //[# End dataNodeList #]\\n    ],\\n\\n    //-----------------------------------\\n    // Define DSL Models Group Elements\\n    //-----------------------------------\\n    templateGroupList:[\\n      //[# Insert templateGroupList #]\\n    ],\\n    dataGroupList:[\\n      //[# Insert dataGroupList #]\\n    ],\\n    \\n    //-----------------------------------\\n    // Define DSL Models Link Elements\\n    //-----------------------------------\\n    templateLinkList:[\\n      //[# Insert templateLinkList #]\\n    ],\\n    dataLinkList:[\\n      //[# Insert dataLinkList #]\\n    ],\\n  };\\n\\n  // Return DSL data\\n  return( dsl );\\n}\\n//[# End out #]\\n\",\"editorPosition\":[1709,190,1073,2176],\"group\":67},\n{\"label\":\"CodeFlowDSL\",\"size\":\"180 35\",\"category\":\"Hierarchy_CodeInGraph\",\"color\":\"orange\",\"isFile\":true,\"fileTypeName\":\"JavaScript\",\"fileType\":\"text/javascript\",\"key\":24,\"location\":\"-500 1320\",\"fileContent\":\"/*\\n=============================================================================\\nLicensed Materials - Property of Frank Joublin and Antonio Ceravola.\\n(C) Copyright Frank Joublin and Antonio Ceravola. 2021, All Rights Reserved.\\nFrance Government Users Restricted Rights - Use, duplication or disclosure\\nrestricted by GSA ADP Schedule Contract with Frank Joublin and Antonio Ceravola.\\n=============================================================================\\nModule: DSL File\\nDate: 10.07.2020\\n=============================================================================\\n*/\\n\\n//--------------------------------------------------\\n// Define list of include files (Optional Function)\\n//--------------------------------------------------\\nfunction NameDSL_includeList() {\\n  return([\\n      '/fileServer/System/Includes/DSLInclude.js',\\n    ]);\\n}\\n\\n//--------------------------------------------------\\n// Define setup of DSL\\n//--------------------------------------------------\\nfunction NameDSL_setupDSL( g ) {\\n}\\n\\n//--------------------------------------------------\\n// Define DSL Meta-Model and DSL Model\\n//--------------------------------------------------\\nfunction NameDSL_getDSL( g ) {\\n  let diagram = (g.diagram? g.diagram: g.nodePalette);\\n\\n  //----------------------------------\\n  // Define DSL functions\\n  //----------------------------------\\n  const cm = g.contextMenu;\\n  cm.add( menuDSL, 'fileTypeMenu' );\\n  \\n  const fileTypeContextMenu = cm.getMenu( 'fileTypeMenu' );\\n  //-----------------------\\n  // Event Listener\\n  //-----------------------\\n  \\n  turnOnVisibitityOfButtonsProxy = function(evt) {\\n    turnOnVisibitityOfButtons(evt,diagram);\\n  }\\n  turnOffVisibitityOfButtonsProxy = function(evt) {\\n    turnOffVisibitityOfButtons(evt,diagram);\\n  }\\n  // Connectivity rules\\n  if( diagram ) {\\n    diagram.addDiagramListener( 'LinkDrawn',\\n      function(evt) {\\n        const linkCategory = {\\n          Code: {\\n            Code:         'CodeFlow_Code',\\n            Feature:      'x',\\n            Button:       'x',\\n            File:         'CodeFlow_Code',\\n            Bus:          'CodeFlow_Code',\\n            in:           'x',\\n          },\\n          Feature: {\\n            Code:         'x',\\n            Feature:      'CodeFlow_Feature',\\n            Button:       'x',\\n            File:         'CodeFlow_Feature',\\n            Bus:          'x',\\n            in:           'x',\\n        },\\n          Button: {\\n            Code:         'x',\\n            Feature:      'x',\\n            Button:       'x',\\n            File:         'CodeFlow_Button',\\n            Bus:          'x',\\n            in:           'x',\\n          },\\n          out: {\\n            Code:         'x',\\n            Feature:      'x',\\n            Button:       'x',\\n            File:         'CodeFlow_Code',\\n            Bus:          'CodeFlow_Code',\\n            in:           'x',\\n          },\\n          Bus: {\\n            Code:         'x',\\n            Feature:      'x',\\n            Button:       'x',\\n            File:         'x',\\n            Bus:          'x',\\n            in:           'CodeFlow_Code',\\n          },\\n        };\\n        const link = evt.subject;\\n        const diagram = evt.diagram;\\n        const model = diagram.model;\\n        const linkData = model.findLinkDataForKey( link.data.key );\\n        const fromPort = linkData.fromPort;\\n        const toPort = linkData.toPort;\\n        const fromNode = link.fromNode;\\n        //const fromNodeColor = fromNode.findObject(\\\"MAIN\\\").fill;\\n        const fromNodeColor = fromNode.data.color;\\n        const fromNodeCategory = fromNode.data.category;\\n        console.log(fromNodeColor);\\n        //if( (fromPort == 'out' && toPort != 'File') ) {\\n        if( fromNodeCategory.startsWith( 'CodeFlow_' ) ) {\\n          category = 'CodeFlow_Code';\\n          diagram.startTransaction( 'set link category' );\\n            //link.stroke = fromNodeColor;\\n            model.setDataProperty( linkData, 'color', fromNodeColor );\\n            model.setCategoryForLinkData( linkData, category );\\n          diagram.commitTransaction('set link category');\\n        }\\n        else if( fromPort && linkCategory[fromPort] && toPort && linkCategory[fromPort][toPort] ) {\\n          let category = linkCategory[fromPort][toPort];\\n          if( category == 'x' ) {\\n            diagram.startTransaction( 'delete link' );\\n              diagram.remove(link);\\n            diagram.commitTransaction('setLinkCategory');\\n          } else {\\n            diagram.startTransaction( 'set link category' );\\n              model.setDataProperty( linkData, 'color', fromNodeColor );\\n              model.setCategoryForLinkData( linkData, category );\\n            diagram.commitTransaction('set link category');\\n          }\\n        } else {\\n          //diagram.startTransaction( 'delete link' );\\n          //  diagram.remove(link);\\n          //diagram.commitTransaction('setLinkCategory');\\n        }\\n      }\\n    );\\n    diagram.addDiagramListener( 'ChangingSelection', turnOffVisibitityOfButtonsProxy );\\n    diagram.addDiagramListener( 'ChangedSelection', turnOnVisibitityOfButtonsProxy );\\n  }\\n  // Internal button function to propagate checkbox status\\n  function featureOnOff( event, obj ) {\\n    function swapColor( nodeData ) {\\n      const partColor = nodeData.color;\\n      const uncheckedColor = nodeData.buttons[0].color;\\n      diagram.model.setDataProperty( nodeData, \\\"color\\\", uncheckedColor );\\n      diagram.model.setDataProperty( nodeData.buttons[0], \\\"color\\\", partColor );\\n      const groupList = diagram.findNodesByExample({ label: nodeData.label, isGroup: true });\\n      if( groupList ) {\\n        const it = groupList.iterator;\\n        while( it.next() ) {\\n          const node = it.value;\\n          let groupColor = node.data.color;\\n          let colorSwap = node.data.colorSwap;\\n          if( !colorSwap ) {\\n            colorSwap = groupColor;\\n            groupColor = 'green';\\n          } else {\\n            const tmpColor = groupColor;\\n            groupColor = colorSwap;\\n            colorSwap = tmpColor;\\n          }\\n          diagram.model.setDataProperty( node.data, \\\"color\\\", groupColor );\\n          diagram.model.setDataProperty( node.data, \\\"colorSwap\\\", colorSwap );\\n        }\\n      }\\n    }\\n    function propagateState( node, isChecked ) {\\n      // Update status\\n      if( node.data.buttons[0].checked != isChecked ) {\\n        diagram.model.setDataProperty( node.data.buttons[0], 'checked', isChecked );\\n        swapColor( node.data );\\n      }\\n  \\n      // Find all links in fanout and update their status\\n      let nodeIterator = node.findNodesOutOf().iterator;\\n      while (nodeIterator.next()) {\\n        const node = nodeIterator.value;\\n        propagateState( node, isChecked );\\n      }\\n    }\\n    function uncheckAll( group ) {\\n      const groupNode = diagram.findNodeForKey( group );\\n      const it = groupNode.memberParts;\\n      // Find all links in fanout and update their status\\n      while (it.next()) {\\n        const part = it.value;\\n        if( it.value instanceof go.Node ) {\\n          // part is a node\\n          const nodeData = it.value.data;\\n          if( nodeData.category.startsWith( 'CodeFlow_Feature' ) &&\\n              nodeData.buttons[0].checked ) {\\n            diagram.model.setDataProperty( nodeData.buttons[0], 'checked', false );\\n            swapColor( nodeData );\\n          }\\n        }\\n      }\\n    }\\n    const nodePart = obj.part;\\n    //const diagram = nodePart.diagram;\\n    const node = diagram.findNodeForKey( nodePart.key );\\n    const nodeData = node.data;\\n    diagram.startTransaction( \\\"Check Box\\\" );\\n      const targetState = !obj.data.checked;\\n      uncheckAll( nodeData.group );\\n      if( targetState ) {\\n        const isChecked = true;    \\n        propagateState( node, isChecked );\\n      }\\n    diagram.commitTransaction( \\\"Check Box\\\" );\\n  };\\n\\n  //----------------------------------\\n  // Define DSL Meta-Models functions\\n  //----------------------------------\\n  \\n  //----------------------------------\\n  // Define DSL data\\n  //----------------------------------\\n  const dsl = {\\n    \\n    //-----------------------------------\\n    // Define DSL Meta-Models categories\\n    //-----------------------------------\\n    templateNodeList: [\\n      { category: 'CodeFlow_Merge', template: DSL_Component, param: { g, isResizable: false, minSize: go.Size.parse('10 40'), isFromLinkable: false, isToLinkable: false, isLabelEditable: true, hasTag: false, hasType: false, hasProperties: false, inputMaxLinks: '1', canAddOutput: false } },\\n      { category: 'CodeFlow_Library', template: DSL_Component, param: { g, isFromLinkable: false, isToLinkable: false, hasTag: false, type: '@fileTypeName', isTypeEditable: false, hasProperties: false, hasInputs: false, hasOutputs: false } },\\n      { category: 'CodeFlow_CodeIn', template: DSL_Component, param: { g, isFromLinkable: false, isToLinkable: false, hasTag: false, type: '@fileTypeName', isTypeEditable: false, typeMenu: 'fileTypeContextMenu', hasUnit: false, inputMaxLinks: '1', isPortInside: true } },\\n      { category: 'CodeFlow_Code', template: DSL_Component, param: { g, isFromLinkable: false, isToLinkable: false, hasTag: false, type: '@fileTypeName', isTypeEditable: false, typeMenu: 'fileTypeContextMenu', hasUnit: false, inputMaxLinks: '1' } },\\n      { category: 'CodeFlow_Demultiplexer', template: DSL_Component, param: { g, isResizable: false, minSize: go.Size.parse('10 40'), isFromLinkable: false, isToLinkable: false, isLabelEditable: false, hasTag: false, hasType: false, hasProperties: false, canAddInput: false } },\\n      { category: 'CodeFlow_Bus', template: DSL_Component, param: { g, figure: 'Elipse', portId: 'Bus', fromSpot: go.Spot.Center, toSpot: go.Spot.Center, hasTag: false, hasType: false, hasProperties: false, hasValue: true, hasInputs: false, hasOutputs: false } },\\n      { category: 'CodeFlow_Multiplexer', template: DSL_Component, param: { g, isResizable: false, minSize: go.Size.parse('10 40'), isFromLinkable: false, isToLinkable: false, isLabelEditable: false, hasTag: false, hasType: false, hasProperties: false, canAddOutput: false } },\\n      { category: 'CodeFlow_OperatorIn', template: DSL_Component, param: { g, figure: 'SquareUShape', isFromLinkable: false, isToLinkable: false, hasTag: false, type: '@fileTypeName', isTypeEditable: false, hasProperties: false, isPortInside: true } },\\n      { category: 'CodeFlow_Operator', template: DSL_Component, param: { g, figure: 'SquareUShape', isFromLinkable: false, isToLinkable: false, hasTag: false, type: '@fileTypeName', isTypeEditable: false, hasProperties: false } },\\n      { category: 'CodeFlow_FeatureOnOff', template: DSL_Component, param: { g, portId: 'Feature', fromSpot: go.Spot.Center, toSpot: go.Spot.Center, labelStroke: 'White', labelTextAlign: 'left', hasTag: false, hasType: false, hasFunctionButtons: true, isCheckBoxes: true, buttonStroke: 'White', buttonInternalCallback: 'featureOnOff', hasProperties: false, hasInputs: false, hasOutputs: false } },\\n      { category: 'CodeFlow_Feature', template: DSL_Component, param: { g, portId: 'Feature', isFromLinkable: false, toSpot: go.Spot.Center, labelStroke: 'White', labelTextAlign: 'left', hasTag: false, hasType: false, hasProperties: false, hasInputs: false, hasOutputs: false } },\\n      { category: 'CodeFlow_Button', template: DSL_Component, param: { g, isFromLinkable: false, isToLinkable: false, labelTextAlign: 'left', hasTag: false, hasType: false, canAddProperties: false, hasUnit: false } },\\n      { category: 'CodeFlow_Param', template: DSL_Component, param: { g, figure: 'BendedLeftRight', isFromLinkable: false, isToLinkable: false, hasTag: false, hasType: false, hasUnit: false, hasInputs: false, hasOutputs: false } },\\n      { category: 'Hierarchy_GraphInfo', template: DSL_Component, param: { g, figure: 'File', isFromLinkable: false, isToLinkable: false, hasTag: false, hasType: false, canAddProperties: false, hasUnit: false, hasInputs: false, hasOutputs: false } },\\n    ],\\n\\n    //-----------------------------------\\n    // Define DSL Models Node Elements\\n    //-----------------------------------\\n    dataNodeList:[\\n      {\\n        category: 'CodeFlow_Merge',\\n        color: 'white', \\n        in: [ \\n          { portId:'in0' },\\n          { portId:'in1' },\\n        ],\\n        out: [ \\n          { portId:'out' },\\n        ],\\n      },\\n      {\\n        label: 'Common Code',\\n        category: 'CodeFlow_Library',\\n        size: '180 100',\\n        color: 'orange',\\n        isFile: true,\\n        fileTypeName: 'Javascript',\\n        fileType: 'text/javascript',\\n      },\\n      {\\n        label: 'Source Code',\\n        category: 'CodeFlow_CodeIn',\\n        size: '180 100',\\n        color: 'orange', \\n        rows: [\\n        ],\\n        in: [ \\n          { portId:'in0' },\\n          { portId:'in1' },\\n        ],\\n        out: [ \\n          { portId:'out' },\\n        ],\\n        'isFile': true,\\n        'fileTypeName': 'Javascript',\\n        'fileType': 'text/javascript',\\n      },\\n      {\\n        label: 'Source Code',\\n        category: 'CodeFlow_Code',\\n        size: '180 100',\\n        color: 'orange', \\n        rows: [\\n        ],\\n        in: [ \\n          { portId:'in0' },\\n          { portId:'in1' },\\n        ],\\n        out: [ \\n          { portId:'out' },\\n        ],\\n        'isFile': true,\\n        'fileTypeName': 'Javascript',\\n        'fileType': 'text/javascript',\\n      },\\n      {\\n        category: 'CodeFlow_Demultiplexer',\\n        color: 'lightseagreen', \\n        in: [ \\n          { portId:'in' },\\n        ],\\n        out: [ \\n          { portId:'out1' },\\n          { portId:'out2' },\\n        ],\\n      },\\n      {\\n        label: 'Bus',\\n        category: 'CodeFlow_Bus',\\n        size: '35 35',\\n        color: 'lightseagreen',\\n      },\\n      {\\n        category: 'CodeFlow_Multiplexer',\\n        color: 'lightseagreen', \\n        in: [ \\n          { portId:'in0' },\\n          { portId:'in1' },\\n        ],\\n        out: [ \\n          { portId:'out' },\\n        ],\\n      },\\n      {\\n        label: 'Operator',\\n        category: 'CodeFlow_OperatorIn',\\n        size: '180 100',\\n        color: 'orange', \\n        in: [ \\n          { portId:'in' },\\n        ],\\n        out: [ \\n          { portId:'out' },\\n        ],\\n        'isFile': true,\\n        'fileContent': '',\\n        'fileTypeName': 'Javascript',\\n        'fileType': 'text/javascript',\\n      },\\n      {\\n        label: 'Operator',\\n        category: 'CodeFlow_Operator',\\n        size: '180 100',\\n        color: 'orange', \\n        in: [ \\n          { portId:'in' },\\n        ],\\n        out: [ \\n          { portId:'out' },\\n        ],\\n        'isFile': true,\\n        'fileContent': '',\\n        'fileTypeName': 'Javascript',\\n        'fileType': 'text/javascript',\\n      },\\n      {\\n        label: 'Release/Version',\\n        category: 'CodeFlow_FeatureOnOff',\\n        size: '180 40',\\n        color: 'RebeccaPurple',\\n        buttons: [\\n          {name: '', checked: false, color: 'green'},\\n        ],\\n      },\\n      {\\n        label: 'Feature',\\n        category: 'CodeFlow_Feature',\\n        size: '180 40',\\n        color: 'RebeccaPurple', \\n      },\\n      {\\n        label: 'Label',\\n        category: 'CodeFlow_Button',\\n        size: '180 40',\\n        color: 'YellowGreen', \\n        buttons: [\\n          {name: 'Deploy', checked: false},\\n        ],\\n        rows: [\\n          { name: 'path', value: 'value1' },\\n        ],\\n        'isFile': true,\\n        'fileContent': nodeButtonFileContent,\\n        'fileTypeName': 'Javascript',\\n        'fileType': 'text/javascript',\\n      },\\n      {\\n        label: 'Label',\\n        category: 'CodeFlow_Button',\\n        size: '180 40',\\n        color: 'YellowGreen', \\n        buttons: [\\n          {name: 'Run', checked: false},\\n        ],\\n        'isFile': true,\\n        'fileContent': nodeButtonFileContent,\\n        'fileTypeName': 'Javascript',\\n        'fileType': 'text/javascript',\\n      },\\n      {\\n        label: 'Label',\\n        category: 'CodeFlow_Button',\\n        size: '180 40',\\n        color: 'YellowGreen', \\n        buttons: [\\n          {name: 'Generate', checked: false},\\n        ],\\n        'isFile': true,\\n        'fileContent': nodeButtonFileContent,\\n        'fileTypeName': 'Javascript',\\n        'fileType': 'text/javascript',\\n      },\\n      {\\n        label: 'Parameters',\\n        category: 'CodeFlow_Param',\\n        size: '180 40',\\n        color: 'SandyBrown',\\n        rows: [\\n          { name: 'Name1', value: 'value1' },\\n          { name: 'Name2', value: 'value2' },\\n        ],\\n      },\\n      {\\n        label: 'Graph Info',\\n        category: 'Hierarchy_GraphInfo',\\n        size: '180 40',\\n        color: 'SkyBlue',\\n        rows: [\\n          { name: 'Name', value: 'tbd' },\\n          { name: 'Version', value: '1.0' },\\n          { name: 'Date', value: '@getDate()' },\\n          { name: 'Path', value: './' },\\n          { name: 'Authors', value: 'Frankonello' },\\n        ],\\n      },\\n\\n    ],\\n\\n    //-----------------------------------\\n    // Define DSL Models Group Elements\\n    //-----------------------------------\\n    templateGroupList:[\\n    ],\\n    dataGroupList:[\\n    ],\\n    \\n    //-----------------------------------\\n    // Define DSL Models Link Elements\\n    //-----------------------------------\\n    templateLinkList:[\\n      { category: 'CodeFlow_Button', template: DSL_BasicLink, param: { g, stroke: 'YellowGreen', strokeWidth: '4' } },\\n      { category: 'CodeFlow_Feature', template: DSL_BasicLink, param: { g, stroke: 'RebeccaPurple', strokeWidth: '4', toArrow: 'standard', toScale: '2', toShortLength: '10' } },\\n      { category: 'CodeFlow_Code', template: DSL_BasicLink, param: { g, strokeWidth: '4' } },\\n    ],\\n    dataLinkList:[\\n      {\\n        category: 'CodeFlow_Button',\\n        fromPort: '',\\n        toPort: '',\\n      },\\n      {\\n        category: 'CodeFlow_Feature',\\n        fromPort: '',\\n        toPort: '',\\n      },\\n      {\\n        category: 'CodeFlow_Code',\\n        fromPort: '',\\n        toPort: '',\\n      },\\n    ],\\n  };\\n\\n  // Return DSL data\\n  return( dsl );\\n}\",\"editorPosition\":[1793,336,841,1854]},\n{\"label\":\",\",\"category\":\"CodeFlow_Merge\",\"color\":\"white\",\"rows\":[],\"in\":[{\"portId\":\"in0\"},{\"portId\":\"in1\"},{\"portId\":\"in2\"},{\"portId\":\"in3\"},{\"portId\":\"in4\"},{\"portId\":\"in5\"},{\"portId\":\"in6\"},{\"portId\":\"in7\"},{\"portId\":\"in8\"},{\"portId\":\"in9\"},{\"portId\":\"in10\"},{\"portId\":\"in11\"},{\"portId\":\"in12\"},{\"portId\":\"in13\"},{\"portId\":\"in14\"},{\"portId\":\"in15\"}],\"out\":[{\"portId\":\"out\"}],\"key\":29,\"location\":\"-1860 955.0308474983078\",\"group\":67},\n{\"label\":\",\",\"category\":\"CodeFlow_Merge\",\"color\":\"white\",\"rows\":[],\"in\":[{\"portId\":\"in0\"},{\"portId\":\"in1\"},{\"portId\":\"in2\"},{\"portId\":\"in3\"},{\"portId\":\"in4\"},{\"portId\":\"in5\"},{\"portId\":\"in6\"},{\"portId\":\"in7\"},{\"portId\":\"in8\"},{\"portId\":\"in9\"},{\"portId\":\"in10\"},{\"portId\":\"in11\"},{\"portId\":\"in12\"},{\"portId\":\"in13\"}],\"out\":[{\"portId\":\"out\"}],\"key\":31,\"location\":\"-2540 -424.9691525016922\",\"group\":67},\n{\"label\":\"Code Generation\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":18,\"location\":\"-2260 -880\"},\n{\"label\":\"Context Menu\",\"category\":\"CodeFlow_Code\",\"size\":\"180 100\",\"color\":\"orange\",\"rows\":[],\"in\":[],\"out\":[{\"portId\":\"definition\"},{\"portId\":\"reference\"}],\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":21,\"location\":\"-1974.477152501692 -394.7691525016921\",\"fileContent\":\"//[# Begin definition #]\\r\\nconst cm = g.contextMenu;\\r\\ncm.add( menuDSL, 'fileTypeMenu' );\\r\\n\\r\\nconst fileTypeContextMenu = cm.getMenu( 'fileTypeMenu' );\\r\\n//[# End definition #]\",\"group\":67},\n{\"label\":\"\",\"category\":\"CodeFlow_Merge\",\"color\":\"white\",\"rows\":[],\"in\":[{\"portId\":\"in0\"},{\"portId\":\"in1\"},{\"portId\":\"in2\"},{\"portId\":\"in3\"}],\"out\":[{\"portId\":\"out\"}],\"key\":23,\"location\":\"-1580 -184.76915250169208\",\"group\":67},\n{\"label\":\"DSL Documentation\",\"size\":\"150 100\",\"category\":\"Hierarchy_FolderContent\",\"fileType\":\"text/json\",\"isDir\":true,\"fileURL\":\"\",\"key\":34,\"location\":\"-2640 -920\"},\n{\"label\":\"Event Listeners\",\"category\":\"CodeFlow_Code\",\"size\":\"180 100\",\"color\":\"orange\",\"rows\":[],\"in\":[],\"out\":[{\"portId\":\"out\"}],\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":27,\"location\":\"-1974.477152501692 -254.76915250169208\",\"fileContent\":\"//[# Begin out #]\\r\\n//-----------------------\\r\\n// Event Listener\\r\\n//-----------------------\\r\\n\\r\\nturnOnVisibitityOfButtonsProxy = function(evt) {\\r\\n  turnOnVisibitityOfButtons(evt,diagram);\\r\\n}\\r\\nturnOffVisibitityOfButtonsProxy = function(evt) {\\r\\n  turnOffVisibitityOfButtons(evt,diagram);\\r\\n}\\r\\n//[# End out #]\",\"group\":67},\n{\"label\":\"Connectivity Rules\",\"category\":\"CodeFlow_Code\",\"size\":\"180 100\",\"color\":\"orange\",\"rows\":[],\"in\":[],\"out\":[{\"portId\":\"out\"}],\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":33,\"location\":\"-1974.477152501692 -114.76915250169209\",\"fileContent\":\"//[# Begin out #]\\r\\n// Connectivity rules\\r\\nif( diagram ) {\\r\\n  diagram.addDiagramListener( 'LinkDrawn',\\r\\n    function(evt) {\\r\\n      const linkCategory = {\\r\\n        Code: {\\r\\n          Code:         'CodeFlow_Code',\\r\\n          Feature:      'x',\\r\\n          Button:       'x',\\r\\n          File:         'CodeFlow_Code',\\r\\n          Bus:          'CodeFlow_Code',\\r\\n          in:           'x',\\r\\n        },\\r\\n        Feature: {\\r\\n          Code:         'x',\\r\\n          Feature:      'CodeFlow_Feature',\\r\\n          Button:       'x',\\r\\n          File:         'CodeFlow_Feature',\\r\\n          Bus:          'x',\\r\\n          in:           'x',\\r\\n      },\\r\\n        Button: {\\r\\n          Code:         'x',\\r\\n          Feature:      'x',\\r\\n          Button:       'x',\\r\\n          File:         'CodeFlow_Button',\\r\\n          Bus:          'x',\\r\\n          in:           'x',\\r\\n        },\\r\\n        out: {\\r\\n          Code:         'x',\\r\\n          Feature:      'x',\\r\\n          Button:       'x',\\r\\n          File:         'CodeFlow_Code',\\r\\n          Bus:          'CodeFlow_Code',\\r\\n          in:           'x',\\r\\n        },\\r\\n        Bus: {\\r\\n          Code:         'x',\\r\\n          Feature:      'x',\\r\\n          Button:       'x',\\r\\n          File:         'x',\\r\\n          Bus:          'x',\\r\\n          in:           'CodeFlow_Code',\\r\\n        },\\r\\n      };\\r\\n      const link = evt.subject;\\r\\n      const diagram = evt.diagram;\\r\\n      const model = diagram.model;\\r\\n      const linkData = model.findLinkDataForKey( link.data.key );\\r\\n      const fromPort = linkData.fromPort;\\r\\n      const toPort = linkData.toPort;\\r\\n      const fromNode = link.fromNode;\\r\\n      //const fromNodeColor = fromNode.findObject(\\\"MAIN\\\").fill;\\r\\n      const fromNodeColor = fromNode.data.color;\\r\\n      const fromNodeCategory = fromNode.data.category;\\r\\n      console.log(fromNodeColor);\\r\\n      //if( (fromPort == 'out' && toPort != 'File') ) {\\r\\n      if( fromNodeCategory.startsWith( 'CodeFlow_' ) ) {\\r\\n        category = 'CodeFlow_Code';\\r\\n        diagram.startTransaction( 'set link category' );\\r\\n          //link.stroke = fromNodeColor;\\r\\n          model.setDataProperty( linkData, 'color', fromNodeColor );\\r\\n          model.setCategoryForLinkData( linkData, category );\\r\\n        diagram.commitTransaction('set link category');\\r\\n      }\\r\\n      else if( fromPort && linkCategory[fromPort] && toPort && linkCategory[fromPort][toPort] ) {\\r\\n        let category = linkCategory[fromPort][toPort];\\r\\n        if( category == 'x' ) {\\r\\n          diagram.startTransaction( 'delete link' );\\r\\n            diagram.remove(link);\\r\\n          diagram.commitTransaction('setLinkCategory');\\r\\n        } else {\\r\\n          diagram.startTransaction( 'set link category' );\\r\\n            model.setDataProperty( linkData, 'color', fromNodeColor );\\r\\n            model.setCategoryForLinkData( linkData, category );\\r\\n          diagram.commitTransaction('set link category');\\r\\n        }\\r\\n      } else {\\r\\n        //diagram.startTransaction( 'delete link' );\\r\\n        //  diagram.remove(link);\\r\\n        //diagram.commitTransaction('setLinkCategory');\\r\\n      }\\r\\n    }\\r\\n  );\\r\\n  diagram.addDiagramListener( 'ChangingSelection', turnOffVisibitityOfButtonsProxy );\\r\\n  diagram.addDiagramListener( 'ChangedSelection', turnOnVisibitityOfButtonsProxy );\\r\\n}\\r\\n//[# End out #]\",\"group\":67},\n{\"label\":\"Internal Buttons\",\"category\":\"CodeFlow_Code\",\"size\":\"180 100\",\"color\":\"orange\",\"rows\":[],\"in\":[],\"out\":[{\"portId\":\"out\"}],\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":36,\"location\":\"-1974.477152501692 25.23084749830791\",\"fileContent\":\"//[# Begin out #]\\r\\n// Internal button function to propagate checkbox status\\r\\nfunction featureOnOff( event, obj ) {\\r\\n  function swapColor( nodeData ) {\\r\\n    const partColor = nodeData.color;\\r\\n    const uncheckedColor = nodeData.buttons[0].color;\\r\\n    diagram.model.setDataProperty( nodeData, \\\"color\\\", uncheckedColor );\\r\\n    diagram.model.setDataProperty( nodeData.buttons[0], \\\"color\\\", partColor );\\r\\n    const groupList = diagram.findNodesByExample({ label: nodeData.label, isGroup: true });\\r\\n    if( groupList ) {\\r\\n      const it = groupList.iterator;\\r\\n      while( it.next() ) {\\r\\n        const node = it.value;\\r\\n        let groupColor = node.data.color;\\r\\n        let colorSwap = node.data.colorSwap;\\r\\n        if( !colorSwap ) {\\r\\n          colorSwap = groupColor;\\r\\n          groupColor = 'green';\\r\\n        } else {\\r\\n          const tmpColor = groupColor;\\r\\n          groupColor = colorSwap;\\r\\n          colorSwap = tmpColor;\\r\\n        }\\r\\n        diagram.model.setDataProperty( node.data, \\\"color\\\", groupColor );\\r\\n        diagram.model.setDataProperty( node.data, \\\"colorSwap\\\", colorSwap );\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  function propagateState( node, isChecked ) {\\r\\n    // Update status\\r\\n    if( node.data.buttons[0].checked != isChecked ) {\\r\\n      diagram.model.setDataProperty( node.data.buttons[0], 'checked', isChecked );\\r\\n      swapColor( node.data );\\r\\n    }\\r\\n\\r\\n    // Find all links in fanout and update their status\\r\\n    let nodeIterator = node.findNodesOutOf().iterator;\\r\\n    while (nodeIterator.next()) {\\r\\n      const node = nodeIterator.value;\\r\\n      propagateState( node, isChecked );\\r\\n    }\\r\\n  }\\r\\n  function uncheckAll( group ) {\\r\\n    const groupNode = diagram.findNodeForKey( group );\\r\\n    const it = groupNode.memberParts;\\r\\n    // Find all links in fanout and update their status\\r\\n    while (it.next()) {\\r\\n      const part = it.value;\\r\\n      if( it.value instanceof go.Node ) {\\r\\n        // part is a node\\r\\n        const nodeData = it.value.data;\\r\\n        if( nodeData.category.startsWith( 'CodeFlow_Feature' ) &&\\r\\n            nodeData.buttons[0].checked ) {\\r\\n          diagram.model.setDataProperty( nodeData.buttons[0], 'checked', false );\\r\\n          swapColor( nodeData );\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  const nodePart = obj.part;\\r\\n  //const diagram = nodePart.diagram;\\r\\n  const node = diagram.findNodeForKey( nodePart.key );\\r\\n  const nodeData = node.data;\\r\\n  diagram.startTransaction( \\\"Check Box\\\" );\\r\\n    const targetState = !obj.data.checked;\\r\\n    uncheckAll( nodeData.group );\\r\\n    if( targetState ) {\\r\\n      const isChecked = true;    \\r\\n      propagateState( node, isChecked );\\r\\n    }\\r\\n  diagram.commitTransaction( \\\"Check Box\\\" );\\r\\n};\\r\\n//[# End out #]\",\"group\":67,\"editorPosition\":[199,1640,736,744]},\n{\"label\":\"Parameters\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 40'\\ncolor: 'SandyBrown'\\nrows: [\\n  { name: 'Name1', value: 'value1' }\\n  { name: 'Name2', value: 'value2' }\\n]\"}],\"key\":41,\"location\":\"-2570 2259.708\",\"group\":67},\n{\"label\":\"Label\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 40',\\ncolor: 'YellowGreen', \\nbuttons: [\\n  {name: 'Generate', checked: false},\\n],\\n'isFile': true,\\n'fileContent': nodeButtonFileContent,\\n'fileTypeName': 'Javascript',\\n'fileType': 'text/javascript',\"}],\"key\":22,\"location\":\"-2570 2089.708\",\"group\":67},\n{\"label\":\"Label\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 40',\\ncolor: 'YellowGreen', \\nbuttons: [\\n  {name: 'Run', checked: false},\\n],\\n'isFile': true,\\n'fileContent': nodeButtonFileContent,\\n'fileTypeName': 'Javascript',\\n'fileType': 'text/javascript',\"}],\"key\":25,\"location\":\"-2570 1919.708\",\"group\":67},\n{\"label\":\"Label\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 40',\\ncolor: 'YellowGreen', \\nbuttons: [\\n  {name: 'Deploy', checked: false},\\n],\\nrows: [\\n  { name: 'path', value: 'value1' },\\n],\\n'isFile': true,\\n'fileContent': nodeButtonFileContent,\\n'fileTypeName': 'Javascript',\\n'fileType': 'text/javascript',\"}],\"key\":30,\"location\":\"-2570 1709.708\",\"group\":67},\n{\"label\":\"Feature\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 40',\\ncolor: 'RebeccaPurple', \"}],\"key\":38,\"location\":\"-2570 1629.708\",\"group\":67},\n{\"label\":\"Release/Version\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 40',\\ncolor: 'RebeccaPurple',\\nbuttons: [\\n  {name: '', checked: false, color: 'green'},\\n],\"}],\"key\":40,\"location\":\"-2570 1509.708\",\"group\":67},\n{\"label\":\"Operator\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 100',\\ncolor: 'orange', \\nin: [ \\n  { portId:'in' },\\n],\\nout: [ \\n  { portId:'out' },\\n],\\n'isFile': true,\\n'fileContent': '',\\n'fileTypeName': 'Javascript',\\n'fileType': 'text/javascript',\"}],\"key\":46,\"location\":\"-2570 1299.708\",\"group\":67},\n{\"label\":\"Operator\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 100',\\ncolor: 'orange', \\nin: [ \\n  { portId:'in' },\\n],\\nout: [ \\n  { portId:'out' },\\n],\\n'isFile': true,\\n'fileContent': '',\\n'fileTypeName': 'Javascript',\\n'fileType': 'text/javascript',\"}],\"key\":48,\"location\":\"-2570 1089.708\",\"group\":67},\n{\"label\":\"\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"color: 'lightseagreen', \\nin: [ \\n  { portId:'in0' },\\n  { portId:'in1' },\\n],\\nout: [ \\n  { portId:'out' },\\n],\"}],\"key\":53,\"location\":\"-2570 929.708\",\"group\":67},\n{\"label\":\"Bus\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '35 35',\\ncolor: 'lightseagreen',\"}],\"key\":54,\"location\":\"-2570 849.708\",\"group\":67},\n{\"label\":\"\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"color: 'lightseagreen', \\nin: [ \\n  { portId:'in' },\\n],\\nout: [ \\n  { portId:'out1' },\\n  { portId:'out2' },\\n],\"}],\"key\":55,\"location\":\"-2570 689.708\",\"group\":67},\n{\"label\":\"Source Code\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 100',\\ncolor: 'orange', \\nrows: [\\n],\\nin: [ \\n  { portId:'in0' },\\n  { portId:'in1' },\\n],\\nout: [ \\n  { portId:'out' },\\n],\\n'isFile': true,\\n'fileTypeName': 'Javascript',\\n'fileType': 'text/javascript',\"}],\"key\":62,\"location\":\"-2570 449.70799999999997\",\"group\":67},\n{\"label\":\"Source Code\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 100',\\ncolor: 'orange', \\nrows: [\\n],\\nin: [ \\n  { portId:'in0' },\\n  { portId:'in1' },\\n],\\nout: [ \\n  { portId:'out' },\\n],\\n'isFile': true,\\n'fileTypeName': 'Javascript',\\n'fileType': 'text/javascript',\"}],\"key\":63,\"location\":\"-2570 209.70799999999997\",\"group\":67},\n{\"label\":\"Common Code\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"size: '180 100'\\ncolor: 'orange' \\nisFile: true\\nfileTypeName: 'Javascript'\\nfileType: 'text/javascript'\"}],\"key\":64,\"location\":\"-2570 89.70799999999997\",\"group\":67},\n{\"label\":\"\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"fromPort: '',\\ntoPort: '',\"}],\"key\":71,\"location\":\"-2560 2929.708\",\"group\":67},\n{\"label\":\"CodeFlow_Code\",\"category\":\"DSL_BasicLink\",\"size\":\"350 60\",\"rows\":[{\"name\":\"LINK SHAPE\",\"value\":\"\\n\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"4\",\"valueChanged\":true},{\"name\":\"strokeDashArray\",\"value\":\"\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"isResegmentable\",\"value\":\"true\"},{\"name\":\"jump\",\"value\":\"JumpGap\"},{\"name\":\"FROM END\",\"value\":\"\\n\"},{\"name\":\"fromArrow\",\"value\":\"\"},{\"name\":\"fromScale\",\"value\":\"1\"},{\"name\":\"fromShortLength\",\"value\":\"0\"},{\"name\":\"isRelinkableFrom\",\"value\":\"true\"},{\"name\":\"TO END\",\"value\":\"\\n\"},{\"name\":\"toArrow\",\"value\":\"\"},{\"name\":\"toScale\",\"value\":\"1\"},{\"name\":\"toShortLength\",\"value\":\"0\"},{\"name\":\"isRelinkableTo\",\"value\":\"true\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":73,\"location\":\"-3310 2739.708\",\"group\":67},\n{\"label\":\"CodeFlow_Feature\",\"category\":\"DSL_BasicLink\",\"size\":\"350 60\",\"rows\":[{\"name\":\"LINK SHAPE\",\"value\":\"\\n\"},{\"name\":\"stroke\",\"value\":\"RebeccaPurple\",\"valueChanged\":true},{\"name\":\"strokeWidth\",\"value\":\"4\",\"valueChanged\":true},{\"name\":\"strokeDashArray\",\"value\":\"\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"isResegmentable\",\"value\":\"true\"},{\"name\":\"jump\",\"value\":\"JumpGap\"},{\"name\":\"FROM END\",\"value\":\"\\n\"},{\"name\":\"fromArrow\",\"value\":\"\"},{\"name\":\"fromScale\",\"value\":\"1\"},{\"name\":\"fromShortLength\",\"value\":\"0\"},{\"name\":\"isRelinkableFrom\",\"value\":\"true\"},{\"name\":\"TO END\",\"value\":\"\\n\"},{\"name\":\"toArrow\",\"value\":\"standard\",\"valueChanged\":true},{\"name\":\"toScale\",\"value\":\"2\",\"valueChanged\":true},{\"name\":\"toShortLength\",\"value\":\"10\",\"valueChanged\":true},{\"name\":\"isRelinkableTo\",\"value\":\"true\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":75,\"location\":\"-3310 2669.708\",\"group\":67},\n{\"label\":\"CodeFlow_Button\",\"category\":\"DSL_BasicLink\",\"size\":\"350 60\",\"rows\":[{\"name\":\"LINK SHAPE\",\"value\":\"\\n\"},{\"name\":\"stroke\",\"value\":\"YellowGreen\",\"valueChanged\":true},{\"name\":\"strokeWidth\",\"value\":\"4\",\"valueChanged\":true},{\"name\":\"strokeDashArray\",\"value\":\"\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"isResegmentable\",\"value\":\"true\"},{\"name\":\"jump\",\"value\":\"JumpGap\"},{\"name\":\"FROM END\",\"value\":\"\\n\"},{\"name\":\"fromArrow\",\"value\":\"\"},{\"name\":\"fromScale\",\"value\":\"1\"},{\"name\":\"fromShortLength\",\"value\":\"0\"},{\"name\":\"isRelinkableFrom\",\"value\":\"true\"},{\"name\":\"TO END\",\"value\":\"\\n\"},{\"name\":\"toArrow\",\"value\":\"\"},{\"name\":\"toScale\",\"value\":\"1\"},{\"name\":\"toShortLength\",\"value\":\"0\"},{\"name\":\"isRelinkableTo\",\"value\":\"true\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":77,\"location\":\"-3310 2599.708\",\"group\":67},\n{\"label\":\"\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"fromPort: '',\\ntoPort: '',\"}],\"key\":78,\"location\":\"-2560 2849.708\",\"group\":67},\n{\"label\":\"\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"fromPort: '',\\ntoPort: '',\"}],\"key\":79,\"location\":\"-2560 2769.708\",\"group\":67},\n{\"label\":\",\",\"category\":\"CodeFlow_Merge\",\"color\":\"white\",\"rows\":[],\"in\":[{\"portId\":\"in0\"},{\"portId\":\"in1\"},{\"portId\":\"in3\"}],\"out\":[{\"portId\":\"out\"}],\"key\":81,\"location\":\"-2020 2865.030847498308\",\"group\":67},\n{\"label\":\",\",\"category\":\"CodeFlow_Merge\",\"color\":\"white\",\"rows\":[],\"in\":[{\"portId\":\"in0\"},{\"portId\":\"in1\"},{\"portId\":\"in3\"}],\"out\":[{\"portId\":\"out\"}],\"key\":82,\"location\":\"-2390 2675.130847498308\",\"group\":67},\n{\"label\":\"\",\"category\":\"DSL_Data\",\"size\":\"340 40\",\"in\":[{\"portId\":\"category\"}],\"out\":[{\"portId\":\"json\"}],\"rows\":[{\"name\":\"color: 'white', \\nin: [ \\n  { portId:'in0' },\\n  { portId:'in1' },\\n],\\nout: [ \\n  { portId:'out' },\\n],\"}],\"key\":85,\"location\":\"-2570 -70.39200000000005\",\"group\":67},\n{\"label\":\"Version 1.0\",\"category\":\"CodeFlow_FeatureOnOff\",\"size\":\"180 40\",\"color\":\"green\",\"buttons\":[{\"name\":\"\",\"checked\":true,\"color\":\"RebeccaPurple\"}],\"key\":65,\"location\":\"-2210 -827.5\",\"group\":18},\n{\"label\":\"DSL\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":67,\"color\":\"green\",\"colorSwap\":\"gray\",\"location\":\"-3730 1208.511074139779\"},\n{\"label\":\"DSL\",\"category\":\"CodeFlow_Feature\",\"size\":\"180 40\",\"color\":\"green\",\"buttons\":[{\"name\":\"\",\"checked\":true,\"color\":\"RebeccaPurple\"}],\"key\":72,\"location\":\"-1980 -827.5\",\"group\":18},\n{\"label\":\"Hierarchy_GraphInfo\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"File\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\",\"valueChanged\":true},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"minSize\",\"value\":\"40 40\"},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"\"},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Bottom\"},{\"name\":\"isToLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"center\"},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"type\",\"value\":\"\"},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"true\"},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"true\"},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":76,\"location\":\"-3710 1570\",\"group\":67},\n{\"label\":\"CodeFlow_Param\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"BendedLeftRight\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\",\"valueChanged\":true},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"minSize\",\"value\":\"40 40\"},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"\"},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Bottom\"},{\"name\":\"isToLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"center\"},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"type\",\"value\":\"\"},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"true\"},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"true\"},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":80,\"location\":\"-3710 1500\"},\n{\"label\":\"CodeFlow_Button\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"rectangle\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\"},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"minSize\",\"value\":\"40 40\"},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"\"},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Bottom\"},{\"name\":\"isToLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"left\",\"valueChanged\":true},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"type\",\"value\":\"\"},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"true\"},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"true\"},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"true\"},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"true\"},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":83,\"location\":\"-3710 1429.9\"},\n{\"label\":\"CodeFlow_Feature\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"rectangle\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\"},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"minSize\",\"value\":\"40 40\"},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"Feature\",\"valueChanged\":true},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Center\",\"valueChanged\":true},{\"name\":\"isToLinkable\",\"value\":\"true\"},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"White\",\"valueChanged\":true},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"left\",\"valueChanged\":true},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"type\",\"value\":\"\"},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"true\"},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"true\"},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":84,\"location\":\"-3710 1359.9\"},\n{\"label\":\"CodeFlow_FeatureOnOff\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"rectangle\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\"},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"minSize\",\"value\":\"40 40\"},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"Feature\",\"valueChanged\":true},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Center\",\"valueChanged\":true},{\"name\":\"isFromLinkable\",\"value\":\"true\"},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Center\",\"valueChanged\":true},{\"name\":\"isToLinkable\",\"value\":\"true\"},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"White\",\"valueChanged\":true},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"left\",\"valueChanged\":true},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"type\",\"value\":\"\"},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"true\"},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"true\",\"valueChanged\":true},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"true\",\"valueChanged\":true},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"White\",\"valueChanged\":true},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"featureOnOff\",\"valueChanged\":true},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"true\"},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":86,\"location\":\"-3710 1290\"},\n{\"label\":\"CodeFlow_Operator\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"SquareUShape\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\",\"valueChanged\":true},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"minSize\",\"value\":\"40 40\"},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"\"},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Bottom\"},{\"name\":\"isToLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"center\"},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"true\"},{\"name\":\"type\",\"value\":\"@fileTypeName\",\"valueChanged\":true},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"true\"},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"true\"},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"true\"},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":88,\"location\":\"-3710 1220\"},\n{\"label\":\"CodeFlow_OperatorIn\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"SquareUShape\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\",\"valueChanged\":\"true\"},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"minSize\",\"value\":\"40 40\"},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"\"},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Bottom\"},{\"name\":\"isToLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"center\"},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"true\"},{\"name\":\"type\",\"value\":\"@fileTypeName\",\"valueChanged\":\"true\"},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"true\"},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"true\"},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"true\"},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"true\",\"valueChanged\":true},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":89,\"location\":\"-3710 1150\"},\n{\"label\":\"CodeFlow_Multiplexer\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"rectangle\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\"},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"minSize\",\"value\":\"10 40\",\"valueChanged\":true},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"\"},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Bottom\"},{\"name\":\"isToLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"center\"},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"type\",\"value\":\"\"},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"true\"},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"true\"},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"true\"},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"true\"},{\"name\":\"canAddOutput\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":90,\"location\":\"-3710 1080\"},\n{\"label\":\"CodeFlow_Bus\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"Elipse\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\",\"valueChanged\":true},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"minSize\",\"value\":\"40 40\"},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"Bus\",\"valueChanged\":true},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Center\",\"valueChanged\":true},{\"name\":\"isFromLinkable\",\"value\":\"true\"},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Center\",\"valueChanged\":true},{\"name\":\"isToLinkable\",\"value\":\"true\"},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"center\"},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"type\",\"value\":\"\"},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"true\"},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\",\"valueChanged\":true},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"true\"},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":91,\"location\":\"-3710 1010\"},\n{\"label\":\"CodeFlow_Demultiplexer\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"rectangle\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\"},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"minSize\",\"value\":\"10 40\",\"valueChanged\":true},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"\"},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Bottom\"},{\"name\":\"isToLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"center\"},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"type\",\"value\":\"\"},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"true\"},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"true\"},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"true\"},{\"name\":\"canAddInput\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"true\"},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":92,\"location\":\"-3710 940\"},\n{\"label\":\"CodeFlow_Code\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"rectangle\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\"},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"minSize\",\"value\":\"40 40\"},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"\"},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Bottom\"},{\"name\":\"isToLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"center\"},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"true\"},{\"name\":\"type\",\"value\":\"@fileTypeName\",\"valueChanged\":true},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"typeMenu\",\"value\":\"fileTypeContextMenu\",\"valueChanged\":true},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"true\"},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"true\"},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"1\",\"valueChanged\":true},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"true\"},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":93,\"location\":\"-3710 869.9\"},\n{\"label\":\"CodeFlow_CodeIn\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"rectangle\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\"},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"minSize\",\"value\":\"40 40\"},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"\"},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Bottom\"},{\"name\":\"isToLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"center\"},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"true\"},{\"name\":\"type\",\"value\":\"@fileTypeName\",\"valueChanged\":\"true\"},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"typeMenu\",\"value\":\"fileTypeContextMenu\",\"valueChanged\":\"true\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"true\"},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"true\"},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"1\",\"valueChanged\":true},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"true\"},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"true\",\"valueChanged\":true},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":94,\"location\":\"-3710 800\"},\n{\"label\":\"CodeFlow_Library\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"rectangle\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\"},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"true\"},{\"name\":\"minSize\",\"value\":\"40 40\"},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"\"},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Bottom\"},{\"name\":\"isToLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"center\"},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"true\"},{\"name\":\"type\",\"value\":\"@fileTypeName\",\"valueChanged\":true},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"true\"},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"canAddOutput\",\"value\":\"true\"},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":95,\"location\":\"-3710 730\"},\n{\"label\":\"DSL Template File\",\"color\":\"orange\",\"size\":\"180 35\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"fileURL\":\"/fileServer/System/Templates/NameDSLTemplate.js\",\"key\":100,\"location\":\"-470 1430\"},\n{\"category\":\"DSL_CGButton\",\"size\":\"550 80\",\"buttons\":[{\"name\":\"Generate\",\"checked\":false}],\"isFile\":true,\"fileContent\":\"var event, obj, nodeData;\\n//console.log( 'NodeData Info: '+JSON.stringify( nodeData ) );\\n//console.log( 'Button Label: '+obj.data.name );\\n//console.log( 'Button Status: '+obj.data.checked );\\n\\n// Get main graph editor\\nconst g = m.e.getEditor( config.htmlDiv.graphDiv );\\n// Get current graph model\\nconst model = g.getJSONModel();\\nconst modelId = 'main';\\n\\n// Instantiate Model Explorer\\nconst me = new ModelExplorer();\\nme.setJSONModel( modelId, model );\\n\\n// Cache of all data generated or stored in the model\\nconst dataCache = {\\n  //'Header.body': ['Line1', 'Line2', ...],\\n  //'Style.url': ['http://styleServer.come/style.css'],\\n  // Missing entry => generate and add to cache\\n  // Then return the entry content\\n};\\n\\n/************************\\n * Utility functions\\n ************************/\\n// Filter nodes in disabled features as condition for \\\"me\\\" functions\\nfunction filterOutDisabledNodes (d) {\\n  return( !d.isGroup && ( !d.group || activeFeature.has( d.group ) ) ); \\n}\\nfunction isNumber( v ) {\\n  return( parseInt(v).toString() === v.toString() );\\n}\\nfunction getArrayOf( v ) {\\n   if( v instanceof String ) {\\n    return( v.split( '\\\\n' ) );\\n  } else if( Array.isArray( v ) ) {\\n    return( v );\\n  } else {\\n    return( [v] );\\n  }\\n}\\nfunction getId( nodeData, property ) {\\n  return( ( nodeData.label? nodeData.label: nodeData.key ) + ( property? '.'+ property: '' ) );\\n}\\nfunction parseInputPortName( portName ) {\\n  let value = '';\\n  let [name, reference] = portName.split( '@' );\\n  if( name.endsWith( '\\\\\\\\' ) ) {\\n    // Case of refValue containing a \\\\@ to avoid interpretation as reference\\n    // Example: emailServer: \\\\@gmail.com\\n    // Example: email: antonello\\\\@gmail.com\\n    // Remove the '\\\\'\\n    name = name.substing( name.length-1 );\\n    value = getArrayOf( name+'@'+reference );\\n    reference = '';\\n    name = '';\\n  }\\n  if( reference == undefined ) {\\n    reference = '';\\n  }\\n  return({ name, reference, value });\\n}\\n/************************\\n * DataCache functions\\n ************************/\\nfunction getCacheValue( id ) {\\n  let value = [''];\\n  const dValue = dataCache[id];\\n  if( dValue ) {\\n    // Case of ref being defined in the dataCache\\n    value = dValue;\\n  } else {\\n    // Case of ref being not defined in the dataCache\\n    // Split the reference into Name.property\\n    const [name, property] = id.split( '.' );\\n    if( name && property ) {\\n      if( libraryNameList.has( name ) ) {\\n        // Case of a javascript function \\n        eval( `value = getArrayOf( ${property} )` );\\n      } else {\\n        // Case of recursion\\n        value = getValueOfNode( name, property );\\n        setCacheValue( id, value );\\n      }\\n    } else if( name ) {\\n      value = getValueOfNode( name );\\n    } else {\\n      value = [`Error: could not resolve \\\"${id}\\\"`];\\n    }\\n  }\\n  return( value );\\n}\\nfunction setCacheValue( id, value ) {\\n  if( !dataCache.hasOwnProperty( id ) ) {\\n    dataCache[id] = value;\\n  }\\n}\\n/************************\\n * Generation functions\\n ************************/\\nfunction getFanInNodeValueList( nodeData, portName ) {\\n  let valueList = [];\\n  // Get node from fan in\\n  const linkList = me.getLinkListFanInByNodeKey( 'main', nodeData.key, portName );\\n  if( !linkList || linkList.length == 0 ) {\\n    const value = getValueOfRef( portName, {} ); // Provide {} as empty link\\n    // this is necessary to get an empty value in case the input is not connected\\n    // or connected to a disable node\\n    valueList.push( value );\\n  } else {\\n    for( const linkData of linkList ) {\\n      //const refValue = linkData.toPort;\\n      const refValue = linkData.fromPort;\\n      const value = getValueOfRef( refValue, linkData );\\n      if( value && value.length > 0 ) {\\n        valueList.push( value );\\n      }\\n    }\\n  }\\n  return( valueList );\\n}\\nfunction getGenerationValueFrom( nodeData, portName ) {\\n  let value = [];\\n  \\n  const valueList = getFanInNodeValueList( nodeData, portName );\\n  if( valueList && valueList.length == 1 ) {\\n    value = valueList[0];\\n  } else {\\n    if( !valueList || valueList.length == 0 ) {\\n      // Reference name is not found in the graph\\n      value = [];\\n    } else {\\n      // Reference name is used multiple time in the graph\\n      value = [`Error: Multiple source enalbled for \\\"${nodeData.label}.${portName}\\\"`];\\n    }\\n  }\\n  return( value );\\n}\\nfunction generateNode( nodeData, property ) {\\n  let value = [''];\\n  let id = '';\\n  \\n  switch( nodeData.category ) {\\n    case 'Hierarchy_CodeInGraph':\\n    case 'Hierarchy_CodeInFile':\\n      value = getGenerationValueFrom( nodeData, '' );\\n      nodeData.fileContent = value.join( '\\\\n' );\\n      // NOTE: then next function is async, but we don't handle \\n      // the callback for now\\n      saveNodeContent( nodeData );\\n      id = getId( nodeData );\\n      setCacheValue( id, value );\\n      break;\\n    case 'CodeFlow_Code':\\n      // Data model for node code generation\\n      let m = {};\\n      if( nodeData.in ) {\\n        for( const input of nodeData.in ) {\\n          const inValue = getGenerationValueFrom( nodeData, input.portId );\\n          const refInfo = parseInputPortName( input.portId );\\n          let funcName = 'Begin_'+refInfo.name.replaceAll( ' ', '_' );\\n          //m[funcName] = ()=> [inValue];\\n          // We put undefined in case the input is not connected\\n          m[funcName] = ()=> ( inValue.length == 0? undefined: inValue );\\n          funcName = 'Define_'+refInfo.name.replaceAll( ' ', '_' );\\n          //m[funcName] = ()=> [inValue];\\n          m[funcName] = ()=> ( inValue.length == 0? undefined: inValue );\\n          funcName = 'Insert_'+refInfo.name.replaceAll( ' ', '_' );\\n          m[funcName] = ()=> ( inValue.length == 0? undefined: inValue );\\n        }\\n      }\\n      if( nodeData.rows && ( nodeData.rows.length > 0 ) ) {\\n        let objData = {};\\n        for( const row of nodeData.rows ) {\\n          let pValue = getValueOfRef( row.value );\\n          if( Array.isArray( pValue ) && ( pValue.length > 0 ) ) {\\n            pValue = pValue[0];\\n          } else {\\n            pValue = '';\\n          }\\n          objData[row.name] = pValue;\\n        }\\n        funcName = 'Begin_Property';\\n        m[funcName] = ()=> objData;\\n        funcName = 'Define_Property';\\n        m[funcName] = ()=> objData;\\n      }\\n      // Get node template\\n      const templateSource = nodeData.fileContent;\\n      const templateLen = templateSource.length;\\n      // Get the output to be generated\\n      const outputName = property;\\n      // Create the template generator\\n      const tg = new TemplateGenerator( templateSource );\\n      const beginTag = `[# Begin ${outputName} #]`;\\n      const endTag = `[# End ${outputName} #]`;\\n      // Get output template and trim to first line indentation (true)\\n      const block = tg.extractNextLineBlock( true, beginTag, endTag );\\n      //const blockSrc = block.getTemplate();\\n      // Set template language\\n      const [format, language] = nodeData.fileType.split( '/' );\\n      block.setLanguage( language );\\n      block.setProperty( 'isKeepBlockOnNoData', true );\\n      // Execute code generation\\n      block.process( m );\\n      // Get output\\n      value = block.getOutput();\\n      //debug();\\n      break;\\n    case 'CodeFlow_Operator':\\n      let inOutValue = {};\\n      if( nodeData.in ) {\\n        for( const input of nodeData.in ) {\\n          const inValue = getGenerationValueFrom( nodeData, input.portId );\\n          const refInfo = parseInputPortName( input.portId );\\n          inOutValue[refInfo.name] = inValue.join( '\\\\n' );\\n        }\\n      }\\n      if( nodeData.rows ) {\\n        for( const row of nodeData.rows ) {\\n          const pValue = getValueOfRef( row.value );\\n          inOutValue[row.name] = pValue;\\n        }\\n      }\\n      if( nodeData.fileContent ) {\\n        const getPort = (name)=>{ return( inOutValue[name] ); };\\n        const setPort = (name, value)=>{ inOutValue[name] = value; };\\n        eval( nodeData.fileContent );\\n        if( nodeData.out ) {\\n          for( const output of nodeData.out ) {\\n            let oValue = inOutValue[output.portId];\\n            if( oValue ) {\\n              oValue = oValue.split( '\\\\n' );\\n            }\\n            if( property == output.portId ) {\\n              value = oValue;\\n            }\\n          }\\n        }\\n      }\\n      break;\\n    case 'CodeFlow_Merge':\\n      value = [];\\n      const sep = ( nodeData.label? nodeData.label[0]: '' );\\n      if( nodeData.in ) {\\n        for( const input of nodeData.in ) {\\n          const inValue = getGenerationValueFrom( nodeData, input.portId );\\n          const i = inValue.length-1;\\n          if( i >= 0 ) {\\n            inValue[i] = inValue[i] + sep;\\n          }\\n          value = value.concat( inValue );\\n        }\\n      }\\n      break;\\n    case 'CodeFlow_Param':\\n    case 'Hierarchy_GraphInfo':\\n      if( nodeData.rows ) {\\n        for( const row of nodeData.rows ) {\\n          const pValue = getValueOfRef( row.value );\\n          if( row.name == property ) {\\n            value = pValue;\\n          }\\n        }\\n      }\\n      break;\\n    case 'DSL_Data':\\n      value = this[`${nodeData.category}_get`]( nodeData );\\n      // Add inputs\\n      if( nodeData.in ) {\\n        for( const input of nodeData.in ) {\\n          const inKey = input.portId;\\n          const inValue = getGenerationValueFrom( nodeData, inKey );\\n          // Add new key/values\\n          if( inValue.length > 0 ) {\\n            inValue[0] = `  ${inKey}: ${inValue[0]},`;\\n            value.splice( 1, 0, ...inValue );\\n          }\\n        }\\n      }\\n      // Add label\\n      if( nodeData.label ) {\\n        value.splice( 1, 0, `  label: '${nodeData.label}',` );\\n      }\\n      break;\\n    case 'DSL_Component':\\n    case 'DSL_BasicNode':\\n    case 'DSL_Picture':\\n    case 'DSL_BasicLink':\\n      value = this[`${nodeData.category}_get`]( nodeData, property );\\n      break;\\n  }\\n  return( value );\\n}\\nfunction getValueOfNode( name, property ) {\\n  let value = [''];\\n  let nodeData = null;\\n  \\n  if( isNumber( name ) ) {\\n    // If name is a node key ==> get the node by key\\n    nodeData = me.getNodeByFieldName( 'main', 'key', [name], filterOutDisabledNodes );\\n  } else {\\n    // Find component with label = name\\n    const nodeDataList = me.getNodeListByFieldNameList( 'main', 'label', [name], filterOutDisabledNodes );\\n    if( nodeDataList && nodeDataList.length == 1 ) {\\n      // A unique node is found with this name\\n      nodeData = nodeDataList[0];\\n    } else {\\n      if( !nodeDataList || nodeDataList.length == 0 ) {\\n        // Reference name is not found in the graph\\n        value = [`Error: Reference name \\\"${name}\\\" is not a node in the graph`];\\n      } else {\\n        // Reference name is used multiple time in the graph\\n        value = [`Error: Reference name \\\"${name}\\\" is a label for multiple nodes in the graph`];\\n      }\\n    }\\n  }\\n  // If we found a node\\n  if( nodeData ) {\\n    value = generateNode( nodeData, property );\\n  }\\n  return( value );\\n}\\nfunction getValueOfRef( refValue, linkData ) {\\n  let value = [];\\n  \\n  const refInfo = parseInputPortName( refValue );\\n  if( ( refInfo.reference == '' ) && \\n      ( refInfo.name == '' ) && \\n      ( refInfo.value ) ) {\\n    // Case of refValue containing a \\\\@ to avoid interpretation as reference\\n    // Example: emailServer: \\\\@gmail.com\\n    // Example: email: antonello\\\\@gmail.com\\n    // Remove the '\\\\'\\n    value = refInfo.value;\\n  } else if( refInfo.reference ) {\\n    // Case of refValue being a reference\\n    // Remove the '@'\\n    const id = refInfo.reference;\\n    value = getCacheValue( id );\\n  } else {\\n    // Case of refValue being a value like string, array or number\\n    if( linkData ) {\\n      // Get all nodes connected to the nodeData\\n      const fromKey = linkData.from;\\n      const fromPort = linkData.fromPort;\\n      const nodeData = me.getNodeByFieldName( 'main', 'key', fromKey, filterOutDisabledNodes );\\n      if( nodeData ) {\\n        const id = getId( nodeData, fromPort );\\n        value = getCacheValue( id );\\n        //value = getGenerationValueFrom( nodeData, fromPort );\\n      } else {\\n        // We do nothing, because the node is not in an enabled feature\\n      }\\n    } else {\\n      value = getArrayOf( refValue );\\n    }\\n  }\\n  return( value );\\n}\\nfunction generateStartNode( nodeData ) {\\n  generateNode( nodeData );\\n}\\n\\n/************************\\n * Setup functions\\n ************************/\\n// Detect all active features\\nvar activeFeature = new Set();\\nconst featureList = me.getNodeListByFieldNameList( 'main', 'category', ['CodeFlow_Feature'] );\\nfor( const feature of featureList ) {\\n  if( feature.buttons[0].checked ) {\\n    // We get here all enabled groups (green titla backgound)\\n    const groupData = me.getNodeByFieldName( 'main', 'label', feature.label, (d)=> d.isGroup == true );\\n    if( groupData ) {\\n      activeFeature.add( groupData.key );\\n    }\\n  }\\n}\\n// Load all libraries for code generation\\nconst libraryNodeList = me.getNodeListByFieldNameList( 'main', 'category', ['CodeFlow_Library'], filterOutDisabledNodes );\\nlet libraryNameList = new Set( ['javascript' ] );\\nfor( const libraryNode of libraryNodeList ) {\\n  // Add the library to the available libraries\\n  libraryNameList.add( libraryNode.label );\\n  // If library has JavaScript code, we load it\\n  if( libraryNode.fileContent ) {\\n    eval( libraryNode.fileContent );\\n  }\\n}\\n/************************\\n * Property caching functions\\n ************************/\\n// Cache all name/value pairs from CodeFlow_Param nodes\\nconst paramNodeList = me.getNodeListByFieldNameList( 'main', 'category', ['CodeFlow_Param', 'Hierarchy_GraphInfo'], filterOutDisabledNodes );\\nfor( const paramNode of paramNodeList ) {\\n  if( nodeData.rows ) {\\n    for( const row of paramNode.rows ) {\\n      const value = getValueOfRef( row.value );\\n    }\\n  }\\n}\\ndebugger;\\n/************************\\n * Start generation\\n ************************/\\n// Detect starting nodes for code generation\\nconst categoryList = ['Hierarchy_CodeInGraph','Hierarchy_CodeInFile'];\\nconst startNodeList = me.getNodeListByFieldNameList( 'main', 'category', categoryList, filterOutDisabledNodes );\\nfor( const startNode of startNodeList ) {\\n  generateStartNode( startNode );\\n}\\nconsole.log( dataCache );\\n\\n\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":87,\"location\":\"-1390 -880\",\"label\":\"Old Version1 - Pressing this button will generate the DSL based on the selected features\",\"editorPosition\":[1841,62,804,2126]},\n{\"label\":\"CodeFlow_Merge\",\"category\":\"DSL_Component\",\"size\":\"350 60\",\"rows\":[{\"name\":\"NODE SHAPE\",\"value\":\"\\n\"},{\"name\":\"figure\",\"value\":\"rectangle\",\"valueMenu\":\"figureMenu\",\"isEditable\":false,\"font\":\"italic 13px sans-serif\"},{\"name\":\"fill\",\"value\":\"white\"},{\"name\":\"stroke\",\"value\":\"Black\"},{\"name\":\"strokeWidth\",\"value\":\"1\"},{\"name\":\"isResizable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"minSize\",\"value\":\"10 40\",\"valueChanged\":true},{\"name\":\"maxSize\",\"value\":\"NaN NaN\"},{\"name\":\"portId\",\"value\":\"\"},{\"name\":\"NODE INPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"fromSpot\",\"value\":\"Bottom\"},{\"name\":\"isFromLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isFromLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isFromLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"fromMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE OUTPUT CONNECTIVITY\",\"value\":\"\\n\"},{\"name\":\"toSpot\",\"value\":\"Bottom\"},{\"name\":\"isToLinkable\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isToLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isToLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"ToMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"NODE LABEL\",\"value\":\"\\n\"},{\"name\":\"label\",\"value\":\"\"},{\"name\":\"labelStroke\",\"value\":\"Black\"},{\"name\":\"isLabelEditable\",\"value\":\"true\"},{\"name\":\"isLabelMultiline\",\"value\":\"true\"},{\"name\":\"labelTextAlign\",\"value\":\"center\"},{\"name\":\"labelFont\",\"value\":\"18px sans-serif\"},{\"name\":\"labelMargin\",\"value\":\"0\"},{\"name\":\"labelVerticalAlignment\",\"value\":\"center\"},{\"name\":\"labelHorizontalAlignment\",\"value\":\"center\"},{\"name\":\"NODE TAG\",\"value\":\"\\n\"},{\"name\":\"hasTag\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"tag\",\"value\":\"\"},{\"name\":\"tagStroke\",\"value\":\"Black\"},{\"name\":\"tagFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTagEditable\",\"value\":\"true\"},{\"name\":\"tagMenu\",\"value\":\"\"},{\"name\":\"NODE TYPE\",\"value\":\"\\n\"},{\"name\":\"hasType\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"type\",\"value\":\"\"},{\"name\":\"typeStroke\",\"value\":\"Black\"},{\"name\":\"typeFont\",\"value\":\"italic 10px sans-serif\"},{\"name\":\"isTypeEditable\",\"value\":\"true\"},{\"name\":\"typeMenu\",\"value\":\"\"},{\"name\":\"NODE BUTTONS\",\"value\":\"\\n\"},{\"name\":\"hasFunctionButtons\",\"value\":\"false\"},{\"name\":\"buttonInternalCallback\",\"value\":\"\"},{\"name\":\"isCheckBoxes\",\"value\":\"false\"},{\"name\":\"buttonMinSize\",\"value\":\"NaN 20\"},{\"name\":\"buttonMaxSize\",\"value\":\"NaN NaN\"},{\"name\":\"buttonMargin\",\"value\":\"2\"},{\"name\":\"buttonFill\",\"value\":\"lightGray\"},{\"name\":\"buttonStroke\",\"value\":\"Black\"},{\"name\":\"buttonFont\",\"value\":\"13px sans-serif\"},{\"name\":\"buttonInternalCallback\",\"value\":\"runGraphFile\"},{\"name\":\"NODE SELECTION\",\"value\":\"\\n\"},{\"name\":\"selectFill\",\"value\":\"dodgerblue\"},{\"name\":\"NODE PROPERTIES\",\"value\":\"\\n\"},{\"name\":\"hasProperties\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isPropertiesDynamic\",\"value\":\"false\"},{\"name\":\"canAddProperties\",\"value\":\"true\"},{\"name\":\"itemFill\",\"value\":\"White\"},{\"name\":\"itemMinSize\",\"value\":\"150 1\"},{\"name\":\"separatorStroke\",\"value\":\"Gray\"},{\"name\":\"KEY PROPERTY\",\"value\":\"\\n\"},{\"name\":\"keyFont\",\"value\":\"bold 13px sans-serif\"},{\"name\":\"keyStroke\",\"value\":\"Black\"},{\"name\":\"isKeyEditable\",\"value\":\"true\"},{\"name\":\"VALUE PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasValue\",\"value\":\"true\"},{\"name\":\"valueStroke\",\"value\":\"Black\"},{\"name\":\"valueFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isValueEditable\",\"value\":\"true\"},{\"name\":\"UNIT PROPERTY\",\"value\":\"\\n\"},{\"name\":\"hasUnit\",\"value\":\"true\"},{\"name\":\"unitStroke\",\"value\":\"Black\"},{\"name\":\"unitFont\",\"value\":\"13px sans-serif\"},{\"name\":\"isUnitEditable\",\"value\":\"true\"},{\"name\":\"NODE INPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasInputs\",\"value\":\"true\"},{\"name\":\"canAddInput\",\"value\":\"true\"},{\"name\":\"isInputLinkable\",\"value\":\"true\"},{\"name\":\"isInputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isInputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"inputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isInputEditable\",\"value\":\"true\"},{\"name\":\"inputTextAlign\",\"value\":\"right\"},{\"name\":\"inputMenu\",\"value\":\"\"},{\"name\":\"NODE OUTPUT PORTS\",\"value\":\"\\n\"},{\"name\":\"hasOutputs\",\"value\":\"true\"},{\"name\":\"canAddOutput\",\"value\":\"false\",\"valueChanged\":true},{\"name\":\"isOutputLinkable\",\"value\":\"true\"},{\"name\":\"isOutputLinkableSelfNode\",\"value\":\"false\"},{\"name\":\"isOutputLinkableDuplicates\",\"value\":\"false\"},{\"name\":\"outputMaxLinks\",\"value\":\"Infinity\"},{\"name\":\"isOutputEditable\",\"value\":\"true\"},{\"name\":\"outputTextAlign\",\"value\":\"left\"},{\"name\":\"outputMenu\",\"value\":\"\"},{\"name\":\"PORTS\",\"value\":\"\\n\"},{\"name\":\"isPortInside\",\"value\":\"false\"},{\"name\":\"portStroke\",\"value\":\"Black\"},{\"name\":\"portFont\",\"value\":\"14px sans-serif\"}],\"out\":[{\"portId\":\"templateNode\"},{\"portId\":\"category\"}],\"key\":60,\"location\":\"-3710 660\",\"group\":67},\n{\"label\":\"Label\",\"category\":\"CodeFlow_Button\",\"color\":\"YellowGreen\",\"size\":\"180 40\",\"buttons\":[{\"name\":\"Deploy\",\"checked\":true}],\"rows\":[{\"name\":\"path\",\"value\":\"value1\"}],\"isFile\":true,\"fileContent\":\"var event, obj, nodeData;\\n  // Uncomment the next line to start debugging\\n  //debugger;\\nconsole.log( 'NodeData Info: '+JSON.stringify( nodeData ) );\\nconsole.log( 'Button Label: '+obj.data.name );\\nconsole.log( 'Button Status: '+obj.data.checked );\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":69,\"location\":\"-300 270\"}\n],\n  \"linkDataArray\": [\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in15\",\"from\":20,\"to\":29,\"points\":[-2183.3173828125,2389.708,-2173.3173828125,2389.708,-1917.46875,1105.0308474983078,-1907.46875,1105.0308474983078],\"key\":-2},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"dataNodeList\",\"from\":29,\"to\":19,\"points\":[-1779.5380859375,955.0308474983078,-1769.5380859375,955.0308474983078,-945.392578125,1335.230847498308,-935.392578125,1335.230847498308],\"key\":-6,\"color\":\"white\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"templateNodeList\",\"from\":31,\"to\":19,\"points\":[-2459.5380859375,-424.9691525016922,-2449.5380859375,-424.9691525016922,-945.392578125,1315.230847498308,-935.392578125,1315.230847498308],\"key\":-7,\"color\":\"white\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"\",\"from\":19,\"to\":24,\"points\":[-579.5380859375,1335.230847498308,-569.5380859375,1335.230847498308,-499.9977509274864,1328.6126838823523],\"key\":-8,\"color\":\"orange\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"dslCode\",\"from\":23,\"to\":19,\"points\":[-1499.5380859375,-184.76915250169208,-1489.5380859375,-184.76915250169208,-945.392578125,1295.230847498308,-935.392578125,1295.230847498308],\"key\":-9,\"color\":\"white\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"definition\",\"toPort\":\"in0\",\"from\":21,\"to\":23,\"points\":[-1714.332621251692,-404.7691525016921,-1704.332621251692,-404.7691525016921,-1629.6826171875,-214.76915250169208,-1619.6826171875,-214.76915250169208],\"key\":-10,\"color\":\"orange\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in1\",\"from\":27,\"to\":23,\"points\":[-1754.015238439192,-254.76915250169208,-1744.015238439192,-254.76915250169208,-1629.6826171875,-194.76915250169208,-1619.6826171875,-194.76915250169208],\"key\":-12,\"color\":\"orange\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in2\",\"from\":33,\"to\":23,\"points\":[-1754.015238439192,-114.76915250169208,-1744.015238439192,-114.76915250169208,-1629.6826171875,-174.76915250169208,-1619.6826171875,-174.76915250169208],\"key\":-13,\"color\":\"orange\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"in3\",\"from\":36,\"to\":23,\"points\":[-1754.015238439192,25.23084749830791,-1744.015238439192,25.23084749830791,-1629.6826171875,-154.76915250169208,-1619.6826171875,-154.76915250169208],\"key\":-14,\"color\":\"orange\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in13\",\"from\":76,\"to\":31,\"points\":[-3251.8349609375,1560,-3241.8349609375,1560,-2597.46875,-294.9691525016922,-2587.46875,-294.9691525016922],\"key\":-15},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":76,\"to\":20,\"points\":[-3251.8349609375,1580,-3241.8349609375,1580,-2654.6962890625,2389.708,-2644.6962890625,2389.708],\"key\":-16},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":80,\"to\":41,\"points\":[-3251.8349609375,1510,-3241.8349609375,1510,-2654.6962890625,2259.708,-2644.6962890625,2259.708],\"key\":-17},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in14\",\"from\":41,\"to\":29,\"points\":[-2183.3173828125,2259.708,-2173.3173828125,2259.708,-1917.46875,1085.0308474983078,-1907.46875,1085.0308474983078],\"key\":-19},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in11\",\"from\":83,\"to\":31,\"points\":[-3251.8349609375,1419.9,-3241.8349609375,1419.9,-2597.46875,-334.9691525016922,-2587.46875,-334.9691525016922],\"key\":-20},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in12\",\"from\":80,\"to\":31,\"points\":[-3251.8349609375,1490,-3241.8349609375,1490,-2597.46875,-314.9691525016922,-2587.46875,-314.9691525016922],\"key\":-18},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":83,\"to\":22,\"points\":[-3251.8349609375,1439.9,-3241.8349609375,1439.9,-2654.6962890625,2089.708,-2644.6962890625,2089.708],\"key\":-21},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":83,\"to\":25,\"points\":[-3251.8349609375,1439.9,-3241.8349609375,1439.9,-2654.6962890625,1919.708,-2644.6962890625,1919.708],\"key\":-22},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":83,\"to\":30,\"points\":[-3251.8349609375,1439.9,-3241.8349609375,1439.9,-2654.6962890625,1709.708,-2644.6962890625,1709.708],\"key\":-23},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":84,\"to\":38,\"points\":[-3251.8349609375,1369.9,-3241.8349609375,1369.9,-2654.6962890625,1629.708,-2644.6962890625,1629.708],\"key\":-24},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":86,\"to\":40,\"points\":[-3251.8349609375,1300,-3241.8349609375,1300,-2654.6962890625,1509.708,-2644.6962890625,1509.708],\"key\":-25},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in10\",\"from\":84,\"to\":31,\"points\":[-3251.8349609375,1349.9,-3241.8349609375,1349.9,-2597.46875,-354.9691525016922,-2587.46875,-354.9691525016922],\"key\":-26},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in9\",\"from\":86,\"to\":31,\"points\":[-3251.8349609375,1280,-3241.8349609375,1280,-2597.46875,-374.9691525016922,-2587.46875,-374.9691525016922],\"key\":-27},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in13\",\"from\":22,\"to\":29,\"points\":[-2183.3173828125,2089.708,-2173.3173828125,2089.708,-1917.46875,1065.0308474983078,-1907.46875,1065.0308474983078],\"key\":-28},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in12\",\"from\":25,\"to\":29,\"points\":[-2183.3173828125,1919.708,-2173.3173828125,1919.708,-1917.46875,1045.0308474983078,-1907.46875,1045.0308474983078],\"key\":-29},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in11\",\"from\":30,\"to\":29,\"points\":[-2183.3173828125,1709.708,-2173.3173828125,1709.708,-1917.46875,1025.0308474983078,-1907.46875,1025.0308474983078],\"key\":-30},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in10\",\"from\":38,\"to\":29,\"points\":[-2183.3173828125,1629.708,-2173.3173828125,1629.708,-1917.46875,1005.0308474983078,-1907.46875,1005.0308474983078],\"key\":-31},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in9\",\"from\":40,\"to\":29,\"points\":[-2183.3173828125,1509.708,-2173.3173828125,1509.708,-1917.46875,985.0308474983078,-1907.46875,985.0308474983078],\"key\":-32},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":89,\"to\":48,\"points\":[-3251.8349609375,1160,-3241.8349609375,1160,-2654.6962890625,1089.708,-2644.6962890625,1089.708],\"key\":-33},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":88,\"to\":46,\"points\":[-3251.8349609375,1230,-3241.8349609375,1230,-2654.6962890625,1299.708,-2644.6962890625,1299.708],\"key\":-34},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in8\",\"from\":88,\"to\":31,\"points\":[-3251.8349609375,1210,-3241.8349609375,1210,-2597.46875,-394.9691525016922,-2587.46875,-394.9691525016922],\"key\":-35},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in7\",\"from\":89,\"to\":31,\"points\":[-3251.8349609375,1140,-3241.8349609375,1140,-2597.46875,-414.9691525016922,-2587.46875,-414.9691525016922],\"key\":-36},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":92,\"to\":55,\"points\":[-3251.8349609375,950,-3241.8349609375,950,-2654.6962890625,689.708,-2644.6962890625,689.708],\"key\":-37},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":91,\"to\":54,\"points\":[-3251.8349609375,1020,-3241.8349609375,1020,-2654.6962890625,849.708,-2644.6962890625,849.708],\"key\":-38},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":90,\"to\":53,\"points\":[-3251.8349609375,1090,-3241.8349609375,1090,-2654.6962890625,929.708,-2644.6962890625,929.708],\"key\":-39},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in8\",\"from\":46,\"to\":29,\"points\":[-2183.3173828125,1299.708,-2173.3173828125,1299.708,-1917.46875,965.0308474983078,-1907.46875,965.0308474983078],\"key\":-40},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in7\",\"from\":48,\"to\":29,\"points\":[-2183.3173828125,1089.708,-2173.3173828125,1089.708,-1917.46875,945.0308474983078,-1907.46875,945.0308474983078],\"key\":-41},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in6\",\"from\":53,\"to\":29,\"points\":[-2183.3173828125,929.708,-2173.3173828125,929.708,-1917.46875,925.0308474983078,-1907.46875,925.0308474983078],\"key\":-42},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in5\",\"from\":54,\"to\":29,\"points\":[-2183.3173828125,849.708,-2173.3173828125,849.708,-1917.46875,905.0308474983078,-1907.46875,905.0308474983078],\"key\":-43},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in4\",\"from\":55,\"to\":29,\"points\":[-2183.3173828125,689.708,-2173.3173828125,689.708,-1917.46875,885.0308474983078,-1907.46875,885.0308474983078],\"key\":-44},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in6\",\"from\":90,\"to\":31,\"points\":[-3251.8349609375,1070,-3241.8349609375,1070,-2597.46875,-434.9691525016922,-2587.46875,-434.9691525016922],\"key\":-45},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in5\",\"from\":91,\"to\":31,\"points\":[-3251.8349609375,1000,-3241.8349609375,1000,-2597.46875,-454.9691525016922,-2587.46875,-454.9691525016922],\"key\":-46},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in4\",\"from\":92,\"to\":31,\"points\":[-3251.8349609375,930,-3241.8349609375,930,-2597.46875,-474.9691525016922,-2587.46875,-474.9691525016922],\"key\":-47},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":95,\"to\":64,\"points\":[-3251.8349609375,740,-3241.8349609375,740,-2654.6962890625,89.70799999999997,-2644.6962890625,89.70799999999997],\"key\":-48},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":94,\"to\":63,\"points\":[-3251.8349609375,810,-3241.8349609375,810,-2654.6962890625,209.70799999999997,-2644.6962890625,209.70799999999997],\"key\":-49},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":93,\"to\":62,\"points\":[-3251.8349609375,879.9,-3241.8349609375,879.9,-2654.6962890625,449.70799999999997,-2644.6962890625,449.70799999999997],\"key\":-50},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in3\",\"from\":62,\"to\":29,\"points\":[-2183.3173828125,449.70799999999997,-2173.3173828125,449.70799999999997,-1917.46875,865.0308474983078,-1907.46875,865.0308474983078],\"key\":-51},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in2\",\"from\":63,\"to\":29,\"points\":[-2183.3173828125,209.70799999999997,-2173.3173828125,209.70799999999997,-1917.46875,845.0308474983078,-1907.46875,845.0308474983078],\"key\":-52},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in1\",\"from\":64,\"to\":29,\"points\":[-2183.3173828125,89.70799999999997,-2173.3173828125,89.70799999999997,-1917.46875,825.0308474983078,-1907.46875,825.0308474983078],\"key\":-53},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in3\",\"from\":93,\"to\":31,\"points\":[-3251.8349609375,859.9,-3241.8349609375,859.9,-2597.46875,-494.9691525016922,-2587.46875,-494.9691525016922],\"key\":-54},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in2\",\"from\":94,\"to\":31,\"points\":[-3251.8349609375,790,-3241.8349609375,790,-2597.46875,-514.9691525016922,-2587.46875,-514.9691525016922],\"key\":-55},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in1\",\"from\":95,\"to\":31,\"points\":[-3251.8349609375,720,-3241.8349609375,720,-2597.46875,-534.9691525016922,-2587.46875,-534.9691525016922],\"key\":-56},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":77,\"to\":79,\"points\":[-2851.8349609375,2609.708,-2841.8349609375,2609.708,-2644.6962890625,2769.708,-2634.6962890625,2769.708],\"key\":-57},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":75,\"to\":78,\"points\":[-2851.8349609375,2679.708,-2841.8349609375,2679.708,-2644.6962890625,2849.708,-2634.6962890625,2849.708],\"key\":-58},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":73,\"to\":71,\"points\":[-2851.8349609375,2749.708,-2841.8349609375,2749.708,-2644.6962890625,2929.708,-2634.6962890625,2929.708],\"key\":-59},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in3\",\"from\":71,\"to\":81,\"points\":[-2173.3173828125,2929.708,-2163.3173828125,2929.708,-2069.6826171875,2885.030847498308,-2059.6826171875,2885.030847498308],\"key\":-60},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in1\",\"from\":78,\"to\":81,\"points\":[-2173.3173828125,2849.708,-2163.3173828125,2849.708,-2069.6826171875,2865.030847498308,-2059.6826171875,2865.030847498308],\"key\":-61},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in0\",\"from\":79,\"to\":81,\"points\":[-2173.3173828125,2769.708,-2163.3173828125,2769.708,-2069.6826171875,2845.030847498308,-2059.6826171875,2845.030847498308],\"key\":-62},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in3\",\"from\":73,\"to\":82,\"points\":[-2851.8349609375,2729.708,-2841.8349609375,2729.708,-2439.6826171875,2695.130847498308,-2429.6826171875,2695.130847498308],\"key\":-63},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in1\",\"from\":75,\"to\":82,\"points\":[-2851.8349609375,2659.708,-2841.8349609375,2659.708,-2439.6826171875,2675.130847498308,-2429.6826171875,2675.130847498308],\"key\":-64},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in0\",\"from\":77,\"to\":82,\"points\":[-2851.8349609375,2589.708,-2841.8349609375,2589.708,-2439.6826171875,2655.130847498308,-2429.6826171875,2655.130847498308],\"key\":-65},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"templateLinkList\",\"from\":82,\"to\":19,\"points\":[-2309.5380859375,2675.130847498308,-2299.5380859375,2675.130847498308,-945.392578125,1395.230847498308,-935.392578125,1395.230847498308],\"key\":-66,\"color\":\"white\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"out\",\"toPort\":\"dataLinkList\",\"from\":81,\"to\":19,\"points\":[-1939.5380859375,2865.030847498308,-1929.5380859375,2865.030847498308,-945.392578125,1415.230847498308,-935.392578125,1415.230847498308],\"key\":-67,\"color\":\"white\"},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"json\",\"toPort\":\"in0\",\"from\":85,\"to\":29,\"points\":[-2183.3173828125,-70.39200000000005,-2173.3173828125,-70.39200000000005,-1917.46875,805.0308474983078,-1907.46875,805.0308474983078],\"key\":-70},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"templateNode\",\"toPort\":\"in0\",\"from\":60,\"to\":31,\"points\":[-3251.8349609375,650,-3241.8349609375,650,-2597.46875,-554.9691525016922,-2587.46875,-554.9691525016922],\"key\":-68},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"category\",\"toPort\":\"category\",\"from\":60,\"to\":85,\"points\":[-3251.8349609375,670,-3241.8349609375,670,-2654.6962890625,-70.39200000000005,-2644.6962890625,-70.39200000000005],\"key\":-69},\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"Feature\",\"toPort\":\"Feature\",\"from\":65,\"to\":72,\"points\":[-2030,-827.4608695652174,-1990,-827.4,-1980,-827.4],\"key\":-71,\"color\":\"RebeccaPurple\"}\n]}"
}