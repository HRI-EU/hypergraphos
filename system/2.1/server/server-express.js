/*
=============================================================================
Licensed Materials - Property of Frank Joublin and Antonio Ceravola.
(C) Copyright Frank Joublin and Antonio Ceravola. 2021, All Rights Reserved.
France Government Users Restricted Rights - Use, duplication or disclosure
restricted by GSA ADP Schedule Contract with Frank Joublin and Antonio Ceravola.
=============================================================================
Module: MDDTools Server Process
Date: 10.07.2020
=============================================================================
*/

/*
  Execution of server is done via the previous directory.
  Execute:
    .startServer.sh [userName]
  where:
    userName: optional parameter with your user name
              the same used in the url?userName:'<userName>'
              This value is used to select your sconfig file
*/

const fs = require( 'fs' );
const express = require('express');
const nocache = require('nocache');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');
const os = require('os');

const config = require( '../serverConfig.js' );
const { exec } = require( 'child_process' );

const ls = function( dir ) {
  if( dir ) {
    console.log( 'Current directory content' );
    console.log( '-------------------------' );
    fs.readdirSync( dir ).forEach( file => {
      console.log( file );
    });
    console.log( '-------------------------' );
  }
}
ls();

// if( true ) {
//   ls( '.' );
// }
// Load Server Configuration
// 1) serverConfig.js is loaded
// 2) Then user configuration is loaded in 3 options:
// 3) user config is loaded:
//   3.1) via server/sconfig/<userName>_sconfig.js, otherwise
//   3.2) via server/sconfig/<os.hostName>_sconfig.js, otherwise
//   3.3) via server/sconfig/<os.userName>_sconfig.js, otherwise
//   3.4) a NoName user is loaded

let userNameArg = '';
const argList = process.argv;
if( argList[2] ) {
  userNameArg = argList[2];
}
// TODO: reimplement this check with a map object instead than
//       in this easy way :-), and consider a default
// Load optional user configuration settings on hostname
let userConfig = `./sconfigs/${userNameArg}_sconfig.js`;
let isConfigFound = fs.existsSync( userConfig );
if( !isConfigFound ) {
  // If userName config is not found, try with hostName
  userNameArg = os.hostname();
  userConfig = `./sconfigs/${userNameArg}_sconfig.js`;

  isConfigFound = fs.existsSync( userConfig );
  if( !isConfigFound ) {
    // If previous config is not found, try with os.userName
    userNameArg = os.userInfo().username;
    // Load optional user configuration settings on username
    userConfig = `./sconfigs/${userNameArg}_sconfig.js`;
  }
}

try {
  console.log( 'INFO: trying to load: ', userConfig );
  const userConfigFunction = require( userConfig );
  if( userConfigFunction ) {
    userConfigFunction( config );
  }
} catch( e ) {
  console.log( 'INFO: no user configuration found' );
}



// Set Server IP
config.server.ip = getServerIp();
config.client.server = { ip: config.server.ip };

// Log Configuration
const configurationStr = JSON.stringify( config, null, 2 );
console.log( 'Runnin on configuration:' );
console.log( configurationStr );
console.log( '------------------------\n' );


// Create Client Configuration
const userName = config.client.host.name;
const ccPathFileName = config.server.clientPath+`/configs/${userName}_config.js`;
let source = '/* \n'+
               '  NOTE: this config is auto generated by server process\n'+
               '  DO NOT MODIFY THIS FILE\n'+
               '*/\n'+
               'const config = '+JSON.stringify( config.client, null, 2 )+';';
fs.writeFileSync( ccPathFileName, source, 'utf8' );

const scPathFileName = `./Running_config.js`;
source = '/* \n'+
         '  NOTE: this config is auto generated by server process\n'+
         '  DO NOT MODIFY THIS FILE\n'+
         '*/\n'+
         'const config = '+JSON.stringify( config, null, 2 )+';\n\n'+
         'module.exports = config;';
fs.writeFileSync( scPathFileName, source, 'utf8' );

const onGet = function( request, response, next ) {
  console.log( 'Loading file: '+request.url );
  next();
}

//const ssl = config.server.ssl;
//const sslOptions = {
//    key: fs.readFileSync( ssl.key ),
//    cert: fs.readFileSync( ssl.cert ),
//};

// Create a server
//const webServer = httpolyglot.createServer( sslOptions, app );
const webServer = express();

webServer.use( express.json() );
webServer.use( '/auth', authRoutes );
webServer.use( protectedRoutes );
webServer.use( '/', express.static( config.server.clientPath) );
webServer.use( '/test',    express.static( config.server.testPath ), onGet );

// Use nocache middleware to avoid caching
//webServer.use(nocache);


// Start the server !
webServer.listen( config.server.webServerPort, function() {
  const url = `${config.server.webServerProtocol}://${config.server.webServerName}:${config.server.webServerPort}`;
  console.log( `WebServer running at ${url}!` );
  console.log( ` Access with user: ${url}?name:'${config.client.host.name}'` );
});


function getServerIp() {
  var os = require( 'os' );
  var ifaceList = os.networkInterfaces();
  var valueList = Object.keys( ifaceList ).map( function(name) {
    return ifaceList[name];
  
  });
  valueList = [].concat.apply( [], valueList ).filter( function(v) {
    return( ( v.family == 'IPv4' ) && ( v.internal == false ) );
  });

  return( valueList.length? valueList[0].address: '0.0.0.0' );
}
