/*
   MDDTools Server Process
 */

const config = require( '../config' );
// Set Server IP
config.server.ip = getServerIp();
config.client.server = { ip: config.server.ip };

// Log Configuration
console.log( 'Runnin on configuration:' );
console.log( JSON.stringify( config, null, 2 ) );
console.log( '------------------------\n' );

// Create Client Configuration
const fs = require( 'fs' );
const userName = config.client.host.name;
const ccPathFileName = config.server.clientPath+`/${userName}_config.js`;
const source = '/* \n'+
               '  NOTE: this config is auto generated by server process\n'+
               '  DO NOT MODIFY THIS FILE\n'+
               '*/\n'+
               'const config = '+JSON.stringify( config.client, null, 2 )+';';
fs.writeFileSync( ccPathFileName, source, 'utf8' );


// Create Web Server
var express = require('express');
var httpolyglot = require('httpolyglot');
var app = express();

const ssl = config.server.ssl;
const sslOptions = {
    key: fs.readFileSync( ssl.key ),
    cert: fs.readFileSync( ssl.cert ),
};

const webServer = httpolyglot.createServer( sslOptions, app );

app.use( express.urlencoded( { extended: true } ) );
app.use( express.text() );

// Serve client files
app.use( express.static( config.server.clientPath ) );
// Serve libraries files
app.use( '/library', express.static( config.server.libPath ) );
// Load files from dataRoot
app.use( '/fileServer/', express.static( config.server.dataRoot ) );
// Save files to dataRoot
app.post( '/fileServer/', function( req, res ) {
  const fileInfo = JSON.parse( req.body );
  if( fileInfo && fileInfo.url ) {
    if( fileInfo.url.startsWith( '/fileServer/' ) ) {
      // Get updated url
      const filePathName = recomputeURL( fileInfo.url );
      const pathInfo = getPathInfo( filePathName );
      // In case the path do not exist -> create it
      if( !fs.existsSync( pathInfo.pathName ) ) {
        fs.mkdirSync( pathInfo.pathName, { recursive: true } );
      }
      // Get source
      let source = ( fileInfo.source? fileInfo.source: '' );
      // Save file
      console.log( "Saving file: "+filePathName );
      if( config.server.debugOnFileContentOn && pathInfo.extension == 'json' ) {
        const obj = JSON.parse( source );
        source = JSON.stringify( obj, null, 2 );
      }
      fs.writeFileSync( filePathName, source, 'utf8' );;
    }
  } else {
    console.log( 'Error in save request'+req.body );
  }
  res.send();
});

// Start Web Server (listen for clients)
const url = `${config.server.webServerProtocol}:\\${config.server.webServerName}:${config.server.webServerPort}`;
console.log( `WebServer running at ${url}!` );
webServer.listen( config.server.webServerPort );

function recomputeURL( url ) {
  if( url.startsWith( '/fileServer/' ) ) {
    const startIdx = '/fileServer/'.length;
    // Remove '/fileServer/' virtual path
    const urlFilePath = url.substring( startIdx );
    // Create file path name
    const filePathName = config.server.dataRoot+'/'+urlFilePath;
    return( filePathName );
  } else {
    return( url );
  }
}
function getPathInfo( path ) {
  const pathName = path.substring( 0, path.lastIndexOf( '/' ) );
  const fileNameExt = path.substring( path.lastIndexOf( '/' )+1 );
  let dotIdx = fileNameExt.lastIndexOf( '.' );
  dotIdx = ( dotIdx == -1? fileNameExt.length: dotIdx );
  const fileName = fileNameExt.substring( 0, dotIdx );
  const extension = fileNameExt.substring( dotIdx+1 );
  return( { pathName, fileName, extension } );
}
function getServerIp() {
  var os = require( 'os' );
  var ifaceList = os.networkInterfaces();
  var valueList = Object.keys( ifaceList ).map( function(name) {
    return ifaceList[name];
  });
  valueList = [].concat.apply( [], valueList ).filter( function(v) {
    return( ( v.family == 'IPv4' ) && ( v.internal == false ) );
  });

  return( valueList.length? valueList[0].address : '0.0.0.0' );
}

/*
var bodyParser=require('body-parser');
app.use(express.json({limit: '50mb', extended:true}));
app.use(express.urlencoded({limit: '50mb', extended:true, parameterLimit:1000000}));
// Next line fix payload-too-large error
//var jsonParser       = bodyParser.json({limit:1024*1024*20, type:'application/json'});
//  var urlencodedParser = bodyParser.urlencoded({ extended:true,limit:1024*1024*20,type:'application/x-www-form-urlencoding' })

//  app.use(jsonParser);
//  app.use(urlencodedParser);

//app.use(express.json({limit: '50mb'}));
//app.use(express.urlencoded({limit: '50mb', extended:true, parameterLimit:1000000}));
*/