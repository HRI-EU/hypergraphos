/*
Copyright (c) 2024 Antonello Ceravola, Frank Joublin, Honda Research Institute Europe GmbH

This file is part of HyperGraphOS.

This source code is licensed under the MIT License found in the
LICENSE file in the root directory of this source tree.
*/

/* 
  NOTE: this config is used only when HyperGraph is loaded
  in localMode, by opening in the browser: file:///indexLocal.html
*/
const config = {
  "isLocalMode": true,
  "appName": "Pavel Planning",
  "host": {
    "name": "UserLocal",
    "fileServerURL": "../../../localFileServer",
    "fileServerSystemURL": "../../../localFileServer/System",
    "fileStatusURL": "/fileStatus",
    "statusURL": "../../../localFileServer/Users/User_status.json",
    "libraryURL": "lib/"
  },
  "remoteHost": {
    "NUC": "192.168.1.11:7575"
  },
  "htmlDiv": {
    "mainDiv": "mainDiv",
    "graphDiv": "diagram",
    "paletteDiv": "palette",
    "nodePaletteDiv": "nodePalette",
    "groupPaletteDiv": "groupPalette",
    "linkPaletteDiv": "linkPalette"
  },
  "graph": {
    "allowDeleteKey": false,
    "colorSchema": "light",
    "zoomFactor": 1.05,
    "defaultDSL": "DefaultDSL",
    "rootGraphURL": "noURL",
    "rootGraphNodeData": {
      "key": "Current Graph",
      "isDir": true,
      "fileURL": "noURL",
      "fileType": "text/json"
    },
    "maxHistoryLength": 30
  },
  "server": {
    "ip": "192.168.1.11"
  }
};

function setLocalStatus() {
  // Set APP Title
  document.title = config.appName;
  // Set status
  m.status.graphHistory = [
    {
      key: 'Current Graph',
      isDir: true,
      fileURL: 'noURL',
      fileType: 'text/json',
    }
  ];
  m.status.openWindowList = {};
  m.status.pinnedWindow = {};
  m.status.isReadOnly = true;
}

function setLocalDSL() {
  m.dslNameList = 
///////////////////////////
  {
    "HierarchyDSL": "/fileServer/DSL/HierarchyDSL.js",
    "TextLabelsDSL": "/fileServer/DSL/TextLabelsDSL.js",
    "DataFlowDSL": "/fileServer/DSL/DataFlowDSL.js"
  }
///////////////////////////  
  ;
}


function getCurrentLocalGraph() {
  return(
///////////////////////////
{
  "dslNameList": [
    "HierarchyDSL",
    "TextLabelsDSL",
    "DataFlowDSL",
    "TableDSL"
  ],
  "view": {
    "scale": 0.17559792941178548,
    "position": [
      -31694.238645217563,
      -20703.6850861539
    ],
    "isGridOn": true
  },
  "graphFileServer": [],
  "model": "{ \"class\": \"GraphLinksModel\",\n  \"copiesArrays\": true,\n  \"copiesArrayObjects\": true,\n  \"copiesKey\": false,\n  \"linkKeyProperty\": \"key\",\n  \"linkFromPortIdProperty\": \"fromPort\",\n  \"linkToPortIdProperty\": \"toPort\",\n  \"nodeDataArray\": [\n{\"label\":\"Graph Info\",\"category\":\"Hierarchy_GraphInfo\",\"size\":\"180 80\",\"props_\":[{\"name\":\"Name\",\"value\":\"label@2\",\"valueChanged\":\"true\"},{\"name\":\"Type\",\"value\":\"WorkSpace\",\"valueChanged\":\"true\"},{\"name\":\"Version\",\"value\":\"1.0\"},{\"name\":\"Date\",\"value\":\"3/7/2024\"},{\"name\":\"Path\",\"value\":\"/fileServer/03/15.json\",\"valueChanged\":true},{\"name\":\"Authors\",\"value\":\"- Frank\\n- Antonello\",\"valueChanged\":\"true\"}],\"key\":0,\"location\":\"-21910 -20210\"},\n{\"label\":\"Pavel Planning V1.5.2\",\"category\":\"TextLabels_Size6\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"2556 240\",\"key\":2,\"location\":\"-21640 -20150\",\"isLabelEditable\":false},\n{\"label\":\"Model\",\"size\":\"180 60\",\"category\":\"Hierarchy_Model\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphModel$\",\"key\":4,\"location\":\"-22180 -20210\"},\n{\"label\":\"Selection\",\"size\":\"180 60\",\"category\":\"Hierarchy_Selection\",\"isFile\":true,\"fileType\":\"text/json\",\"isSystem\":\"$GraphSelection$\",\"key\":6,\"location\":\"-22180 -20110\"},\n{\"label\":\"Tests\",\"category\":\"TextLabels_Size5\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"3236 154\",\"key\":80,\"location\":\"-24670 -19150\",\"color\":\"#d2b4de\"},\n{\"label\":\"Includes\",\"category\":\"TextLabels_Size5\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"2151 154\",\"key\":81,\"location\":\"-20100 -19130\",\"color\":\"LightGreen\"},\n{\"label\":\"This is the DataFlow Engine Control Center. It can be opened by clicking on its context menu and selecting\\n\\\"Open File\\\"\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"391 117\",\"key\":82,\"location\":\"-19550 -18500\"},\n{\"label\":\"This second component create a new instance of the DataFlow Engine once entered in the WorkSpace\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"372 102\",\"key\":83,\"location\":\"-19550 -18660\"},\n{\"label\":\"NOTE: The DataFlow Engine is used to execute the Equation Solver Model from the model itself\",\"category\":\"TextLabels_Size1\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"374 102\",\"key\":84,\"location\":\"-19550 -18840\"},\n{\"label\":\"New Engine Instance \\n         onLoad\",\"color\":\"orange\",\"size\":\"430 80\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"DataFlowEngine.getInstance();\",\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"key\":86,\"location\":\"-20050 -18660\",\"isIncludeScript\":true},\n{\"label\":\"DataFlow Engine\",\"color\":\"orange\",\"size\":\"420 140\",\"category\":\"Hierarchy_CodeInFile\",\"isFile\":true,\"fileTypeName\":\"Javascript\",\"fileType\":\"text/javascript\",\"fileURL\":\"lib/DataFlowEngine/1.5/DataFlowEngine.js\",\"key\":87,\"location\":\"-20050 -18820\",\"editorPosition\":[1087,1811,666,1123]},\n{\"label\":\"Engine Control\",\"color\":\"lightsalmon\",\"size\":\"416 110\",\"category\":\"Hierarchy_CodeInGraph\",\"isFile\":true,\"fileContent\":\"<div style=\\\"display:grid\\\">\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.loadModel();\\\" style=\\\"font-size: 24px;\\\">Load Model</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.clearInstanceData();\\\" style=\\\"font-size: 24px;\\\">Clear Instance Data</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.doPause();\\\" style=\\\"font-size: 24px;\\\">Pause</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.doContinue();\\\" style=\\\"font-size: 24px;\\\">Continue</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.setState( 'isLogOn', true );\\\" style=\\\"font-size: 24px;\\\">Set Log On</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.setState( 'isLogOn', false );\\\" style=\\\"font-size: 24px;\\\">Set Log Off</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.setState( 'isTraceLogOn', true );\\\" style=\\\"font-size: 24px;\\\">Set Trace Log On</button>\\n  <button type=\\\"Button\\\" onclick=\\\"graphData.dfe.setState( 'isTraceLogOn', false );\\\" style=\\\"font-size: 24px;\\\">Set Trace Log Off</button>\\n</div>\",\"fileTypeName\":\"Web Page\",\"fileType\":\"application/html\",\"key\":18,\"location\":\"-20030 -18500\",\"isLocalDiv\":true,\"editorPosition\":[135,0,232,350]},\n{\"label\":\"Log on 27.01.2024 01.45pm\",\"category\":\"DataFlow_Data\",\"size\":\"363 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"[\\n  { \\\"key\\\": 89 },  // Set Output\\n  { \\\"key\\\": 49 },  // [   \\\"One\\\",   \\\"Two\\\",   null,   ...\\n  { \\\"key\\\": 47 },  // [ \\\"One\\\", \\\"Two\\\", \\\"Three\\\", \\\"Four...\\n  { \\\"key\\\": 50 },  // ArrayWrap\\n  { \\\"key\\\": 49 },  // DataFlow_Message\\n  { \\\"key\\\": 89 },  // Set Output\\n  { \\\"key\\\": 49 }  // [   \\\"One\\\",   \\\"Two\\\",   null,   ...\\n]\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":20,\"location\":\"-18960 -17690\"},\n{\"label\":\"Log on 27.01.2024 01.08pm\",\"category\":\"DataFlow_Data\",\"size\":\"363 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"[\\n  { \\\"key\\\": 89 },  // Set Output\\n  { \\\"key\\\": 49 },  // [   \\\"One\\\",   \\\"Two\\\",   null,   ...\\n  { \\\"key\\\": 47 },  // [ \\\"One\\\", \\\"Two\\\", \\\"Three\\\", \\\"Four...\\n  { \\\"key\\\": 50 },  // ArrayWrap\\n  { \\\"key\\\": 49 }  // DataFlow_Message\\n]\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":21,\"location\":\"-18960 -17790\"},\n{\"label\":\"Log on 27.01.2024 02.07pm\",\"category\":\"DataFlow_Data\",\"size\":\"363 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"[\\n  { \\\"key\\\": 89 },  // Set Output\\n  { \\\"key\\\": 49 },  // [   \\\"One\\\",   \\\"Two\\\",   null,   ...\\n  { \\\"key\\\": 47 },  // [ \\\"One\\\", \\\"Two\\\", \\\"Three\\\", \\\"Four...\\n  { \\\"key\\\": 50 },  // ArrayWrap\\n  { \\\"key\\\": 49 },  // DataFlow_Message\\n  { \\\"key\\\": 89 },  // Set Output\\n  { \\\"key\\\": 49 }  // [   \\\"One\\\",   \\\"Two\\\",   null,   ...\\n]\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":22,\"location\":\"-19490 -17790\"},\n{\"label\":\"Get Trace Log\",\"category\":\"DataFlow_TrigComponent\",\"size\":\"299 80\",\"buttons_\":[{\"name\":\"Update\",\"checked\":false}],\"in_\":[],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"var nodeData;\\n\\ngraphData.dfe.loadModel();\\nconst outValue = graphData.dfe.getTraceLog( true );\\ngraphData.dfe.fireOutput( nodeData, 'out', outValue );\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"iconURL\":\"\",\"key\":23,\"location\":\"-19920 -17790\"},\n{\"label\":\"Execution Trace Logs\",\"category\":\"TextLabels_Size5\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"1432 154\",\"key\":24,\"location\":\"-20010 -18000\",\"color\":\"LightGray\"},\n{\"label\":\"Generate JSON Planner Specs STEP2\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":186,\"location\":\"-26330 -15790\",\"font\":\"175px sans-serif\"},\n{\"label\":\"SpecsV1Done\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":194,\"location\":\"-21450 -15737.45\",\"group\":186},\n{\"label\":\"Data to Event\",\"category\":\"DataFlow_ConvertToEvent\",\"size\":\"240 80\",\"color\":\"Plum\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"This input expects any input type.\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"This output returns an event when the input occurs.\"}],\"fileTypeName\":\"Convert To Event\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_ConvertToEvent\",\"key\":196,\"location\":\"-21860 -15780\",\"group\":186},\n{\"label\":\"AI template\",\"category\":\"DataFlow_Template\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"outFormat\"},{\"portId\":\"3in\",\"name\":\"scenario\"},{\"portId\":\"2in\",\"name\":\"doTrigger\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"doTrigger\",\"valueChanged\":true},{\"name\":\"matcher\",\"value\":\"{[^}]+}\",\"valueChanged\":true},{\"name\":\"matcherBraceLen\",\"value\":\"1\"}],\"isFile\":true,\"fileContent\":\"Your role is to transform a scenario description into a more systematic representation in JSON that can be used as specification for making later a PDDL domain/problem planner files\\n\\nGiven the following scenario:\\n{scenario}\\n\\nHere you find a JSON format that you need to fill with data corresponding to the given scenario. The comments are describing the expected content of each field but should not appear in the final result. \\n{outFormat}\\nReduce to the minimum the semantic content that is put in the action/predicate name. \\n\",\"fileTypeName\":\"Template\",\"doCompute\":\"DataFlow_Template\",\"key\":198,\"location\":\"-24190 -15810\",\"editorPosition\":[492,97,500,450],\"group\":186},\n{\"label\":\"{\\n  \\\"Objects\\\": [  // Array containing a list of types written in uppercase with underscore like for example: \\\"CITY_AIRPORT\\\". Remember that the actors of the actions must be represented as an object here, and that an object can only be of one type only. Object name must be different from type names.\\n    \\\"<TYPE_1>\\\": []  // Array containing a list of object names of TYPE_1 or a list of type names of TYPE_1.\\n    \\\"<TYPE_2>\\\": []  // Array containing a list of object names of TYPE_2 or a list of type names of TYPE_2.\\n    ...\\n  ], \\n  \\\"Predicates\\\": [], // Array containing a list of string defining logical functions that verify state and/or types of objects like: predicate1( TYPE_1, TYPE_2,...). The parameters of the predicates must only use the types names defined in \\\"Objects\\\". Create predicate names as abstract as possible. Put semantic in the name only if it is useful to disembiguate the usage of the same predicate. For example instead of \\\"isIn(ROOM, BALL)\\\" and \\\"isIn(ROOM, ROBOT)\\\" use: \\\"smallObjectIsIn(ROOM, BALL)\\\" and \\\"actorIsIn(ROOM, ROBOT)\\\" if \\\"BALL\\\" and \\\"ROBOT\\\" are two types that cannot be fused. Other example instead of \\\"armEmpty(ARM)\\\" use \\\"isEmpty(ARM)\\\". Predictate names must occur only once in \\\"Predicates\\\". Polymorphism is not allowed in the predicate. \\n  \\\"Actions\\\": [ // Array containing a list of actions. The signature of action should be in the form: actionName( param1: TYPE_1, param2: TYPE_2, ...). The name of actions must be build from a single verb with eventualy more parameters. Reduce to the minimum the semantic content that is put in the action names. For example instead of \\\"moveToRoom(FromRoom: ROOM, ToRoom: ROOM)\\\" use: \\\"move(FromRoom: ROOM, ToRoom: ROOM)\\\". All parameter of an action must be different. For example instead of \\\"move(Room: ROOM, Room: ROOM)\\\" use: \\\"move(FromRoom: ROOM, ToRoom: ROOM)\\\". Parameter names are written in camel case, types are written in all upper case.\\n     { \\n       \\\"action\\\": // String decribing the action signature like: actionName1( param1: TYPE_1, param2: TYPE_2, ...). Create action names as abstract as possible. Do not put in the name semantic that can be passed as parameter. The actors of the action should probably be represented as one argument of the action since they may be used in precondition and effect. Parameter names are written in camel case, types are written in all upper case.\\n       \\\"description\\\": // String describing what happens when the actor does the action. Use every parameter of the action in the description as well as the actor.\\n       \\\"preconditions\\\": [] // list of predicates combined in a logical-and function, specifying the condition necessary to be true to execute the action. The parameters of the predicates must only use the parameter names of the \\\"action\\\" signature. If the actors of the action must be in a particular state, they must appear in the precondition in a predicate. The same predicates cannot be identical in both precondition and effect: either they are opposite or should be removed because independent of the action. To negate a predicate, use the character '!' before the predicate. \\n       \\\"effects\\\": [] // list of predicates combined in a logical-and function, specifying the state resulting from the execution of the action. The parameters of the predicates must only use the parameter names of the \\\"action\\\" signature. If the state of the actors of the action is affected by the action, they must appear in the effect in a predicate. The effect cannot be empty, an action has always an effect. The same predicates cannot be identical in both precondition and effect: either they are opposite or should be removed because independent of the action. To negate a predicate, use the character '!' before the predicate.\\n     },\\n     ...\\n  ],\\n  \\\"InitialStates\\\": [], // Array containing list of predicate used to define the initial condition for the planner to start with. The parameters of the predicates should not be type names and must only use the object names defined in \\\"Objects\\\". The predicates used to define the initial state must activate the precondition of some actions otherwise no action could be done to reach the GoalStates. The initial state must define the initial state of all objects used in the GoalStates. To negate a predicate, use the character '!' before the predicate.\\n  \\\"GoalStates\\\": [], // Array containing list of predicate used to define the final condition for the planner to end with. The parameters of the predicates should not be type names and must only use the object names defined in \\\"Objects\\\". The predicates used to define the GoalStates must be reachable: they must be present in the effect part of some actions. To negate a predicate, use the character '!' before the predicate.\\n  \\\"Plan\\\": []  // Array containing the list of actions (listed in the \\\"Actions.action\\\") with their related parameter instances. This list should consider to progress form the initial state and end in the GoalStates.\\n}\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"1060 420\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":202,\"location\":\"-25650 -16120\",\"labelFont\":\"17px sans-serif\",\"group\":186,\"editorPosition\":[2359,221,904,991]},\n{\"label\":\"OpenAI GPT\",\"category\":\"DataFlow_LLM\",\"size\":\"240 80\",\"color\":\"Gold\",\"doCompute\":\"DataFlow_LLM\",\"in_\":[{\"portId\":\"1in\",\"name\":\"system\",\"tooltip\":\"this input expects a string \\nthat defines the system prompt\"},{\"portId\":\"2in\",\"name\":\"user\",\"tooltip\":\"this input expects a string \\nthat defines the user prompt\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"history\",\"tooltip\":\"this output is a JSON array \\nthat contains the dialog history\"},{\"portId\":\"2out\",\"name\":\"assistant\",\"tooltip\":\"this output is a string that \\ndefines the system answer\"}],\"props_\":[{\"name\":\"url\",\"value\":\"\",\"tooltip\":\"url of the server\"},{\"name\":\"model\",\"value\":\"gpt-4-0125-preview\",\"unit\":\"\",\"nameTooltip\":\"this property defines the\\nname ot the LLM model used\",\"valueTooltip\":\"gpt-4: 8,192 tokens\\ngpt-4-32k: 32,768 tokens\\ngpt-3.5-turbo: 4,097 tokens\\ngpt-3.5-turbo-16k: 16,385 tokens\",\"valueChanged\":true},{\"name\":\"hasHistory\",\"value\":\"false\",\"tooltip\":\"if true this property will create \\nan history based on each system output \\nand user input otherwise \\nno history is used nor fired\"},{\"name\":\"stream\",\"value\":false,\"tooltip\":\"true to get the response in streaming\"},{\"name\":\"maxRetry\",\"value\":\"3\",\"unit\":\"\",\"tooltip\":\"in case of error from the LLM server \\nthe query will be retried this number of time\"},{\"name\":\"timeOut\",\"value\":\"4\",\"unit\":\"s\",\"tooltip\":\"this property defines the time before retry\"},{\"name\":\"computeBarrier\",\"value\":\"user\",\"tooltip\":\"this property defines the AND combination of \\ninput names that will trigger a \\n\\\"doCompute\\\" call in the component\"}],\"fileTypeName\":\"LLM\",\"key\":204,\"location\":\"-23540 -15817.45\",\"group\":186},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":245,\"location\":\"-23330 -15667.45\",\"group\":186},\n{\"label\":\"Planner Specs\",\"category\":\"DataFlow_Data\",\"size\":\"160 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a JSON object or array\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a JSON object or array\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"{\\n  \\\"Objects\\\": {\\n    \\\"ROBOT\\\": [\\n      \\\"robot\\\"\\n    ],\\n    \\\"FURNITURE_APPLIANCE\\\": [\\n      \\\"diningTable\\\",\\n      \\\"sideTable\\\",\\n      \\\"drawer\\\",\\n      \\\"microwave\\\",\\n      \\\"stoveBurner\\\"\\n    ],\\n    \\\"HOUSEHOLD_OBJECT\\\": [\\n      \\\"cloth\\\",\\n      \\\"apple\\\",\\n      \\\"banana\\\",\\n      \\\"bowl\\\",\\n      \\\"lunchBox\\\"\\n    ]\\n  },\\n  \\\"Predicates\\\": [\\n    \\\"at(ROBOT, FURNITURE_APPLIANCE)\\\",\\n    \\\"supports(FURNITURE_APPLIANCE, HOUSEHOLD_OBJECT)\\\",\\n    \\\"holds(ROBOT, HOUSEHOLD_OBJECT)\\\",\\n    \\\"isEmpty(ROBOT)\\\",\\n    \\\"contains(HOUSEHOLD_OBJECT, HOUSEHOLD_OBJECT)\\\"\\n  ],\\n  \\\"Actions\\\": [\\n    {\\n      \\\"action\\\": \\\"navigate(robot: ROBOT, fromLocation: FURNITURE_APPLIANCE, toLocation: FURNITURE_APPLIANCE)\\\",\\n      \\\"description\\\": \\\"Robot moves from one location to another.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"at(robot, fromLocation)\\\",\\n        \\\"!at(robot, toLocation)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!at(robot, fromLocation)\\\",\\n        \\\"at(robot, toLocation)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"pickup(robot: ROBOT, item: HOUSEHOLD_OBJECT, location: FURNITURE_APPLIANCE)\\\",\\n      \\\"description\\\": \\\"Robot picks up an item from a location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"at(robot, location)\\\",\\n        \\\"supports(location, item)\\\",\\n        \\\"isEmpty(robot)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!supports(location, item)\\\",\\n        \\\"holds(robot, item)\\\",\\n        \\\"!isEmpty(robot)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"place(robot: ROBOT, item: HOUSEHOLD_OBJECT, location: FURNITURE_APPLIANCE)\\\",\\n      \\\"description\\\": \\\"Robot places an item at a location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holds(robot, item)\\\",\\n        \\\"at(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"supports(location, item)\\\",\\n        \\\"!holds(robot, item)\\\",\\n        \\\"isEmpty(robot)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"putIn(robot: ROBOT, item: HOUSEHOLD_OBJECT, container: HOUSEHOLD_OBJECT)\\\",\\n      \\\"description\\\": \\\"Robot puts an item into a container.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holds(robot, item)\\\",\\n        \\\"supports(at(robot), container)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"contains(container, item)\\\",\\n        \\\"!holds(robot, item)\\\",\\n        \\\"isEmpty(robot)\\\"\\n      ]\\n    }\\n  ],\\n  \\\"InitialStates\\\": [\\n    \\\"at(robot, diningTable)\\\",\\n    \\\"supports(diningTable, apple)\\\",\\n    \\\"supports(diningTable, banana)\\\",\\n    \\\"supports(diningTable, cloth)\\\",\\n    \\\"supports(sideTable, bowl)\\\",\\n    \\\"supports(drawer, lunchBox)\\\",\\n    \\\"isEmpty(robot)\\\"\\n  ],\\n  \\\"GoalStates\\\": [\\n    \\\"contains(bowl, apple)\\\",\\n    \\\"contains(bowl, banana)\\\",\\n    \\\"supports(diningTable, bowl)\\\",\\n    \\\"contains(lunchBox, cloth)\\\",\\n    \\\"supports(drawer, lunchBox)\\\"\\n  ],\\n  \\\"Plan\\\": [\\n    \\\"navigate(robot, diningTable, sideTable)\\\",\\n    \\\"pickup(robot, bowl, sideTable)\\\",\\n    \\\"navigate(robot, sideTable, diningTable)\\\",\\n    \\\"place(robot, bowl, diningTable)\\\",\\n    \\\"pickup(robot, apple, diningTable)\\\",\\n    \\\"putIn(robot, apple, bowl)\\\",\\n    \\\"pickup(robot, banana, diningTable)\\\",\\n    \\\"putIn(robot, banana, bowl)\\\",\\n    \\\"navigate(robot, diningTable, drawer)\\\",\\n    \\\"pickup(robot, cloth, diningTable)\\\",\\n    \\\"putIn(robot, cloth, lunchBox)\\\"\\n  ]\\n}\",\"fileTypeName\":\"JSON\",\"fileType\":\"text/json\",\"iconURL\":\"/fileServer/pictures/JSON_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":247,\"location\":\"-22550 -15810\",\"editorPosition\":[307,57,520,1160],\"group\":186},\n{\"label\":\"All\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"```json\\n{\\n  \\\"Objects\\\": {\\n    \\\"ROBOT\\\": [\\\"robot\\\"],\\n    \\\"FURNITURE_APPLIANCE\\\": [\\\"diningTable\\\", \\\"sideTable\\\", \\\"drawer\\\", \\\"microwave\\\", \\\"stoveBurner\\\"],\\n    \\\"HOUSEHOLD_OBJECT\\\": [\\\"cloth\\\", \\\"apple\\\", \\\"banana\\\", \\\"bowl\\\", \\\"lunchBox\\\"]\\n  },\\n  \\\"Predicates\\\": [\\n    \\\"at(ROBOT, FURNITURE_APPLIANCE)\\\",\\n    \\\"supports(FURNITURE_APPLIANCE, HOUSEHOLD_OBJECT)\\\",\\n    \\\"holds(ROBOT, HOUSEHOLD_OBJECT)\\\",\\n    \\\"isEmpty(ROBOT)\\\",\\n    \\\"contains(HOUSEHOLD_OBJECT, HOUSEHOLD_OBJECT)\\\"\\n  ],\\n  \\\"Actions\\\": [\\n    {\\n      \\\"action\\\": \\\"navigate(robot: ROBOT, fromLocation: FURNITURE_APPLIANCE, toLocation: FURNITURE_APPLIANCE)\\\",\\n      \\\"description\\\": \\\"Robot moves from one location to another.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"at(robot, fromLocation)\\\",\\n        \\\"!at(robot, toLocation)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!at(robot, fromLocation)\\\",\\n        \\\"at(robot, toLocation)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"pickup(robot: ROBOT, item: HOUSEHOLD_OBJECT, location: FURNITURE_APPLIANCE)\\\",\\n      \\\"description\\\": \\\"Robot picks up an item from a location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"at(robot, location)\\\",\\n        \\\"supports(location, item)\\\",\\n        \\\"isEmpty(robot)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!supports(location, item)\\\",\\n        \\\"holds(robot, item)\\\",\\n        \\\"!isEmpty(robot)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"place(robot: ROBOT, item: HOUSEHOLD_OBJECT, location: FURNITURE_APPLIANCE)\\\",\\n      \\\"description\\\": \\\"Robot places an item at a location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holds(robot, item)\\\",\\n        \\\"at(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"supports(location, item)\\\",\\n        \\\"!holds(robot, item)\\\",\\n        \\\"isEmpty(robot)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"putIn(robot: ROBOT, item: HOUSEHOLD_OBJECT, container: HOUSEHOLD_OBJECT)\\\",\\n      \\\"description\\\": \\\"Robot puts an item into a container.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holds(robot, item)\\\",\\n        \\\"supports(at(robot), container)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"contains(container, item)\\\",\\n        \\\"!holds(robot, item)\\\",\\n        \\\"isEmpty(robot)\\\"\\n      ]\\n    }\\n  ],\\n  \\\"InitialStates\\\": [\\n    \\\"at(robot, diningTable)\\\",\\n    \\\"supports(diningTable, apple)\\\", \\n    \\\"supports(diningTable, banana)\\\", \\n    \\\"supports(diningTable, cloth)\\\", \\n    \\\"supports(sideTable, bowl)\\\", \\n    \\\"supports(drawer, lunchBox)\\\", \\n    \\\"isEmpty(robot)\\\"\\n  ],\\n  \\\"GoalStates\\\": [\\n    \\\"contains(bowl, apple)\\\", \\n    \\\"contains(bowl, banana)\\\",\\n    \\\"supports(diningTable, bowl)\\\", \\n    \\\"contains(lunchBox, cloth)\\\",\\n    \\\"supports(drawer, lunchBox)\\\"\\n  ],\\n  \\\"Plan\\\": [\\n    \\\"navigate(robot, diningTable, sideTable)\\\",\\n    \\\"pickup(robot, bowl, sideTable)\\\",\\n    \\\"navigate(robot, sideTable, diningTable)\\\",\\n    \\\"place(robot, bowl, diningTable)\\\",\\n    \\\"pickup(robot, apple, diningTable)\\\",\\n    \\\"putIn(robot, apple, bowl)\\\",\\n    \\\"pickup(robot, banana, diningTable)\\\",\\n    \\\"putIn(robot, banana, bowl)\\\",\\n    \\\"navigate(robot, diningTable, drawer)\\\",\\n    \\\"pickup(robot, cloth, diningTable)\\\",\\n    \\\"putIn(robot, cloth, lunchBox)\\\"\\n  ]\\n}\\n```\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":248,\"location\":\"-23140 -15807.45\",\"editorPosition\":[708,770,709,435],\"group\":186},\n{\"label\":\"PlannerSpecsV1\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":249,\"location\":\"-21450 -15837.45\",\"group\":186},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"},{\"portId\":\"3out\",\"name\":\"out3\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":254,\"location\":\"-22280 -15810.1\",\"group\":186},\n{\"label\":\"Prompt\",\"category\":\"DataFlow_Data\",\"size\":\"160 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"Your role is to transform a scenario description into a more systematic representation in JSON that can be used as specification for making later a PDDL domain/problem planner files\\n\\nGiven the following scenario:\\n### Initial State Description:\\n\\n- The house contains a robot, several pieces of furnitureAppliance (e.g., diningTable, sideTable, drawer, microwave, stoveBurner), and householdObjects (cloth, apple, banana, bowl, lunchBox).\\n- The robot starts in the location of the diningTable.\\n- The diningTable supports the apple, banana, and cloth.\\n- The sideTable supports the bowl.\\n- The lunchBox is on the drawer.\\n- The robot's gripper is empty.\\n\\n### Goal State Description:\\n\\n- The robot has placed the apple and the banana into the bowl.\\n- The bowl (with the apple and banana inside) is on the diningTable.\\n- The cloth is in the lunchBox.\\n- The lunchBox (with the cloth inside) remains on the drawer.\\n\\n### Actions Sequence to Achieve Goal:\\n\\n1. **navigate(diningTable, sideTable)** - Robot moves from diningTable to sideTable.\\n2. **pickup(bowl, sideTable)** - Robot picks up the bowl from the sideTable.\\n3. **navigate(sideTable, diningTable)** - Robot moves back to diningTable with the bowl.\\n4. **place(bowl, diningTable)** - Robot places the bowl on the diningTable.\\n5. **pickup(apple, diningTable)** - Robot picks up the apple from the diningTable.\\n6. **putIn(apple, bowl)** - Robot puts the apple into the bowl.\\n7. **pickup(banana, diningTable)** - Robot picks up the banana from the diningTable.\\n8. **putIn(banana, bowl)** - Robot puts the banana into the bowl.\\n9. **navigate(diningTable, drawer)** - Robot moves to the drawer.\\n10. **pickup(cloth, diningTable)** - Robot picks up the cloth from the diningTable.\\n11. **putIn(cloth, lunchBox)** - Robot puts the cloth into the lunchBox.\\n\\n### Description of Actions:\\n\\n#### Action: navigate(fromLocation, toLocation)\\n- **Preconditions:**\\n  - The robot is at fromLocation.\\n- **Effects:**\\n  - The robot's location is updated to toLocation.\\n\\n#### Action: pickup(item, location)\\n- **Preconditions:**\\n  - The robot is at location.\\n  - The item is at location.\\n  - The robot's gripper is empty.\\n- **Effects:**\\n  - The item is in the robot's gripper.\\n\\n#### Action: place(item, location)\\n- **Preconditions:**\\n  - The robot is at location.\\n  - The item is in the robot's gripper.\\n- **Effects:**\\n  - The item is at location.\\n  - The robot's gripper is empty.\\n\\n#### Action: putIn(item, container)\\n- **Preconditions:**\\n  - The item is in the robot's gripper.\\n  - The container is at the robot's location.\\n  - The container can hold the item.\\n- **Effects:**\\n  - The item is in the container.\\n  - The robot's gripper is empty.\\n\\n### Constraints of the Problem:\\n\\n- The robot can only carry one item at a time due to having only one gripper.\\n- The robot cannot manipulate task-relevant items while holding unrelated items in its gripper.\\n- Small household items must be manipulated on or within furnitureAppliance pieces for adequate space.\\n- The connectivity between locations dictates the robot's ability to navigate; the robot can move between directly connected locations.\\n- furnitureAppliance items are immovable, indicating fixed locations within the problem space.\\n- householdObject items and their subtypes have specific interaction rules, such as being placeable within smallReceptacles or requiring specific surfaces for manipulation.\\n\\nHere you find a JSON format that you need to fill with data corresponding to the given scenario. The comments are describing the expected content of each field but should not appear in the final result. \\n{\\n  \\\"Objects\\\": [  // Array containing a list of types written in uppercase with underscore like for example: \\\"CITY_AIRPORT\\\". Remember that the actors of the actions must be represented as an object here, and that an object can only be of one type only. Object name must be different from type names.\\n    \\\"<TYPE_1>\\\": []  // Array containing a list of object names of TYPE_1 or a list of type names of TYPE_1.\\n    \\\"<TYPE_2>\\\": []  // Array containing a list of object names of TYPE_2 or a list of type names of TYPE_2.\\n    ...\\n  ], \\n  \\\"Predicates\\\": [], // Array containing a list of string defining logical functions that verify state and/or types of objects like: predicate1( TYPE_1, TYPE_2,...). The parameters of the predicates must only use the types names defined in \\\"Objects\\\". Create predicate names as abstract as possible. Put semantic in the name only if it is useful to disembiguate the usage of the same predicate. For example instead of \\\"isIn(ROOM, BALL)\\\" and \\\"isIn(ROOM, ROBOT)\\\" use: \\\"smallObjectIsIn(ROOM, BALL)\\\" and \\\"actorIsIn(ROOM, ROBOT)\\\" if \\\"BALL\\\" and \\\"ROBOT\\\" are two types that cannot be fused. Other example instead of \\\"armEmpty(ARM)\\\" use \\\"isEmpty(ARM)\\\". Predictate names must occur only once in \\\"Predicates\\\". Polymorphism is not allowed in the predicate. \\n  \\\"Actions\\\": [ // Array containing a list of actions. The signature of action should be in the form: actionName( param1: TYPE_1, param2: TYPE_2, ...). The name of actions must be build from a single verb with eventualy more parameters. Reduce to the minimum the semantic content that is put in the action names. For example instead of \\\"moveToRoom(FromRoom: ROOM, ToRoom: ROOM)\\\" use: \\\"move(FromRoom: ROOM, ToRoom: ROOM)\\\". All parameter of an action must be different. For example instead of \\\"move(Room: ROOM, Room: ROOM)\\\" use: \\\"move(FromRoom: ROOM, ToRoom: ROOM)\\\". Parameter names are written in camel case, types are written in all upper case.\\n     { \\n       \\\"action\\\": // String decribing the action signature like: actionName1( param1: TYPE_1, param2: TYPE_2, ...). Create action names as abstract as possible. Do not put in the name semantic that can be passed as parameter. The actors of the action should probably be represented as one argument of the action since they may be used in precondition and effect. Parameter names are written in camel case, types are written in all upper case.\\n       \\\"description\\\": // String describing what happens when the actor does the action. Use every parameter of the action in the description as well as the actor.\\n       \\\"preconditions\\\": [] // list of predicates combined in a logical-and function, specifying the condition necessary to be true to execute the action. The parameters of the predicates must only use the parameter names of the \\\"action\\\" signature. If the actors of the action must be in a particular state, they must appear in the precondition in a predicate. The same predicates cannot be identical in both precondition and effect: either they are opposite or should be removed because independent of the action. To negate a predicate, use the character '!' before the predicate. \\n       \\\"effects\\\": [] // list of predicates combined in a logical-and function, specifying the state resulting from the execution of the action. The parameters of the predicates must only use the parameter names of the \\\"action\\\" signature. If the state of the actors of the action is affected by the action, they must appear in the effect in a predicate. The effect cannot be empty, an action has always an effect. The same predicates cannot be identical in both precondition and effect: either they are opposite or should be removed because independent of the action. To negate a predicate, use the character '!' before the predicate.\\n     },\\n     ...\\n  ],\\n  \\\"InitialStates\\\": [], // Array containing list of predicate used to define the initial condition for the planner to start with. The parameters of the predicates should not be type names and must only use the object names defined in \\\"Objects\\\". The predicates used to define the initial state must activate the precondition of some actions otherwise no action could be done to reach the GoalStates. The initial state must define the initial state of all objects used in the GoalStates. To negate a predicate, use the character '!' before the predicate.\\n  \\\"GoalStates\\\": [], // Array containing list of predicate used to define the final condition for the planner to end with. The parameters of the predicates should not be type names and must only use the object names defined in \\\"Objects\\\". The predicates used to define the GoalStates must be reachable: they must be present in the effect part of some actions. To negate a predicate, use the character '!' before the predicate.\\n  \\\"Plan\\\": []  // Array containing the list of actions (listed in the \\\"Actions.action\\\") with their related parameter instances. This list should consider to progress form the initial state and end in the GoalStates.\\n}\\nReduce to the minimum the semantic content that is put in the action/predicate name. \\n\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":309,\"location\":\"-23850 -15807.45\",\"editorPosition\":[708,770,709,435],\"group\":186},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":302,\"location\":\"-22470 -14570\",\"group\":378},\n{\"label\":\"All\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a JSON object or array\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a JSON object or array\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"{\\n  \\\"Objects\\\": {\\n    \\\"LOCATION\\\": [\\n      \\\"carSide\\\"\\n    ],\\n    \\\"CONTAINER\\\": [\\n      \\\"bootContainer\\\"\\n    ],\\n    \\\"TOOL\\\": [\\n      \\\"wrenchTool\\\",\\n      \\\"jackTool\\\",\\n      \\\"pumpTool\\\"\\n    ],\\n    \\\"WHEEL\\\": [\\n      \\\"flatTyreWheel\\\",\\n      \\\"spareTyreWheel\\\"\\n    ],\\n    \\\"NUT\\\": [\\n      \\\"nutObject\\\"\\n    ],\\n    \\\"HUB\\\": [\\n      \\\"hubObject\\\"\\n    ],\\n    \\\"SMALL_OBJECT\\\": [\\n      \\\"wrenchSmall\\\",\\n      \\\"jackSmall\\\",\\n      \\\"pumpSmall\\\",\\n      \\\"flatTyreSmall\\\",\\n      \\\"spareTyreSmall\\\",\\n      \\\"nutSmall\\\"\\n    ],\\n    \\\"ROBOT\\\": [\\n      \\\"robot\\\"\\n    ]\\n  },\\n  \\\"Predicates\\\": [\\n    \\\"isAt(ROBOT, LOCATION)\\\",\\n    \\\"inContainer(SMALL_OBJECT, CONTAINER)\\\",\\n    \\\"holdingTool(ROBOT, TOOL)\\\",\\n    \\\"attachedTyre(HUB, WHEEL)\\\",\\n    \\\"securedNut(HUB, NUT)\\\",\\n    \\\"isLifted(LOCATION)\\\",\\n    \\\"holdingSmallObject(ROBOT, SMALL_OBJECT)\\\"\\n  ],\\n  \\\"Actions\\\": [\\n    {\\n      \\\"action\\\": \\\"move(robot: ROBOT, toLocation: LOCATION)\\\",\\n      \\\"description\\\": \\\"Robot moves to a specified location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"!isAt(robot, toLocation)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"isAt(robot, toLocation)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"fetch(robot: ROBOT, smallObject: SMALL_OBJECT, container: CONTAINER)\\\",\\n      \\\"description\\\": \\\"Robot fetches a small object from a container.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"inContainer(smallObject, container)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"holdingSmallObject(robot, smallObject)\\\",\\n        \\\"!inContainer(smallObject, container)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"undoNut(robot: ROBOT, hub: HUB, nut: NUT, wrench: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot uses the wrench tool to undo the nut securing the tyre.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, wrench)\\\",\\n        \\\"securedNut(hub, nut)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!securedNut(hub, nut)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"useJack(robot: ROBOT, location: LOCATION, jack: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot uses the jack tool to lift the car at location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, jack)\\\",\\n        \\\"!isLifted(location)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"isLifted(location)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"removeTyre(robot: ROBOT, hub: HUB, wheel: WHEEL, location: LOCATION, nut: NUT)\\\",\\n      \\\"description\\\": \\\"Robot removes the wheel (expecting it to be flat) from the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"!securedNut(hub, nut)\\\",\\n        \\\"attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!attachedTyre(hub, wheel)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"attachTyre(robot: ROBOT, hub: HUB, wheel: WHEEL, location: LOCATION)\\\",\\n      \\\"description\\\": \\\"Robot attaches a wheel (expecting it to be a spare) to the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"!attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"attachedTyre(hub, wheel)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"doUpNut(robot: ROBOT, hub: HUB, nut: NUT, wrench: TOOL, wheel: WHEEL)\\\",\\n      \\\"description\\\": \\\"Robot tightens the nut to secure the wheel (expecting it to be the spare) on the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, wrench)\\\",\\n        \\\"attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"securedNut(hub, nut)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"lowerJack(robot: ROBOT, location: LOCATION, jack: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot lowers the jack to bring the car down at location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"holdingTool(robot, jack)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!isLifted(location)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"returnToBoot(robot: ROBOT, smallObject: SMALL_OBJECT, container: CONTAINER)\\\",\\n      \\\"description\\\": \\\"Robot returns the small object to the boot container.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingSmallObject(robot, smallObject)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!holdingSmallObject(robot, smallObject)\\\",\\n        \\\"inContainer(smallObject, container)\\\"\\n      ]\\n    }\\n  ],\\n  \\\"InitialStates\\\": [\\n    \\\"isAt(robot, carSide)\\\",\\n    \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n    \\\"inContainer(jackSmall, bootContainer)\\\",\\n    \\\"inContainer(pumpSmall, bootContainer)\\\",\\n    \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(spareTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(nutSmall, bootContainer)\\\",\\n    \\\"attachedTyre(hubObject, flatTyreWheel)\\\",\\n    \\\"securedNut(hubObject, nutObject)\\\",\\n    \\\"!isLifted(carSide)\\\"\\n  ],\\n  \\\"GoalStates\\\": [\\n    \\\"attachedTyre(hubObject, spareTyreWheel)\\\",\\n    \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n    \\\"inContainer(jackSmall, bootContainer)\\\",\\n    \\\"inContainer(pumpSmall, bootContainer)\\\",\\n    \\\"securedNut(hubObject, nutObject)\\\"\\n  ],\\n  \\\"Plan\\\": []\\n}\",\"fileTypeName\":\"JSON\",\"fileType\":\"text/json\",\"iconURL\":\"/fileServer/pictures/JSON_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":305,\"location\":\"-21650 -14590\",\"editorPosition\":[1785,60,996,1118],\"group\":378},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"},{\"portId\":\"3out\",\"name\":\"out3\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":306,\"location\":\"-24660 -14650\",\"group\":378},\n{\"category\":\"DataFlow_DataUnwrap\",\"color\":\"seagreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"{}\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"errors\"}],\"doCompute\":\"DataFlow_ObjectUnwrap\",\"key\":307,\"location\":\"-23560 -14650\",\"group\":378},\n{\"label\":\"All\",\"category\":\"DataFlow_Data\",\"size\":\"140 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"```json\\n{\\n  \\\"Objects\\\": {\\n    \\\"LOCATION\\\": [\\n      \\\"carSide\\\"\\n    ],\\n    \\\"CONTAINER\\\": [\\n      \\\"bootContainer\\\"\\n    ],\\n    \\\"TOOL\\\": [\\n      \\\"wrenchTool\\\",\\n      \\\"jackTool\\\",\\n      \\\"pumpTool\\\"\\n    ],\\n    \\\"WHEEL\\\": [\\n      \\\"flatTyreWheel\\\",\\n      \\\"spareTyreWheel\\\"\\n    ],\\n    \\\"NUT\\\": [\\n      \\\"nutObject\\\"\\n    ],\\n    \\\"HUB\\\": [\\n      \\\"hubObject\\\"\\n    ],\\n    \\\"SMALL_OBJECT\\\": [\\n      \\\"wrenchSmall\\\",\\n      \\\"jackSmall\\\",\\n      \\\"pumpSmall\\\",\\n      \\\"flatTyreSmall\\\",\\n      \\\"spareTyreSmall\\\",\\n      \\\"nutSmall\\\"\\n    ],\\n    \\\"ROBOT\\\": [\\n      \\\"robot\\\"\\n    ]\\n  },\\n  \\\"Predicates\\\": [\\n    \\\"isAt(ROBOT, LOCATION)\\\",\\n    \\\"inContainer(SMALL_OBJECT, CONTAINER)\\\",\\n    \\\"holdingTool(ROBOT, TOOL)\\\",\\n    \\\"attachedTyre(HUB, WHEEL)\\\",\\n    \\\"securedNut(HUB, NUT)\\\",\\n    \\\"isLifted(LOCATION)\\\",\\n    \\\"holdingSmallObject(ROBOT, SMALL_OBJECT)\\\"\\n  ],\\n  \\\"Actions\\\": [\\n    {\\n      \\\"action\\\": \\\"move(robot: ROBOT, toLocation: LOCATION)\\\",\\n      \\\"description\\\": \\\"Robot moves to a specified location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"!isAt(robot, toLocation)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"isAt(robot, toLocation)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"fetch(robot: ROBOT, smallObject: SMALL_OBJECT, container: CONTAINER)\\\",\\n      \\\"description\\\": \\\"Robot fetches a small object from a container.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"inContainer(smallObject, container)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"holdingSmallObject(robot, smallObject)\\\",\\n        \\\"!inContainer(smallObject, container)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"undoNut(robot: ROBOT, hub: HUB, nut: NUT, wrench: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot uses the wrench tool to undo the nut securing the tyre.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, wrench)\\\",\\n        \\\"securedNut(hub, nut)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!securedNut(hub, nut)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"useJack(robot: ROBOT, location: LOCATION, jack: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot uses the jack tool to lift the car at location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, jack)\\\",\\n        \\\"!isLifted(location)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"isLifted(location)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"removeTyre(robot: ROBOT, hub: HUB, wheel: WHEEL, location: LOCATION, nut: NUT)\\\",\\n      \\\"description\\\": \\\"Robot removes the wheel (expecting it to be flat) from the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"!securedNut(hub, nut)\\\",\\n        \\\"attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!attachedTyre(hub, wheel)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"attachTyre(robot: ROBOT, hub: HUB, wheel: WHEEL, location: LOCATION)\\\",\\n      \\\"description\\\": \\\"Robot attaches a wheel (expecting it to be a spare) to the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"!attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"attachedTyre(hub, wheel)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"doUpNut(robot: ROBOT, hub: HUB, nut: NUT, wrench: TOOL, wheel: WHEEL)\\\",\\n      \\\"description\\\": \\\"Robot tightens the nut to secure the wheel (expecting it to be the spare) on the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, wrench)\\\",\\n        \\\"attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"securedNut(hub, nut)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"lowerJack(robot: ROBOT, location: LOCATION, jack: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot lowers the jack to bring the car down at location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"holdingTool(robot, jack)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!isLifted(location)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"returnToBoot(robot: ROBOT, smallObject: SMALL_OBJECT, container: CONTAINER)\\\",\\n      \\\"description\\\": \\\"Robot returns the small object to the boot container.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingSmallObject(robot, smallObject)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!holdingSmallObject(robot, smallObject)\\\",\\n        \\\"inContainer(smallObject, container)\\\"\\n      ]\\n    }\\n  ],\\n  \\\"InitialStates\\\": [\\n    \\\"isAt(robot, carSide)\\\",\\n    \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n    \\\"inContainer(jackSmall, bootContainer)\\\",\\n    \\\"inContainer(pumpSmall, bootContainer)\\\",\\n    \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(spareTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(nutSmall, bootContainer)\\\",\\n    \\\"attachedTyre(hubObject, flatTyreWheel)\\\",\\n    \\\"securedNut(hubObject, nutObject)\\\",\\n    \\\"!isLifted(carSide)\\\"\\n  ],\\n  \\\"GoalStates\\\": [\\n    \\\"attachedTyre(hubObject, spareTyreWheel)\\\",\\n    \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n    \\\"inContainer(jackSmall, bootContainer)\\\",\\n    \\\"inContainer(pumpSmall, bootContainer)\\\",\\n    \\\"securedNut(hubObject, nutObject)\\\"\\n  ],\\n  \\\"Plan\\\": []\\n}\\n```\\n\\nCorrections applied:\\n\\n1. I added a precondition \\\"`isAt(robot, carSide)`\\\" to the \\\"fetch\\\", \\\"undoNut\\\", and \\\"doUpNut\\\" actions. I also introduced \\\"`isAt(robot, location)`\\\" as a precondition in actions that logically require the robot to be at the same location as the action they're performing (\\\"useJack\\\", \\\"removeTyre\\\", \\\"lowerJack\\\"), ensuring the previously noted error pertaining to the \\\"isAt(robot, carSide)\\\" predicate's lack of involvement in preconditions is now resolved. \\n\\n2. I removed the \\\"`holdingSmallObject(robot, smallObject)`\\\" condition from the \\\"attachTyre\\\" action's preconditions. This change was made since the original task of changing a tire does not necessitate the robot to be holding a \\\"small object,\\\" according to the given context; rather, the task requires specific tools and the spare wheel itself. Logical consistency within the task's context is thereby preserved through this correction. \\n\\nThese corrections aim to refine the planner specification to ensure logical consistency, improved utility of individual actions through the accurate representation of preconditions, and overall functionality alignment with intended use cases as derived from the given context of a robot changing a car's tire.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":310,\"location\":\"-22239.99960463685 -14593.379557725355\",\"editorPosition\":[708,770,709,435],\"group\":378},\n{\"label\":\"OpenAI GPT\",\"category\":\"DataFlow_LLM\",\"size\":\"240 80\",\"color\":\"Gold\",\"doCompute\":\"DataFlow_LLM\",\"in_\":[{\"portId\":\"1in\",\"name\":\"system\",\"tooltip\":\"this input expects a string \\nthat defines the system prompt\"},{\"portId\":\"2in\",\"name\":\"user\",\"tooltip\":\"this input expects a string \\nthat defines the user prompt\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"history\",\"tooltip\":\"this output is a JSON array \\nthat contains the dialog history\"},{\"portId\":\"2out\",\"name\":\"assistant\",\"tooltip\":\"this output is a string that \\ndefines the system answer\"}],\"props_\":[{\"name\":\"url\",\"value\":\"\",\"tooltip\":\"url of the server\"},{\"name\":\"model\",\"value\":\"gpt-4-0125-preview\",\"unit\":\"\",\"nameTooltip\":\"this property defines the\\nname ot the LLM model used\",\"valueTooltip\":\"gpt-4: 8,192 tokens\\ngpt-4-32k: 32,768 tokens\\ngpt-3.5-turbo: 4,097 tokens\\ngpt-3.5-turbo-16k: 16,385 tokens\",\"valueChanged\":true},{\"name\":\"hasHistory\",\"value\":\"false\",\"tooltip\":\"if true this property will create \\nan history based on each system output \\nand user input otherwise \\nno history is used nor fired\"},{\"name\":\"stream\",\"value\":false,\"tooltip\":\"true to get the response in streaming\"},{\"name\":\"maxRetry\",\"value\":\"3\",\"unit\":\"\",\"tooltip\":\"in case of error from the LLM server \\nthe query will be retried this number of time\"},{\"name\":\"timeOut\",\"value\":\"4\",\"unit\":\"s\",\"tooltip\":\"this property defines the time before retry\"},{\"name\":\"computeBarrier\",\"value\":\"user\",\"tooltip\":\"this property defines the AND combination of \\ninput names that will trigger a \\n\\\"doCompute\\\" call in the component\"}],\"fileTypeName\":\"LLM\",\"key\":311,\"location\":\"-22660 -14680\",\"group\":378},\n{\"label\":\"Prompt\",\"category\":\"DataFlow_Data\",\"size\":\"160 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"Your role is to review a planner specification and correct its errors.\\n\\nGiven the following planner specification:\\n{\\n  \\\"Objects\\\": {\\n    \\\"LOCATION\\\": [\\n      \\\"carSide\\\"\\n    ],\\n    \\\"CONTAINER\\\": [\\n      \\\"bootContainer\\\"\\n    ],\\n    \\\"TOOL\\\": [\\n      \\\"wrenchTool\\\",\\n      \\\"jackTool\\\",\\n      \\\"pumpTool\\\"\\n    ],\\n    \\\"WHEEL\\\": [\\n      \\\"flatTyreWheel\\\",\\n      \\\"spareTyreWheel\\\"\\n    ],\\n    \\\"NUT\\\": [\\n      \\\"nutObject\\\"\\n    ],\\n    \\\"HUB\\\": [\\n      \\\"hubObject\\\"\\n    ],\\n    \\\"SMALL_OBJECT\\\": [\\n      \\\"wrenchSmall\\\",\\n      \\\"jackSmall\\\",\\n      \\\"pumpSmall\\\",\\n      \\\"flatTyreSmall\\\",\\n      \\\"spareTyreSmall\\\",\\n      \\\"nutSmall\\\"\\n    ],\\n    \\\"ROBOT\\\": [\\n      \\\"robot\\\"\\n    ]\\n  },\\n  \\\"Predicates\\\": [\\n    \\\"isAt(ROBOT, LOCATION)\\\",\\n    \\\"inContainer(SMALL_OBJECT, CONTAINER)\\\",\\n    \\\"holdingTool(ROBOT, TOOL)\\\",\\n    \\\"attachedTyre(HUB, WHEEL)\\\",\\n    \\\"securedNut(HUB, NUT)\\\",\\n    \\\"isLifted(LOCATION)\\\",\\n    \\\"holdingSmallObject(ROBOT, SMALL_OBJECT)\\\"\\n  ],\\n  \\\"Actions\\\": [\\n    {\\n      \\\"action\\\": \\\"move(robot: ROBOT, toLocation: LOCATION)\\\",\\n      \\\"description\\\": \\\"Robot moves to a specified location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"!isAt(robot, toLocation)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"isAt(robot, toLocation)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"fetch(robot: ROBOT, smallObject: SMALL_OBJECT, container: CONTAINER)\\\",\\n      \\\"description\\\": \\\"Robot fetches a small object from a container.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"inContainer(smallObject, container)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"holdingSmallObject(robot, smallObject)\\\",\\n        \\\"!inContainer(smallObject, container)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"undoNut(robot: ROBOT, hub: HUB, nut: NUT, wrench: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot uses the wrench tool to undo the nut securing the tyre.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, wrench)\\\",\\n        \\\"securedNut(hub, nut)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!securedNut(hub, nut)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"useJack(robot: ROBOT, location: LOCATION, jack: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot uses the jack tool to lift the car at location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, jack)\\\",\\n        \\\"!isLifted(location)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"isLifted(location)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"removeTyre(robot: ROBOT, hub: HUB, wheel: WHEEL, location: LOCATION, nut: NUT)\\\",\\n      \\\"description\\\": \\\"Robot removes the wheel (expecting it to be flat) from the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"!securedNut(hub, nut)\\\",\\n        \\\"attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!attachedTyre(hub, wheel)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"attachTyre(robot: ROBOT, hub: HUB, wheel: WHEEL, location: LOCATION)\\\",\\n      \\\"description\\\": \\\"Robot attaches a wheel (expecting it to be a spare) to the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"!attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"attachedTyre(hub, wheel)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"doUpNut(robot: ROBOT, hub: HUB, nut: NUT, wrench: TOOL, wheel: WHEEL)\\\",\\n      \\\"description\\\": \\\"Robot tightens the nut to secure the wheel (expecting it to be the spare) on the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, wrench)\\\",\\n        \\\"attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"securedNut(hub, nut)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"lowerJack(robot: ROBOT, location: LOCATION, jack: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot lowers the jack to bring the car down at location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"holdingTool(robot, jack)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!isLifted(location)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"returnToBoot(robot: ROBOT, smallObject: SMALL_OBJECT, container: CONTAINER)\\\",\\n      \\\"description\\\": \\\"Robot returns the small object to the boot container.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingSmallObject(robot, smallObject)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!holdingSmallObject(robot, smallObject)\\\",\\n        \\\"inContainer(smallObject, container)\\\"\\n      ]\\n    }\\n  ],\\n  \\\"InitialStates\\\": [\\n    \\\"isAt(robot, carSide)\\\",\\n    \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n    \\\"inContainer(jackSmall, bootContainer)\\\",\\n    \\\"inContainer(pumpSmall, bootContainer)\\\",\\n    \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(spareTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(nutSmall, bootContainer)\\\",\\n    \\\"attachedTyre(hubObject, flatTyreWheel)\\\",\\n    \\\"securedNut(hubObject, nutObject)\\\",\\n    \\\"!isLifted(carSide)\\\"\\n  ],\\n  \\\"GoalStates\\\": [\\n    \\\"attachedTyre(hubObject, spareTyreWheel)\\\",\\n    \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n    \\\"inContainer(jackSmall, bootContainer)\\\",\\n    \\\"inContainer(pumpSmall, bootContainer)\\\",\\n    \\\"securedNut(hubObject, nutObject)\\\"\\n  ],\\n  \\\"Plan\\\": []\\n}\\n\\nGiven the following error descriptions:\\n[\\n  {\\n    \\\"type\\\": \\\"Undeclared Parameter\\\",\\n    \\\"source\\\": \\\"Actions.fetch in preconditions.isAt\\\",\\n    \\\"message\\\": \\\"The parameter 'carSide' is not included in signature of action Actions.fetch in preconditions\\\",\\n    \\\"suggestions\\\": [\\n      \\\"Use only parameter of the action or add a new parameter in the action\\\"\\n    ]\\n  },\\n  {\\n    \\\"type\\\": \\\"Wrong Types\\\",\\n    \\\"source\\\": \\\"Actions.fetch in preconditions.isAt\\\",\\n    \\\"message\\\": \\\"The type of the parameters used in the predicate 'isAt' do not match the definition of the same predicate in 'Predicates'\\\",\\n    \\\"suggestions\\\": [\\n      \\\"Make sure to use parameter of types as defined in 'Predicates' or create a new predicate\\\"\\n    ]\\n  },\\n  {\\n    \\\"type\\\": \\\"Undeclared Parameter\\\",\\n    \\\"source\\\": \\\"Actions.undoNut in preconditions.isAt\\\",\\n    \\\"message\\\": \\\"The parameter 'carSide' is not included in signature of action Actions.undoNut in preconditions\\\",\\n    \\\"suggestions\\\": [\\n      \\\"Use only parameter of the action or add a new parameter in the action\\\"\\n    ]\\n  },\\n  {\\n    \\\"type\\\": \\\"Wrong Types\\\",\\n    \\\"source\\\": \\\"Actions.undoNut in preconditions.isAt\\\",\\n    \\\"message\\\": \\\"The type of the parameters used in the predicate 'isAt' do not match the definition of the same predicate in 'Predicates'\\\",\\n    \\\"suggestions\\\": [\\n      \\\"Make sure to use parameter of types as defined in 'Predicates' or create a new predicate\\\"\\n    ]\\n  },\\n  {\\n    \\\"type\\\": \\\"Undeclared Parameter\\\",\\n    \\\"source\\\": \\\"Actions.doUpNut in preconditions.isAt\\\",\\n    \\\"message\\\": \\\"The parameter 'carSide' is not included in signature of action Actions.doUpNut in preconditions\\\",\\n    \\\"suggestions\\\": [\\n      \\\"Use only parameter of the action or add a new parameter in the action\\\"\\n    ]\\n  },\\n  {\\n    \\\"type\\\": \\\"Wrong Types\\\",\\n    \\\"source\\\": \\\"Actions.doUpNut in preconditions.isAt\\\",\\n    \\\"message\\\": \\\"The type of the parameters used in the predicate 'isAt' do not match the definition of the same predicate in 'Predicates'\\\",\\n    \\\"suggestions\\\": [\\n      \\\"Make sure to use parameter of types as defined in 'Predicates' or create a new predicate\\\"\\n    ]\\n  },\\n  {\\n    \\\"type\\\": \\\"Undeclared Parameter\\\",\\n    \\\"source\\\": \\\"Actions.returnToBoot in preconditions.isAt\\\",\\n    \\\"message\\\": \\\"The parameter 'carSide' is not included in signature of action Actions.returnToBoot in preconditions\\\",\\n    \\\"suggestions\\\": [\\n      \\\"Use only parameter of the action or add a new parameter in the action\\\"\\n    ]\\n  },\\n  {\\n    \\\"type\\\": \\\"Wrong Types\\\",\\n    \\\"source\\\": \\\"Actions.returnToBoot in preconditions.isAt\\\",\\n    \\\"message\\\": \\\"The type of the parameters used in the predicate 'isAt' do not match the definition of the same predicate in 'Predicates'\\\",\\n    \\\"suggestions\\\": [\\n      \\\"Make sure to use parameter of types as defined in 'Predicates' or create a new predicate\\\"\\n    ]\\n  }\\n]\\n\\nCorrect the errors and regenerate a correct planner specification in the same JSON format. In particular do not split action names and parameters in 2 fields but keep the action signature in its original format. \\nHere is the JSON format you must use:\\n{\\n  \\\"Objects\\\": [  // Array containing a list of types written in uppercase with underscore like for example: \\\"CITY_AIRPORT\\\". Remember that the actors of the actions must be represented as an object here, and that an object can only be of one type only. Object name must be different from type names.\\n    \\\"<TYPE_1>\\\": []  // Array containing a list of object names of TYPE_1 or a list of type names of TYPE_1.\\n    \\\"<TYPE_2>\\\": []  // Array containing a list of object names of TYPE_2 or a list of type names of TYPE_2.\\n    ...\\n  ], \\n  \\\"Predicates\\\": [], // Array containing a list of string defining logical functions that verify state and/or types of objects like: predicate1( TYPE_1, TYPE_2,...). The parameters of the predicates must only use the types names defined in \\\"Objects\\\". Create predicate names as abstract as possible. Put semantic in the name only if it is useful to disembiguate the usage of the same predicate. For example instead of \\\"isIn(ROOM, BALL)\\\" and \\\"isIn(ROOM, ROBOT)\\\" use: \\\"smallObjectIsIn(ROOM, BALL)\\\" and \\\"actorIsIn(ROOM, ROBOT)\\\" if \\\"BALL\\\" and \\\"ROBOT\\\" are two types that cannot be fused. Other example instead of \\\"armEmpty(ARM)\\\" use \\\"isEmpty(ARM)\\\". Predictate names must occur only once in \\\"Predicates\\\". Polymorphism is not allowed in the predicate. \\n  \\\"Actions\\\": [ // Array containing a list of actions. The signature of action should be in the form: actionName( param1: TYPE_1, param2: TYPE_2, ...). The name of actions must be build from a single verb with eventualy more parameters. Reduce to the minimum the semantic content that is put in the action names. For example instead of \\\"moveToRoom(FromRoom: ROOM, ToRoom: ROOM)\\\" use: \\\"move(FromRoom: ROOM, ToRoom: ROOM)\\\". All parameter of an action must be different. For example instead of \\\"move(Room: ROOM, Room: ROOM)\\\" use: \\\"move(FromRoom: ROOM, ToRoom: ROOM)\\\". Parameter names are written in camel case, types are written in all upper case.\\n     { \\n       \\\"action\\\": // String decribing the action signature like: actionName1( param1: TYPE_1, param2: TYPE_2, ...). Create action names as abstract as possible. Do not put in the name semantic that can be passed as parameter. The actors of the action should probably be represented as one argument of the action since they may be used in precondition and effect. Parameter names are written in camel case, types are written in all upper case.\\n       \\\"description\\\": // String describing what happens when the actor does the action. Use every parameter of the action in the description as well as the actor.\\n       \\\"preconditions\\\": [] // list of predicates combined in a logical-and function, specifying the condition necessary to be true to execute the action. The parameters of the predicates must only use the parameter names of the \\\"action\\\" signature. If the actors of the action must be in a particular state, they must appear in the precondition in a predicate. The same predicates cannot be identical in both precondition and effect: either they are opposite or should be removed because independent of the action. To negate a predicate, use the character '!' before the predicate. \\n       \\\"effects\\\": [] // list of predicates combined in a logical-and function, specifying the state resulting from the execution of the action. The parameters of the predicates must only use the parameter names of the \\\"action\\\" signature. If the state of the actors of the action is affected by the action, they must appear in the effect in a predicate. The effect cannot be empty, an action has always an effect. The same predicates cannot be identical in both precondition and effect: either they are opposite or should be removed because independent of the action. To negate a predicate, use the character '!' before the predicate.\\n     },\\n     ...\\n  ],\\n  \\\"InitialStates\\\": [], // Array containing list of predicate used to define the initial condition for the planner to start with. The parameters of the predicates should not be type names and must only use the object names defined in \\\"Objects\\\". The predicates used to define the initial state must activate the precondition of some actions otherwise no action could be done to reach the GoalStates. The initial state must define the initial state of all objects used in the GoalStates. To negate a predicate, use the character '!' before the predicate.\\n  \\\"GoalStates\\\": [], // Array containing list of predicate used to define the final condition for the planner to end with. The parameters of the predicates should not be type names and must only use the object names defined in \\\"Objects\\\". The predicates used to define the GoalStates must be reachable: they must be present in the effect part of some actions. To negate a predicate, use the character '!' before the predicate.\\n  \\\"Plan\\\": []  // Array containing the list of actions (listed in the \\\"Actions.action\\\") with their related parameter instances. This list should consider to progress form the initial state and end in the GoalStates.\\n}\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":312,\"location\":\"-22950 -14670\",\"editorPosition\":[708,770,709,435],\"group\":378},\n{\"label\":\"AI template\",\"category\":\"DataFlow_Template\",\"size\":\"240 110\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"5in\",\"name\":\"scenarioSpec\"},{\"portId\":\"6in\",\"name\":\"JSONTemplate\"},{\"portId\":\"1in\",\"name\":\"plannerSpec\"},{\"portId\":\"3in\",\"name\":\"error\"},{\"portId\":\"2in\",\"name\":\"doTrigger\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"doTrigger\",\"valueChanged\":true},{\"name\":\"matcher\",\"value\":\"{[^}]+}\",\"valueChanged\":true},{\"name\":\"matcherBraceLen\",\"value\":\"1\"},{\"name\":\"skipComments\",\"value\":\"true\",\"valueChanged\":\"true\"}],\"isFile\":true,\"fileContent\":\"Your role is to review a planner specification and correct its errors.\\n\\nGiven the following planner specification:\\n{plannerSpec}\\n\\nGiven the following error descriptions:\\n{error}\\n\\nCorrect the errors and regenerate a correct planner specification in the same JSON format. In particular do not split action names and parameters in 2 fields but keep the action signature in its original format. \\nHere is the JSON format you must use:\\n{JSONTemplate}\",\"fileTypeName\":\"Template\",\"doCompute\":\"DataFlow_Template\",\"key\":313,\"location\":\"-23310 -14670\",\"editorPosition\":[492,97,500,450],\"group\":378},\n{\"label\":\"Parse For Errors\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"},{\"portId\":\"2out\",\"name\":\"final\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\r\\n\\r\\nif (name == 'in') {\\r\\n  const outValue = {\\r\\n    objectsList: {\\r\\n      byName: {},\\r\\n      byType: {},\\r\\n    },\\r\\n    predicates: {\\r\\n      list: {},\\r\\n      paramList: {},\\r\\n    },\\r\\n    actions: {\\r\\n      name: [],\\r\\n      list: {},\\r\\n      paramList: {},\\r\\n    },\\r\\n    errors: [],\\r\\n  };\\r\\n\\r\\n  const pushError = function( type, source, message, suggestions ) {\\r\\n    outValue.errors.push({\\r\\n      type,\\r\\n      source,\\r\\n      message,\\r\\n      suggestions,\\r\\n    });\\r\\n  };\\r\\n  const extractObjects = function( ol, type ) {\\r\\n    type = type || 'TYPE';\\r\\n    \\r\\n    if( !isAllUp( type ) ) {\\r\\n      pushError( 'Wrong Type Form', `Objects.${type}`,\\r\\n                 `The type '${type}' is not written in upper case`,\\r\\n                 [`Rewrite the type using only upper case letters or underscore like: ${type.toUpperCase()}`]);\\r\\n    }\\r\\n    \\r\\n    // Extract all objects and types and list them in ObjectList\\r\\n    switch( typeof( ol ) ) {\\r\\n      case 'string':\\r\\n        const t1 = outValue.objectsList.byName[ol];\\r\\n        if( t1 == undefined ) {\\r\\n          outValue.objectsList.byName[ol] = type;\\r\\n        } else if( t1 == 'TYPE' ) {\\r\\n          pushError( 'Wrong Object Name', `Objects.${ol}`,\\r\\n                     `The object '${ol}' has the same name as type ${ol}`,\\r\\n                     [`Change the name of the object '${ol}' in 'Objects' to avoid multiple type for an objectfor example by adding an index to its name'`]);\\r\\n        } else {\\r\\n          // In this case we found it as duplicate\\r\\n          pushError( 'Object With Multiple Types', `Objects.${ol}`,\\r\\n                     `The object '${ol}' is at least of type ${type} and ${t1}`,\\r\\n                     [`Reorganize the type hierarchy in 'Objects' to avoid multiple type for an object'`,\\r\\n                     'or add semantic in the object name to differenciate their belonging types']);\\r\\n        }\\r\\n        \\r\\n        if( !outValue.objectsList.byType[type] ) {\\r\\n          outValue.objectsList.byType[type] = [];\\r\\n        }\\r\\n        outValue.objectsList.byType[type].push( ol );\\r\\n        break;\\r\\n      case 'object':\\r\\n        if( Array.isArray( ol ) ) {\\r\\n          ol.forEach( o=> extractObjects( o, type ) );\\r\\n        } else {\\r\\n          const keys = Object.keys( ol );\\r\\n          extractObjects( keys, 'TYPE' );\\r\\n          keys.forEach( k=>extractObjects( ol[k], k ) );\\r\\n        }\\r\\n        break;\\r\\n    }\\r\\n  };\\r\\n  \\r\\n  // Check if a type is defined in objectList\\r\\n  const isType = function( type ) {\\r\\n    return( outValue.objectsList.byType[type] != undefined );\\r\\n  }\\r\\n  const isObject = function( type ) {\\r\\n    return( ( outValue.objectsList.byName[type] != undefined ) &&\\r\\n            ( outValue.objectsList.byName[type] != 'type' ) );\\r\\n  }\\r\\n  const getType = function( object ) {\\r\\n    return( outValue.objectsList.byName[object] );\\r\\n  }\\r\\n  const isAllUp = function( name ) {\\r\\n    return( name.toUpperCase() == name );\\r\\n  }\\r\\n  const isNameIncluded = function( name, paramList ) {\\r\\n    let isNameFound = false;\\r\\n    paramList.find( p=> { if( p.paramName == name ) return( isNameFound = true ) } );\\r\\n    return( isNameFound );\\r\\n  }\\r\\n  \\r\\n  // Extraction of predicate info: name, parameters\\r\\n  const parseFunction = function( p, source ) {\\r\\n    let result = {\\r\\n      name: '',\\r\\n      paramList: [],\\r\\n    };\\r\\n    \\r\\n    // Extract predicate info\\r\\n    let [ name, params ] = p.split( '(' );\\r\\n    result.name = name;\\r\\n    \\r\\n    if( params ) {\\r\\n      // Process predicate parameters\\r\\n      const idx = params.indexOf( ')' );\\r\\n      const paramString = params.substring( 0, idx );\\r\\n      const paramList = paramString.split( ',' );\\r\\n      paramList.forEach( (p,i)=> {\\r\\n        parameter = p.trim();\\r\\n        let [ paramName, paramType ] = parameter.split( ':' ); // Parse-> name: TYPE\\r\\n        paramName = paramName.trim(); // name has been found -> trim it\\r\\n        \\r\\n        // Check that definition is -> name: TYPE\\r\\n        if( !paramType ) {  // If we got only-> paramName\\r\\n          if( isAllUp( paramName ) ) { // If it is all upper case -> its a type\\r\\n            paramType = paramName;\\r\\n            paramName = '';\\r\\n            pushError( 'Missing Parameter', `${source}.${name}`,\\r\\n                       `The type '${paramType}' do not define a parameter name in action ${source}.${name}`,\\r\\n                       [`Create the parameter name for the type '${paramType}' and use it in the action`]);\\r\\n          } else {          // If it is not all upper case -> its a name\\r\\n            paramType = '';\\r\\n            pushError( 'Missing Type', `${source}.${name}`,\\r\\n                       `The parameter name '${paramName}' do not have a type in signature of action ${source}`,\\r\\n                       [`Add the type of the parameter '${paramName}' in the action signature`]);\\r\\n          }\\r\\n        } else { // If type has been found -> trim it\\r\\n          paramType = paramType.trim();\\r\\n          \\r\\n          if( !isAllUp( paramType ) ) {\\r\\n            pushError( 'Wrong Type Form', `${source}.${name}`,\\r\\n                       `The type name '${paramType}' is not defined in 'Objects'`,\\r\\n                       [`Rewrite the type using only upper case letters or underscore like: ${paramType.toUpperCase()}`]);\\r\\n          }\\r\\n        }\\r\\n        \\r\\n        if( paramType && !isType( paramType ) )  {\\r\\n          pushError( 'Missing Type', `${source}.${name}`,\\r\\n                     `The type name '${paramType}' is not defined in 'Objects'`,\\r\\n                     [`Either create a new type '${paramType}' in 'Objects'`,\\r\\n                      'or use an existing one']);\\r\\n        }\\r\\n        \\r\\n        // Check for duplicates of parameter names\\r\\n        if( paramName ) {\\r\\n          const isNameFound = isNameIncluded( paramName, result.paramList );\\r\\n          if( isNameFound ) {\\r\\n            pushError( 'Duplicated Parameter Name', `${source}.${name}`,\\r\\n                       `The parameter name '${paramName}' is already present in signature of action ${source}.${name}`,\\r\\n                       [`Change the names to avoid duplicates of parameter names in the action'`]);\\r\\n          }\\r\\n          \\r\\n          result.paramList.push( { paramName, paramType } );\\r\\n        }\\r\\n      });\\r\\n    } else {\\r\\n      pushError( 'Missing Parameters', source,\\r\\n                 `The action '${name}' has no parameters'`,\\r\\n                 ['Review the need of this action and either remove the action if it is not mandatory',\\r\\n                  `or add the parameters and their types from the variable available in the action's preconditions and effects`]);\\r\\n    }\\r\\n    \\r\\n    return( result );\\r\\n  };\\r\\n  \\r\\n  // Extraction of predicate info: name, parameters\\r\\n  const parsePredicate = function( p, source, formalParams ) {\\r\\n    let result = {\\r\\n      name: '',\\r\\n      paramList: [],\\r\\n    };\\r\\n    \\r\\n    const isFunPredicate = ( typeof( formalParams ) == 'object' );\\r\\n    const isStatePredicate = ( formalParams == 'instance' );\\r\\n    \\r\\n    // Extract predicate info\\r\\n    let [ name, params ] = p.split( '(' );\\r\\n    if( name.startsWith( '!' ) ) {\\r\\n      name = name.substring( 1 );\\r\\n    } else if( name.startsWith( 'not ' ) ) {\\r\\n       name = name.substring( 4 );\\r\\n    }\\r\\n    result.name = name;\\r\\n    \\r\\n    if( params ) {\\r\\n      // Process predicate parameters\\r\\n      const idx = params.indexOf( ')' );\\r\\n      const paramString = params.substring( 0, idx );\\r\\n      const paramList = paramString.split( ',' );\\r\\n      const paramTypeList = [];\\r\\n      paramList.forEach( (p,i)=> {\\r\\n        paramName = p.trim();\\r\\n        \\r\\n        if( typeof( formalParams ) == 'object' ) {\\r\\n          // We are inside an action\\r\\n          if( isAllUp( paramName ) ) {\\r\\n            pushError( 'Wrong Parameter', `${source}.${name}`,\\r\\n                       `The argument '${paramName}' is a type while a parameter name is expected`,\\r\\n                       [`Either use one of the parameter name defined in the signature of the action`,\\r\\n                        `or create a new parameter with type in the action and use it in this predicate '${name}'`]);\\r\\n          }\\r\\n          \\r\\n          const isNameFound = isNameIncluded( paramName, formalParams );\\r\\n          if( !isNameFound ) {\\r\\n            pushError( 'Undeclared Parameter', `${source}.${name}`,\\r\\n                       `The parameter '${paramName}' is not included in signature of action ${source}`,\\r\\n                       [`Use only parameter of the action or add a new parameter in the action`]);\\r\\n          }\\r\\n        } else if( formalParams == 'instance' ) {\\r\\n          // We are in the InitialStates or Goals\\r\\n          if( !isObject( paramName ) ) {\\r\\n            pushError( 'Wrong Parameter', `${source}.${name}`,\\r\\n                       `The parameter '${paramName}' is not included in 'Objects'`,\\r\\n                       [`Define in 'Objects' the object '${paramName}' or use an existing one already present in 'Objects'`]);\\r\\n          }\\r\\n        } else {\\r\\n          // We are in the Predicates definition\\r\\n          if( !isAllUp( paramName ) ) {\\r\\n            pushError( 'Wrong Type Form', `${source}.${name}`,\\r\\n                       `The type name '${paramName}' is not defined in 'Objects'`,\\r\\n                       [`Rewrite the type using only upper case letters or underscore like: ${paramName.toUpperCase()}`]);\\r\\n          } else if( !isType( paramName ) ) {\\r\\n            pushError( 'Wrong Parameter', `${source}.${name}`,\\r\\n                      `The type '${paramName}' is not included in 'Objects'`,\\r\\n                      [`Define in 'Objects' the type '${paramName}' or use an existing type already present in 'Objects'`]);\\r\\n          }\\r\\n        }\\r\\n        \\r\\n        if( paramName ) {\\r\\n          // If we are not in the Predicates\\r\\n          if( isFunPredicate || isStatePredicate ) {\\r\\n            \\r\\n            if( isFunPredicate ) {\\r\\n              let funcParamType = ( isAllUp( paramName )? paramName: null );\\r\\n              formalParams.find( fp=> { if( fp.paramName == paramName ) return( funcParamType = fp.paramType ) });\\r\\n              if( funcParamType ) {\\r\\n                paramTypeList.push( funcParamType );\\r\\n              }\\r\\n            } else if( isStatePredicate ) {\\r\\n              paramTypeList.push( getType( paramName ) );\\r\\n            }\\r\\n            \\r\\n            if( result.paramList.includes( paramName ) ) {\\r\\n              pushError( 'Duplicated Parameter', `${source}.${name}`,\\r\\n                         `The parameter '${paramName}' is already present in predicate ${source}.${name}`,\\r\\n                         [`Change the names to avoid duplicates of parameters`]);\\r\\n            }\\r\\n          }\\r\\n          \\r\\n          result.paramList.push( paramName );\\r\\n        }\\r\\n      });\\r\\n      \\r\\n      if( typeof( formalParams ) == 'object' ) {\\r\\n        // Case of a predicate in an action precondition or effect\\r\\n        const paramStr = paramTypeList.join( ',' );\\r\\n        const pl = outValue.predicates.paramList[name];\\r\\n        if( pl ) {\\r\\n          if( pl.Predicates && pl.Predicates[0] ) {\\r\\n            // If the types list string of the current predicate is different from its defition done in \\\"Predicates\\\"\\r\\n            if( pl.Predicates[0] != paramStr ) {\\r\\n              pushError( 'Wrong Types', `${source}.${name}`,\\r\\n                         `The type of the parameters used in the predicate '${name}' do not match the definition of the same predicate in 'Predicates'`,\\r\\n                        [`Make sure to use parameter of types as defined in 'Predicates' or create a new predicate`]);\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n        \\r\\n      } else if( formalParams == 'instance' ) {\\r\\n        // Case of a predicate in Goal/Initial States\\r\\n        const paramStr = paramTypeList.join( ',' );\\r\\n        const pl = outValue.predicates.paramList[name];\\r\\n        if( pl ) {\\r\\n          if( pl.Predicates && pl.Predicates[0] ) {\\r\\n            // If the types list string of the current predicate is different from its defition done in \\\"Predicates\\\"\\r\\n            if( pl.Predicates[0] != paramStr ) {\\r\\n              pushError( 'Wrong Types', `${source}.${name}`,\\r\\n                         `The type of the parameters used in the predicate '${name}' do not match the definition of the same predicate in 'Predicates'`,\\r\\n                        [`Make sure to use object of types as defined in 'Predicates' or create a new predicate`]);\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      \\r\\n    } else {\\r\\n      pushError( 'Missing Parameters', source,\\r\\n                 `The predicate '${name}' has no parameters'`,\\r\\n                 ['Review the need of this predicate and either remove the predicate if it is not mandatory',\\r\\n                  `or add the parameters from the variable available in the signature of '${source}`]);\\r\\n    }\\r\\n    \\r\\n    return( result );\\r\\n  };\\r\\n  \\r\\n  // Do extact predicates\\r\\n  const extractPredicate = function( target, p, source, formalParams ) {\\r\\n    const predInfo = parsePredicate( p, source, formalParams );\\r\\n    const name = predInfo.name;\\r\\n    \\r\\n    if( source == 'Predicates' ) {\\r\\n      // Check that each predicates is defined once\\r\\n      if( target.list[name] ) {\\r\\n        pushError( 'Duplicated Predicate', source,\\r\\n                   `The predicate name '${name}' has already been defined in 'Predicates'`,\\r\\n                   [`Define a new name for the predicate '${p}' in 'Predicates'`]);\\r\\n      }\\r\\n    } else {\\r\\n      // Check for missing predicates in \\\"Predicates\\\"\\r\\n      if( !outValue.predicates.list[name] ) {\\r\\n        pushError( 'Missing Predicate', source,\\r\\n                   `The predicate '${p}' has not been included in 'Predicates'`,\\r\\n                   [`Define the predicate '${p}' in 'Predicates'`]);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // Add predicate\\r\\n    if( !target.list[name] ) {\\r\\n      target.list[name] = [];\\r\\n    }\\r\\n    \\r\\n    if( !target.list[name].includes( source ) ) {\\r\\n      target.list[name].push( source );\\r\\n    }\\r\\n    \\r\\n    // Add a paramList for predicate <name>\\r\\n    if( !target.paramList[name] ) {\\r\\n      target.paramList[name] = {};\\r\\n    }\\r\\n    // Add in predicate <name> parameter usage\\r\\n    if( !target.paramList[name][source] ) {\\r\\n      target.paramList[name][source] = [];\\r\\n      target.paramList[name]['_'+source] = [];\\r\\n    }\\r\\n\\r\\n    if( ['InitialStates', 'GoalStates'].includes( source ) ) {\\r\\n      // Translate objects parameters into types\\r\\n      predInfo.paramList.forEach( (p,i)=> {\\r\\n        const type = getType( p );\\r\\n        if( type ) {\\r\\n          predInfo.paramList[i] = type;\\r\\n        }\\r\\n      });\\r\\n    }\\r\\n    const signature = predInfo.paramList.join( ',' );\\r\\n    //if( !target.paramList[name][source].includes( signature ) ) {\\r\\n      target.paramList[name][source].push( signature );\\r\\n      target.paramList[name]['_'+source].push( p );\\r\\n    //}\\r\\n  };\\r\\n  \\r\\n  const checkPredicateList = function() {\\r\\n    const list = outValue.predicates.paramList;\\r\\n    for( const predName in list ) {\\r\\n      const predInfo = list[predName];\\r\\n      \\r\\n      const def = predInfo['Predicates'];\\r\\n      if( def ) {\\r\\n        // if( def.length > 1 ) {\\r\\n        //   pushError( 'Duplicated Predicate Definition', 'Predicates',\\r\\n        //             `The predicate '${predName}' are not matching the types is defined more than once in 'Predicates'`,\\r\\n        //             [`Add more semantic to the name the duplicated predicates based on their distinct parameter types and correct their usage everywhere else.'`]);\\r\\n        // }\\r\\n        \\r\\n        \\r\\n        for( const sect in predInfo ) {\\r\\n\\r\\n          if( !sect.startsWith( '_' ) && ( sect != 'Predicates' ) ) {\\r\\n            const usage = predInfo[sect];\\r\\n            usage.forEach( (s,i)=> {\\r\\n              if( !def.includes( s ) ) {\\r\\n                const source = `${sect}.${predName}`;\\r\\n                const wrongPred = predInfo['_'+sect][i];\\r\\n                pushError( 'Predicate Missmatch', source,\\r\\n                           `The arguments of the predicate '${wrongPred}' are not matching the types definition in 'Predicates'`,\\r\\n                           ['either remove the missmatched predicate if it is not mandatory',\\r\\n                            `or correct the parameter of the predicate or modify the predicate name to include take in account the different type used for this predicate since polimorphism is not allowed.`]);\\r\\n              }\\r\\n            });\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        pushError( 'Predicate not defined', 'Predicates',\\r\\n                   `The predicate '${predName}' are not matching the types definition is not defined in 'Predicates'`,\\r\\n                   ['Either add the missing predicate in Predicates if it is not redundant',\\r\\n                    `or correct the name of the predicate.`]);\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  \\r\\n  const addAction = function( name, actionDef ) {\\r\\n    if( outValue.actions.name.includes( name ) ) {\\r\\n      pushError( 'Duplicated Action', 'Actions',\\r\\n                 `The action name '${name}' has already been defined in 'Actions'`,\\r\\n                 [`Define a new name for the action '${actionDef}' in 'Actions'`]);\\r\\n    } else {\\r\\n      outValue.actions.name.push( name );\\r\\n    }\\r\\n  };\\r\\n  \\r\\n  // Do extract objects/types\\r\\n  extractObjects( value.Objects );\\r\\n  // Extract The rest\\r\\n  let target = outValue.predicates;\\r\\n  if( value['Predicates'] ) {\\r\\n    value['Predicates'].forEach( p=> extractPredicate( target, p, 'Predicates' ) );\\r\\n  } else {\\r\\n    pushError( 'Missing Field Predicates', 'Predicates',\\r\\n                 `The field 'Predicates has not been defined.'`,\\r\\n                 [`Define a field 'Predicates', where all predicates definitions will be gathered.`]);\\r\\n  }\\r\\n  \\r\\n  target = outValue.actions;\\r\\n  value['Actions'].forEach( a=> {\\r\\n    // Parse action name and params\\r\\n    const predInfo = parseFunction( a.action, 'Actions' );\\r\\n    const actionName = predInfo.name;\\r\\n    \\r\\n    // Add action name\\r\\n    addAction( actionName, a.action );\\r\\n    \\r\\n    // Check preconditions and effects\\r\\n    a.preconditions.forEach( p=> extractPredicate( target, p, 'Actions.'+actionName+' in preconditions', predInfo.paramList ) );\\r\\n    a.effects.forEach( p=> extractPredicate( target, p, 'Actions.'+actionName+' in effects', predInfo.paramList ) );\\r\\n  });\\r\\n  \\r\\n  target = outValue.predicates;\\r\\n  value['InitialStates'].forEach( p=> extractPredicate( target, p, 'InitialStates', 'instance' ) );\\r\\n  value['GoalStates'].forEach( p=> extractPredicate( target, p, 'GoalStates', 'instance' ) );\\r\\n  \\r\\n  // Check the signature of predicates used in precondition/effects\\r\\n  checkPredicateList();\\r\\n  \\r\\n  // Check if all goals are listed at least in on effect of an action\\r\\n  value['InitialStates'].forEach( p=> {\\r\\n    let isPredFound = false;\\r\\n    const pStartStr = p.split( '(' )[0];\\r\\n    value['Actions'].forEach( a=> {\\r\\n      a.preconditions.forEach( pe=> {\\r\\n        if( pe.startsWith( pStartStr ) ) {\\r\\n          isPredFound = true;\\r\\n        }\\r\\n      });\\r\\n    });\\r\\n    if( !isPredFound ) {\\r\\n      pushError( 'Unusable InitialState Predicate', 'InitialState',\\r\\n                 `The InitialState predicate '${p}' is not present in the preconditions of any action`,\\r\\n                 ['Either remove the predicate from InitialState if is not necessary',\\r\\n                  `or add the predicate in the preconditions of an action that would require this precondition.`,\\r\\n                  `or create a new action that can have this predicate '${p}' as precondition`]);\\r\\n    }\\r\\n  });\\r\\n  \\r\\n  // Check if all goals are listed at least in on effect of an action\\r\\n  value['GoalStates'].forEach( p=> {\\r\\n    let isPredFound = false;\\r\\n    const pStartStr = p.split( '(' )[0];\\r\\n    value['Actions'].forEach( a=> {\\r\\n      a.effects.forEach( pe=> {\\r\\n        if( pe.startsWith( pStartStr ) ) {\\r\\n          isPredFound = true;\\r\\n        }\\r\\n      });\\r\\n    });\\r\\n    if( !isPredFound ) {\\r\\n      pushError( 'Unreachable Goal Predicate', 'GoalStates',\\r\\n                 `The Goal predicate '${p}' is not present in the effect of any action`,\\r\\n                 ['Either remove the predicate from GoalStates if is not necessary',\\r\\n                  `or add the predicate in the effect of an action that could produce that effect.`,\\r\\n                  `or create a new action that can have this predicate '${p}' as an effect`]);\\r\\n    }\\r\\n  });\\r\\n  \\r\\n  // Fire output\\r\\n  if( outValue.errors.length ) {\\r\\n    graphData.dfe.fireOutput(nodeData, 'out', outValue);\\r\\n  } else {\\r\\n    graphData.dfe.fireOutput(nodeData, 'final', outValue);\\r\\n  }\\r\\n}\\r\\n\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"key\":314,\"location\":\"-24440 -14630\",\"editorPosition\":[973,77,1105,762],\"group\":378},\n{\"label\":\"Analysis\",\"category\":\"TextLabels_Size2\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"150 70\",\"key\":315,\"location\":\"-23879.99960463685 -14543.379557725355\",\"group\":378},\n{\"label\":\"Input Planner Object\",\"category\":\"TextLabels_Size2\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"330 70\",\"key\":319,\"location\":\"-24619.99960463685 -14533.379557725355\",\"group\":378},\n{\"label\":\"Analysis of predicates and parameters\",\"category\":\"TextLabels_Size4\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"1340 80\",\"key\":321,\"location\":\"-24830 -14880\",\"group\":378},\n{\"label\":\"Info\",\"category\":\"DataFlow_Data\",\"size\":\"160 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a JSON object or array\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a JSON object or array\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"{\\n  \\\"objectsList\\\": {\\n    \\\"byName\\\": {\\n      \\\"LOCATION\\\": \\\"TYPE\\\",\\n      \\\"CONTAINER\\\": \\\"TYPE\\\",\\n      \\\"TOOL\\\": \\\"TYPE\\\",\\n      \\\"WHEEL\\\": \\\"TYPE\\\",\\n      \\\"NUT\\\": \\\"TYPE\\\",\\n      \\\"HUB\\\": \\\"TYPE\\\",\\n      \\\"SMALL_OBJECT\\\": \\\"TYPE\\\",\\n      \\\"ROBOT\\\": \\\"TYPE\\\",\\n      \\\"carSide\\\": \\\"LOCATION\\\",\\n      \\\"bootContainer\\\": \\\"CONTAINER\\\",\\n      \\\"wrenchTool\\\": \\\"TOOL\\\",\\n      \\\"jackTool\\\": \\\"TOOL\\\",\\n      \\\"pumpTool\\\": \\\"TOOL\\\",\\n      \\\"flatTyreWheel\\\": \\\"WHEEL\\\",\\n      \\\"spareTyreWheel\\\": \\\"WHEEL\\\",\\n      \\\"nutObject\\\": \\\"NUT\\\",\\n      \\\"hubObject\\\": \\\"HUB\\\",\\n      \\\"wrenchSmall\\\": \\\"SMALL_OBJECT\\\",\\n      \\\"jackSmall\\\": \\\"SMALL_OBJECT\\\",\\n      \\\"pumpSmall\\\": \\\"SMALL_OBJECT\\\",\\n      \\\"flatTyreSmall\\\": \\\"SMALL_OBJECT\\\",\\n      \\\"spareTyreSmall\\\": \\\"SMALL_OBJECT\\\",\\n      \\\"nutSmall\\\": \\\"SMALL_OBJECT\\\",\\n      \\\"robot\\\": \\\"ROBOT\\\"\\n    },\\n    \\\"byType\\\": {\\n      \\\"TYPE\\\": [\\n        \\\"LOCATION\\\",\\n        \\\"CONTAINER\\\",\\n        \\\"TOOL\\\",\\n        \\\"WHEEL\\\",\\n        \\\"NUT\\\",\\n        \\\"HUB\\\",\\n        \\\"SMALL_OBJECT\\\",\\n        \\\"ROBOT\\\"\\n      ],\\n      \\\"LOCATION\\\": [\\n        \\\"carSide\\\"\\n      ],\\n      \\\"CONTAINER\\\": [\\n        \\\"bootContainer\\\"\\n      ],\\n      \\\"TOOL\\\": [\\n        \\\"wrenchTool\\\",\\n        \\\"jackTool\\\",\\n        \\\"pumpTool\\\"\\n      ],\\n      \\\"WHEEL\\\": [\\n        \\\"flatTyreWheel\\\",\\n        \\\"spareTyreWheel\\\"\\n      ],\\n      \\\"NUT\\\": [\\n        \\\"nutObject\\\"\\n      ],\\n      \\\"HUB\\\": [\\n        \\\"hubObject\\\"\\n      ],\\n      \\\"SMALL_OBJECT\\\": [\\n        \\\"wrenchSmall\\\",\\n        \\\"jackSmall\\\",\\n        \\\"pumpSmall\\\",\\n        \\\"flatTyreSmall\\\",\\n        \\\"spareTyreSmall\\\",\\n        \\\"nutSmall\\\"\\n      ],\\n      \\\"ROBOT\\\": [\\n        \\\"robot\\\"\\n      ]\\n    }\\n  },\\n  \\\"predicates\\\": {\\n    \\\"list\\\": {\\n      \\\"isAt\\\": [\\n        \\\"Predicates\\\",\\n        \\\"InitialStates\\\"\\n      ],\\n      \\\"inContainer\\\": [\\n        \\\"Predicates\\\",\\n        \\\"InitialStates\\\",\\n        \\\"GoalStates\\\"\\n      ],\\n      \\\"holdingTool\\\": [\\n        \\\"Predicates\\\"\\n      ],\\n      \\\"attachedTyre\\\": [\\n        \\\"Predicates\\\",\\n        \\\"InitialStates\\\",\\n        \\\"GoalStates\\\"\\n      ],\\n      \\\"securedNut\\\": [\\n        \\\"Predicates\\\",\\n        \\\"InitialStates\\\",\\n        \\\"GoalStates\\\"\\n      ],\\n      \\\"isLifted\\\": [\\n        \\\"Predicates\\\",\\n        \\\"InitialStates\\\"\\n      ],\\n      \\\"holdingSmallObject\\\": [\\n        \\\"Predicates\\\"\\n      ]\\n    },\\n    \\\"paramList\\\": {\\n      \\\"isAt\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"ROBOT,LOCATION\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"isAt(ROBOT, LOCATION)\\\"\\n        ],\\n        \\\"InitialStates\\\": [\\n          \\\"ROBOT,LOCATION\\\"\\n        ],\\n        \\\"_InitialStates\\\": [\\n          \\\"isAt(robot, carSide)\\\"\\n        ]\\n      },\\n      \\\"inContainer\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"SMALL_OBJECT,CONTAINER\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"inContainer(SMALL_OBJECT, CONTAINER)\\\"\\n        ],\\n        \\\"InitialStates\\\": [\\n          \\\"SMALL_OBJECT,CONTAINER\\\",\\n          \\\"SMALL_OBJECT,CONTAINER\\\",\\n          \\\"SMALL_OBJECT,CONTAINER\\\",\\n          \\\"SMALL_OBJECT,CONTAINER\\\",\\n          \\\"SMALL_OBJECT,CONTAINER\\\",\\n          \\\"SMALL_OBJECT,CONTAINER\\\"\\n        ],\\n        \\\"_InitialStates\\\": [\\n          \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n          \\\"inContainer(jackSmall, bootContainer)\\\",\\n          \\\"inContainer(pumpSmall, bootContainer)\\\",\\n          \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n          \\\"inContainer(spareTyreSmall, bootContainer)\\\",\\n          \\\"inContainer(nutSmall, bootContainer)\\\"\\n        ],\\n        \\\"GoalStates\\\": [\\n          \\\"SMALL_OBJECT,CONTAINER\\\",\\n          \\\"SMALL_OBJECT,CONTAINER\\\",\\n          \\\"SMALL_OBJECT,CONTAINER\\\",\\n          \\\"SMALL_OBJECT,CONTAINER\\\"\\n        ],\\n        \\\"_GoalStates\\\": [\\n          \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n          \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n          \\\"inContainer(jackSmall, bootContainer)\\\",\\n          \\\"inContainer(pumpSmall, bootContainer)\\\"\\n        ]\\n      },\\n      \\\"holdingTool\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"ROBOT,TOOL\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"holdingTool(ROBOT, TOOL)\\\"\\n        ]\\n      },\\n      \\\"attachedTyre\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"HUB,WHEEL\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"attachedTyre(HUB, WHEEL)\\\"\\n        ],\\n        \\\"InitialStates\\\": [\\n          \\\"HUB,WHEEL\\\"\\n        ],\\n        \\\"_InitialStates\\\": [\\n          \\\"attachedTyre(hubObject, flatTyreWheel)\\\"\\n        ],\\n        \\\"GoalStates\\\": [\\n          \\\"HUB,WHEEL\\\"\\n        ],\\n        \\\"_GoalStates\\\": [\\n          \\\"attachedTyre(hubObject, spareTyreWheel)\\\"\\n        ]\\n      },\\n      \\\"securedNut\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"HUB,NUT\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"securedNut(HUB, NUT)\\\"\\n        ],\\n        \\\"InitialStates\\\": [\\n          \\\"HUB,NUT\\\"\\n        ],\\n        \\\"_InitialStates\\\": [\\n          \\\"securedNut(hubObject, nutObject)\\\"\\n        ],\\n        \\\"GoalStates\\\": [\\n          \\\"HUB,NUT\\\"\\n        ],\\n        \\\"_GoalStates\\\": [\\n          \\\"securedNut(hubObject, nutObject)\\\"\\n        ]\\n      },\\n      \\\"isLifted\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"LOCATION\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"isLifted(LOCATION)\\\"\\n        ],\\n        \\\"InitialStates\\\": [\\n          \\\"LOCATION\\\"\\n        ],\\n        \\\"_InitialStates\\\": [\\n          \\\"!isLifted(carSide)\\\"\\n        ]\\n      },\\n      \\\"holdingSmallObject\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"ROBOT,SMALL_OBJECT\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"holdingSmallObject(ROBOT, SMALL_OBJECT)\\\"\\n        ]\\n      }\\n    }\\n  },\\n  \\\"actions\\\": {\\n    \\\"name\\\": [\\n      \\\"move\\\",\\n      \\\"fetch\\\",\\n      \\\"undoNut\\\",\\n      \\\"useJack\\\",\\n      \\\"removeTyre\\\",\\n      \\\"attachTyre\\\",\\n      \\\"doUpNut\\\",\\n      \\\"lowerJack\\\",\\n      \\\"returnToBoot\\\"\\n    ],\\n    \\\"list\\\": {\\n      \\\"isAt\\\": [\\n        \\\"Actions.move in preconditions\\\",\\n        \\\"Actions.move in effects\\\",\\n        \\\"Actions.fetch in preconditions\\\",\\n        \\\"Actions.undoNut in preconditions\\\",\\n        \\\"Actions.useJack in preconditions\\\",\\n        \\\"Actions.removeTyre in preconditions\\\",\\n        \\\"Actions.attachTyre in preconditions\\\",\\n        \\\"Actions.doUpNut in preconditions\\\",\\n        \\\"Actions.lowerJack in preconditions\\\",\\n        \\\"Actions.returnToBoot in preconditions\\\"\\n      ],\\n      \\\"inContainer\\\": [\\n        \\\"Actions.fetch in preconditions\\\",\\n        \\\"Actions.fetch in effects\\\",\\n        \\\"Actions.returnToBoot in effects\\\"\\n      ],\\n      \\\"holdingSmallObject\\\": [\\n        \\\"Actions.fetch in effects\\\",\\n        \\\"Actions.returnToBoot in preconditions\\\",\\n        \\\"Actions.returnToBoot in effects\\\"\\n      ],\\n      \\\"holdingTool\\\": [\\n        \\\"Actions.undoNut in preconditions\\\",\\n        \\\"Actions.useJack in preconditions\\\",\\n        \\\"Actions.doUpNut in preconditions\\\",\\n        \\\"Actions.lowerJack in preconditions\\\"\\n      ],\\n      \\\"securedNut\\\": [\\n        \\\"Actions.undoNut in preconditions\\\",\\n        \\\"Actions.undoNut in effects\\\",\\n        \\\"Actions.removeTyre in preconditions\\\",\\n        \\\"Actions.doUpNut in effects\\\"\\n      ],\\n      \\\"isLifted\\\": [\\n        \\\"Actions.useJack in preconditions\\\",\\n        \\\"Actions.useJack in effects\\\",\\n        \\\"Actions.removeTyre in preconditions\\\",\\n        \\\"Actions.attachTyre in preconditions\\\",\\n        \\\"Actions.lowerJack in preconditions\\\",\\n        \\\"Actions.lowerJack in effects\\\"\\n      ],\\n      \\\"attachedTyre\\\": [\\n        \\\"Actions.removeTyre in preconditions\\\",\\n        \\\"Actions.removeTyre in effects\\\",\\n        \\\"Actions.attachTyre in preconditions\\\",\\n        \\\"Actions.attachTyre in effects\\\",\\n        \\\"Actions.doUpNut in preconditions\\\"\\n      ]\\n    },\\n    \\\"paramList\\\": {\\n      \\\"isAt\\\": {\\n        \\\"Actions.move in preconditions\\\": [\\n          \\\"robot,toLocation\\\"\\n        ],\\n        \\\"_Actions.move in preconditions\\\": [\\n          \\\"!isAt(robot, toLocation)\\\"\\n        ],\\n        \\\"Actions.move in effects\\\": [\\n          \\\"robot,toLocation\\\"\\n        ],\\n        \\\"_Actions.move in effects\\\": [\\n          \\\"isAt(robot, toLocation)\\\"\\n        ],\\n        \\\"Actions.fetch in preconditions\\\": [\\n          \\\"robot,carSide\\\"\\n        ],\\n        \\\"_Actions.fetch in preconditions\\\": [\\n          \\\"isAt(robot, carSide)\\\"\\n        ],\\n        \\\"Actions.undoNut in preconditions\\\": [\\n          \\\"robot,carSide\\\"\\n        ],\\n        \\\"_Actions.undoNut in preconditions\\\": [\\n          \\\"isAt(robot, carSide)\\\"\\n        ],\\n        \\\"Actions.useJack in preconditions\\\": [\\n          \\\"robot,location\\\"\\n        ],\\n        \\\"_Actions.useJack in preconditions\\\": [\\n          \\\"isAt(robot, location)\\\"\\n        ],\\n        \\\"Actions.removeTyre in preconditions\\\": [\\n          \\\"robot,location\\\"\\n        ],\\n        \\\"_Actions.removeTyre in preconditions\\\": [\\n          \\\"isAt(robot, location)\\\"\\n        ],\\n        \\\"Actions.attachTyre in preconditions\\\": [\\n          \\\"robot,location\\\"\\n        ],\\n        \\\"_Actions.attachTyre in preconditions\\\": [\\n          \\\"isAt(robot, location)\\\"\\n        ],\\n        \\\"Actions.doUpNut in preconditions\\\": [\\n          \\\"robot,carSide\\\"\\n        ],\\n        \\\"_Actions.doUpNut in preconditions\\\": [\\n          \\\"isAt(robot, carSide)\\\"\\n        ],\\n        \\\"Actions.lowerJack in preconditions\\\": [\\n          \\\"robot,location\\\"\\n        ],\\n        \\\"_Actions.lowerJack in preconditions\\\": [\\n          \\\"isAt(robot, location)\\\"\\n        ],\\n        \\\"Actions.returnToBoot in preconditions\\\": [\\n          \\\"robot,carSide\\\"\\n        ],\\n        \\\"_Actions.returnToBoot in preconditions\\\": [\\n          \\\"isAt(robot, carSide)\\\"\\n        ]\\n      },\\n      \\\"inContainer\\\": {\\n        \\\"Actions.fetch in preconditions\\\": [\\n          \\\"smallObject,container\\\"\\n        ],\\n        \\\"_Actions.fetch in preconditions\\\": [\\n          \\\"inContainer(smallObject, container)\\\"\\n        ],\\n        \\\"Actions.fetch in effects\\\": [\\n          \\\"smallObject,container\\\"\\n        ],\\n        \\\"_Actions.fetch in effects\\\": [\\n          \\\"!inContainer(smallObject, container)\\\"\\n        ],\\n        \\\"Actions.returnToBoot in effects\\\": [\\n          \\\"smallObject,container\\\"\\n        ],\\n        \\\"_Actions.returnToBoot in effects\\\": [\\n          \\\"inContainer(smallObject, container)\\\"\\n        ]\\n      },\\n      \\\"holdingSmallObject\\\": {\\n        \\\"Actions.fetch in effects\\\": [\\n          \\\"robot,smallObject\\\"\\n        ],\\n        \\\"_Actions.fetch in effects\\\": [\\n          \\\"holdingSmallObject(robot, smallObject)\\\"\\n        ],\\n        \\\"Actions.returnToBoot in preconditions\\\": [\\n          \\\"robot,smallObject\\\"\\n        ],\\n        \\\"_Actions.returnToBoot in preconditions\\\": [\\n          \\\"holdingSmallObject(robot, smallObject)\\\"\\n        ],\\n        \\\"Actions.returnToBoot in effects\\\": [\\n          \\\"robot,smallObject\\\"\\n        ],\\n        \\\"_Actions.returnToBoot in effects\\\": [\\n          \\\"!holdingSmallObject(robot, smallObject)\\\"\\n        ]\\n      },\\n      \\\"holdingTool\\\": {\\n        \\\"Actions.undoNut in preconditions\\\": [\\n          \\\"robot,wrench\\\"\\n        ],\\n        \\\"_Actions.undoNut in preconditions\\\": [\\n          \\\"holdingTool(robot, wrench)\\\"\\n        ],\\n        \\\"Actions.useJack in preconditions\\\": [\\n          \\\"robot,jack\\\"\\n        ],\\n        \\\"_Actions.useJack in preconditions\\\": [\\n          \\\"holdingTool(robot, jack)\\\"\\n        ],\\n        \\\"Actions.doUpNut in preconditions\\\": [\\n          \\\"robot,wrench\\\"\\n        ],\\n        \\\"_Actions.doUpNut in preconditions\\\": [\\n          \\\"holdingTool(robot, wrench)\\\"\\n        ],\\n        \\\"Actions.lowerJack in preconditions\\\": [\\n          \\\"robot,jack\\\"\\n        ],\\n        \\\"_Actions.lowerJack in preconditions\\\": [\\n          \\\"holdingTool(robot, jack)\\\"\\n        ]\\n      },\\n      \\\"securedNut\\\": {\\n        \\\"Actions.undoNut in preconditions\\\": [\\n          \\\"hub,nut\\\"\\n        ],\\n        \\\"_Actions.undoNut in preconditions\\\": [\\n          \\\"securedNut(hub, nut)\\\"\\n        ],\\n        \\\"Actions.undoNut in effects\\\": [\\n          \\\"hub,nut\\\"\\n        ],\\n        \\\"_Actions.undoNut in effects\\\": [\\n          \\\"!securedNut(hub, nut)\\\"\\n        ],\\n        \\\"Actions.removeTyre in preconditions\\\": [\\n          \\\"hub,nut\\\"\\n        ],\\n        \\\"_Actions.removeTyre in preconditions\\\": [\\n          \\\"!securedNut(hub, nut)\\\"\\n        ],\\n        \\\"Actions.doUpNut in effects\\\": [\\n          \\\"hub,nut\\\"\\n        ],\\n        \\\"_Actions.doUpNut in effects\\\": [\\n          \\\"securedNut(hub, nut)\\\"\\n        ]\\n      },\\n      \\\"isLifted\\\": {\\n        \\\"Actions.useJack in preconditions\\\": [\\n          \\\"location\\\"\\n        ],\\n        \\\"_Actions.useJack in preconditions\\\": [\\n          \\\"!isLifted(location)\\\"\\n        ],\\n        \\\"Actions.useJack in effects\\\": [\\n          \\\"location\\\"\\n        ],\\n        \\\"_Actions.useJack in effects\\\": [\\n          \\\"isLifted(location)\\\"\\n        ],\\n        \\\"Actions.removeTyre in preconditions\\\": [\\n          \\\"location\\\"\\n        ],\\n        \\\"_Actions.removeTyre in preconditions\\\": [\\n          \\\"isLifted(location)\\\"\\n        ],\\n        \\\"Actions.attachTyre in preconditions\\\": [\\n          \\\"location\\\"\\n        ],\\n        \\\"_Actions.attachTyre in preconditions\\\": [\\n          \\\"isLifted(location)\\\"\\n        ],\\n        \\\"Actions.lowerJack in preconditions\\\": [\\n          \\\"location\\\"\\n        ],\\n        \\\"_Actions.lowerJack in preconditions\\\": [\\n          \\\"isLifted(location)\\\"\\n        ],\\n        \\\"Actions.lowerJack in effects\\\": [\\n          \\\"location\\\"\\n        ],\\n        \\\"_Actions.lowerJack in effects\\\": [\\n          \\\"!isLifted(location)\\\"\\n        ]\\n      },\\n      \\\"attachedTyre\\\": {\\n        \\\"Actions.removeTyre in preconditions\\\": [\\n          \\\"hub,wheel\\\"\\n        ],\\n        \\\"_Actions.removeTyre in preconditions\\\": [\\n          \\\"attachedTyre(hub, wheel)\\\"\\n        ],\\n        \\\"Actions.removeTyre in effects\\\": [\\n          \\\"hub,wheel\\\"\\n        ],\\n        \\\"_Actions.removeTyre in effects\\\": [\\n          \\\"!attachedTyre(hub, wheel)\\\"\\n        ],\\n        \\\"Actions.attachTyre in preconditions\\\": [\\n          \\\"hub,wheel\\\"\\n        ],\\n        \\\"_Actions.attachTyre in preconditions\\\": [\\n          \\\"!attachedTyre(hub, wheel)\\\"\\n        ],\\n        \\\"Actions.attachTyre in effects\\\": [\\n          \\\"hub,wheel\\\"\\n        ],\\n        \\\"_Actions.attachTyre in effects\\\": [\\n          \\\"attachedTyre(hub, wheel)\\\"\\n        ],\\n        \\\"Actions.doUpNut in preconditions\\\": [\\n          \\\"hub,wheel\\\"\\n        ],\\n        \\\"_Actions.doUpNut in preconditions\\\": [\\n          \\\"attachedTyre(hub, wheel)\\\"\\n        ]\\n      }\\n    }\\n  },\\n  \\\"errors\\\": [\\n    {\\n      \\\"type\\\": \\\"Undeclared Parameter\\\",\\n      \\\"source\\\": \\\"Actions.fetch in preconditions.isAt\\\",\\n      \\\"message\\\": \\\"The parameter 'carSide' is not included in signature of action Actions.fetch in preconditions\\\",\\n      \\\"suggestions\\\": [\\n        \\\"Use only parameter of the action or add a new parameter in the action\\\"\\n      ]\\n    },\\n    {\\n      \\\"type\\\": \\\"Wrong Types\\\",\\n      \\\"source\\\": \\\"Actions.fetch in preconditions.isAt\\\",\\n      \\\"message\\\": \\\"The type of the parameters used in the predicate 'isAt' do not match the definition of the same predicate in 'Predicates'\\\",\\n      \\\"suggestions\\\": [\\n        \\\"Make sure to use parameter of types as defined in 'Predicates' or create a new predicate\\\"\\n      ]\\n    },\\n    {\\n      \\\"type\\\": \\\"Undeclared Parameter\\\",\\n      \\\"source\\\": \\\"Actions.undoNut in preconditions.isAt\\\",\\n      \\\"message\\\": \\\"The parameter 'carSide' is not included in signature of action Actions.undoNut in preconditions\\\",\\n      \\\"suggestions\\\": [\\n        \\\"Use only parameter of the action or add a new parameter in the action\\\"\\n      ]\\n    },\\n    {\\n      \\\"type\\\": \\\"Wrong Types\\\",\\n      \\\"source\\\": \\\"Actions.undoNut in preconditions.isAt\\\",\\n      \\\"message\\\": \\\"The type of the parameters used in the predicate 'isAt' do not match the definition of the same predicate in 'Predicates'\\\",\\n      \\\"suggestions\\\": [\\n        \\\"Make sure to use parameter of types as defined in 'Predicates' or create a new predicate\\\"\\n      ]\\n    },\\n    {\\n      \\\"type\\\": \\\"Undeclared Parameter\\\",\\n      \\\"source\\\": \\\"Actions.doUpNut in preconditions.isAt\\\",\\n      \\\"message\\\": \\\"The parameter 'carSide' is not included in signature of action Actions.doUpNut in preconditions\\\",\\n      \\\"suggestions\\\": [\\n        \\\"Use only parameter of the action or add a new parameter in the action\\\"\\n      ]\\n    },\\n    {\\n      \\\"type\\\": \\\"Wrong Types\\\",\\n      \\\"source\\\": \\\"Actions.doUpNut in preconditions.isAt\\\",\\n      \\\"message\\\": \\\"The type of the parameters used in the predicate 'isAt' do not match the definition of the same predicate in 'Predicates'\\\",\\n      \\\"suggestions\\\": [\\n        \\\"Make sure to use parameter of types as defined in 'Predicates' or create a new predicate\\\"\\n      ]\\n    },\\n    {\\n      \\\"type\\\": \\\"Undeclared Parameter\\\",\\n      \\\"source\\\": \\\"Actions.returnToBoot in preconditions.isAt\\\",\\n      \\\"message\\\": \\\"The parameter 'carSide' is not included in signature of action Actions.returnToBoot in preconditions\\\",\\n      \\\"suggestions\\\": [\\n        \\\"Use only parameter of the action or add a new parameter in the action\\\"\\n      ]\\n    },\\n    {\\n      \\\"type\\\": \\\"Wrong Types\\\",\\n      \\\"source\\\": \\\"Actions.returnToBoot in preconditions.isAt\\\",\\n      \\\"message\\\": \\\"The type of the parameters used in the predicate 'isAt' do not match the definition of the same predicate in 'Predicates'\\\",\\n      \\\"suggestions\\\": [\\n        \\\"Make sure to use parameter of types as defined in 'Predicates' or create a new predicate\\\"\\n      ]\\n    }\\n  ]\\n}\",\"fileTypeName\":\"JSON\",\"fileType\":\"text/json\",\"iconURL\":\"/fileServer/pictures/JSON_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":323,\"location\":\"-23810 -14650\",\"editorPosition\":[451,391,500,450],\"group\":378},\n{\"label\":\"Planner Spec\",\"category\":\"DataFlow_Data\",\"size\":\"160 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a JSON object or array\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a JSON object or array\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"{\\n  \\\"Objects\\\": {\\n    \\\"LOCATION\\\": [\\n      \\\"carSide\\\"\\n    ],\\n    \\\"CONTAINER\\\": [\\n      \\\"bootContainer\\\"\\n    ],\\n    \\\"TOOL\\\": [\\n      \\\"wrenchTool\\\",\\n      \\\"jackTool\\\",\\n      \\\"pumpTool\\\"\\n    ],\\n    \\\"WHEEL\\\": [\\n      \\\"flatTyreWheel\\\",\\n      \\\"spareTyreWheel\\\"\\n    ],\\n    \\\"NUT\\\": [\\n      \\\"nutObject\\\"\\n    ],\\n    \\\"HUB\\\": [\\n      \\\"hubObject\\\"\\n    ],\\n    \\\"SMALL_OBJECT\\\": [\\n      \\\"wrenchSmall\\\",\\n      \\\"jackSmall\\\",\\n      \\\"pumpSmall\\\",\\n      \\\"flatTyreSmall\\\",\\n      \\\"spareTyreSmall\\\",\\n      \\\"nutSmall\\\"\\n    ],\\n    \\\"ROBOT\\\": [\\n      \\\"robot\\\"\\n    ]\\n  },\\n  \\\"Predicates\\\": [\\n    \\\"isAt(ROBOT, LOCATION)\\\",\\n    \\\"inContainer(SMALL_OBJECT, CONTAINER)\\\",\\n    \\\"holdingTool(ROBOT, TOOL)\\\",\\n    \\\"attachedTyre(HUB, WHEEL)\\\",\\n    \\\"securedNut(HUB, NUT)\\\",\\n    \\\"isLifted(LOCATION)\\\",\\n    \\\"holdingSmallObject(ROBOT, SMALL_OBJECT)\\\"\\n  ],\\n  \\\"Actions\\\": [\\n    {\\n      \\\"action\\\": \\\"move(robot: ROBOT, toLocation: LOCATION)\\\",\\n      \\\"description\\\": \\\"Robot moves to a specified location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"!isAt(robot, toLocation)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"isAt(robot, toLocation)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"fetch(robot: ROBOT, smallObject: SMALL_OBJECT, container: CONTAINER)\\\",\\n      \\\"description\\\": \\\"Robot fetches a small object from a container.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"inContainer(smallObject, container)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"holdingSmallObject(robot, smallObject)\\\",\\n        \\\"!inContainer(smallObject, container)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"undoNut(robot: ROBOT, hub: HUB, nut: NUT, wrench: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot uses the wrench tool to undo the nut securing the tyre.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, wrench)\\\",\\n        \\\"securedNut(hub, nut)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!securedNut(hub, nut)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"useJack(robot: ROBOT, location: LOCATION, jack: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot uses the jack tool to lift the car at location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, jack)\\\",\\n        \\\"!isLifted(location)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"isLifted(location)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"removeTyre(robot: ROBOT, hub: HUB, wheel: WHEEL, location: LOCATION, nut: NUT)\\\",\\n      \\\"description\\\": \\\"Robot removes the wheel (expecting it to be flat) from the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"!securedNut(hub, nut)\\\",\\n        \\\"attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!attachedTyre(hub, wheel)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"attachTyre(robot: ROBOT, hub: HUB, wheel: WHEEL, location: LOCATION)\\\",\\n      \\\"description\\\": \\\"Robot attaches a wheel (expecting it to be a spare) to the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"!attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"attachedTyre(hub, wheel)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"doUpNut(robot: ROBOT, hub: HUB, nut: NUT, wrench: TOOL, wheel: WHEEL)\\\",\\n      \\\"description\\\": \\\"Robot tightens the nut to secure the wheel (expecting it to be the spare) on the hub.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingTool(robot, wrench)\\\",\\n        \\\"attachedTyre(hub, wheel)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"securedNut(hub, nut)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"lowerJack(robot: ROBOT, location: LOCATION, jack: TOOL)\\\",\\n      \\\"description\\\": \\\"Robot lowers the jack to bring the car down at location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"isLifted(location)\\\",\\n        \\\"holdingTool(robot, jack)\\\",\\n        \\\"isAt(robot, location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!isLifted(location)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"returnToBoot(robot: ROBOT, smallObject: SMALL_OBJECT, container: CONTAINER)\\\",\\n      \\\"description\\\": \\\"Robot returns the small object to the boot container.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holdingSmallObject(robot, smallObject)\\\",\\n        \\\"isAt(robot, carSide)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!holdingSmallObject(robot, smallObject)\\\",\\n        \\\"inContainer(smallObject, container)\\\"\\n      ]\\n    }\\n  ],\\n  \\\"InitialStates\\\": [\\n    \\\"isAt(robot, carSide)\\\",\\n    \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n    \\\"inContainer(jackSmall, bootContainer)\\\",\\n    \\\"inContainer(pumpSmall, bootContainer)\\\",\\n    \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(spareTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(nutSmall, bootContainer)\\\",\\n    \\\"attachedTyre(hubObject, flatTyreWheel)\\\",\\n    \\\"securedNut(hubObject, nutObject)\\\",\\n    \\\"!isLifted(carSide)\\\"\\n  ],\\n  \\\"GoalStates\\\": [\\n    \\\"attachedTyre(hubObject, spareTyreWheel)\\\",\\n    \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n    \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n    \\\"inContainer(jackSmall, bootContainer)\\\",\\n    \\\"inContainer(pumpSmall, bootContainer)\\\",\\n    \\\"securedNut(hubObject, nutObject)\\\"\\n  ],\\n  \\\"Plan\\\": []\\n}\",\"fileTypeName\":\"JSON\",\"fileType\":\"text/json\",\"iconURL\":\"/fileServer/pictures/JSON_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":325,\"location\":\"-24940 -14650.1\",\"editorPosition\":[170,69,1193,1165],\"group\":378},\n{\"label\":\"Planner Specs\",\"category\":\"DataFlow_Data\",\"size\":\"190 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a JSON object or array\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a JSON object or array\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\" {\\n      \\\"Objects\\\": {\\n        \\\"LOCATION\\\": [\\n          \\\"carSide\\\"\\n        ],\\n        \\\"CONTAINER\\\": [\\n          \\\"bootContainer\\\"\\n        ],\\n        \\\"TOOL\\\": [\\n          \\\"wrenchTool\\\",\\n          \\\"jackTool\\\",\\n          \\\"pumpTool\\\"\\n        ],\\n        \\\"WHEEL\\\": [\\n          \\\"flatTyreWheel\\\",\\n          \\\"spareTyreWheel\\\"\\n        ],\\n        \\\"NUT\\\": [\\n          \\\"nutObject\\\"\\n        ],\\n        \\\"HUB\\\": [\\n          \\\"hubObject\\\"\\n        ],\\n        \\\"SMALL_OBJECT\\\": [\\n          \\\"wrenchSmall\\\",\\n          \\\"jackSmall\\\",\\n          \\\"pumpSmall\\\",\\n          \\\"flatTyreSmall\\\",\\n          \\\"spareTyreSmall\\\",\\n          \\\"nutSmall\\\"\\n        ],\\n        \\\"ROBOT\\\": [\\n          \\\"robot\\\"\\n        ]\\n      },\\n      \\\"Predicates\\\": [\\n        \\\"isAt(ROBOT, LOCATION)\\\",\\n        \\\"inContainer(SMALL_OBJECT, CONTAINER)\\\",\\n        \\\"holdingTool(ROBOT, TOOL)\\\",\\n        \\\"attachedTyre(HUB, WHEEL)\\\",\\n        \\\"securedNut(HUB, NUT)\\\",\\n        \\\"isLifted(LOCATION)\\\",\\n        \\\"holdingSmallObject(ROBOT, SMALL_OBJECT)\\\"\\n      ],\\n      \\\"Actions\\\": [\\n        {\\n          \\\"action\\\": \\\"move(robot: ROBOT, toLocation: LOCATION)\\\",\\n          \\\"description\\\": \\\"Robot moves to a specified location.\\\",\\n          \\\"preconditions\\\": [\\n            \\\"!isAt(robot, toLocation)\\\"\\n          ],\\n          \\\"effects\\\": [\\n            \\\"isAt(robot, toLocation)\\\"\\n          ]\\n        },\\n        {\\n          \\\"action\\\": \\\"fetch(robot: ROBOT, smallObject: SMALL_OBJECT, container: CONTAINER)\\\",\\n          \\\"description\\\": \\\"Robot fetches a small object from a container.\\\",\\n          \\\"preconditions\\\": [\\n            \\\"inContainer(smallObject, container)\\\"\\n          ],\\n          \\\"effects\\\": [\\n            \\\"holdingSmallObject(robot, smallObject)\\\",\\n            \\\"!inContainer(smallObject, container)\\\"\\n          ]\\n        },\\n        {\\n          \\\"action\\\": \\\"undoNut(robot: ROBOT, hub: HUB, nut: NUT, wrench: TOOL)\\\",\\n          \\\"description\\\": \\\"Robot uses the wrench tool to undo the nut securing the tyre.\\\",\\n          \\\"preconditions\\\": [\\n            \\\"holdingTool(robot, wrench)\\\",\\n            \\\"securedNut(hub, nut)\\\"\\n          ],\\n          \\\"effects\\\": [\\n            \\\"!securedNut(hub, nut)\\\"\\n          ]\\n        },\\n        {\\n          \\\"action\\\": \\\"useJack(robot: ROBOT, location: LOCATION, jack: TOOL)\\\",\\n          \\\"description\\\": \\\"Robot uses the jack tool to lift the car at location.\\\",\\n          \\\"preconditions\\\": [\\n            \\\"holdingTool(robot, jack)\\\",\\n            \\\"!isLifted(location)\\\"\\n          ],\\n          \\\"effects\\\": [\\n            \\\"isLifted(location)\\\"\\n          ]\\n        },\\n        {\\n          \\\"action\\\": \\\"removeTyre(robot: ROBOT, hub: HUB, wheel: WHEEL, location: LOCATION, nut: NUT)\\\",\\n          \\\"description\\\": \\\"Robot removes the wheel (expecting it to be flat) from the hub.\\\",\\n          \\\"preconditions\\\": [\\n            \\\"isLifted(location)\\\",\\n            \\\"!securedNut(hub, nut)\\\",\\n            \\\"attachedTyre(hub, wheel)\\\"\\n          ],\\n          \\\"effects\\\": [\\n            \\\"!attachedTyre(hub, wheel)\\\"\\n          ]\\n        },\\n        {\\n          \\\"action\\\": \\\"attachTyre(robot: ROBOT, hub: HUB, wheel: WHEEL, location: LOCATION, smallObject: SMALL_OBJECT)\\\",\\n          \\\"description\\\": \\\"Robot attaches a wheel (expecting it to be a spare) to the hub.\\\",\\n          \\\"preconditions\\\": [\\n            \\\"isLifted(location)\\\",\\n            \\\"holdingSmallObject(robot, smallObject)\\\",\\n            \\\"!attachedTyre(hub, wheel)\\\"\\n          ],\\n          \\\"effects\\\": [\\n            \\\"attachedTyre(hub, wheel)\\\",\\n            \\\"!holdingSmallObject(robot, smallObject)\\\"\\n          ]\\n        },\\n        {\\n          \\\"action\\\": \\\"doUpNut(robot: ROBOT, hub: HUB, nut: NUT, wrench: TOOL, wheel: WHEEL)\\\",\\n          \\\"description\\\": \\\"Robot tightens the nut to secure the wheel (expecting it to be the spare) on the hub.\\\",\\n          \\\"preconditions\\\": [\\n            \\\"holdingTool(robot, wrench)\\\",\\n            \\\"attachedTyre(hub, wheel)\\\"\\n          ],\\n          \\\"effects\\\": [\\n            \\\"securedNut(hub, nut)\\\"\\n          ]\\n        },\\n        {\\n          \\\"action\\\": \\\"lowerJack(robot: ROBOT, location: LOCATION, jack: TOOL)\\\",\\n          \\\"description\\\": \\\"Robot lowers the jack to bring the car down at location.\\\",\\n          \\\"preconditions\\\": [\\n            \\\"isLifted(location)\\\",\\n            \\\"holdingTool(robot, jack)\\\"\\n          ],\\n          \\\"effects\\\": [\\n            \\\"!isLifted(location)\\\"\\n          ]\\n        },\\n        {\\n          \\\"action\\\": \\\"returnToBoot(robot: ROBOT, smallObject: SMALL_OBJECT, container: CONTAINER)\\\",\\n          \\\"description\\\": \\\"Robot returns the small object to the boot container.\\\",\\n          \\\"preconditions\\\": [\\n            \\\"holdingSmallObject(robot, smallObject)\\\"\\n          ],\\n          \\\"effects\\\": [\\n            \\\"!holdingSmallObject(robot, smallObject)\\\",\\n            \\\"inContainer(smallObject, container)\\\"\\n          ]\\n        }\\n      ],\\n      \\\"InitialStates\\\": [\\n        \\\"isAt(robot, carSide)\\\",\\n        \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n        \\\"inContainer(jackSmall, bootContainer)\\\",\\n        \\\"inContainer(pumpSmall, bootContainer)\\\",\\n        \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n        \\\"inContainer(spareTyreSmall, bootContainer)\\\",\\n        \\\"inContainer(nutSmall, bootContainer)\\\",\\n        \\\"attachedTyre(hubObject, flatTyreWheel)\\\",\\n        \\\"securedNut(hubObject, nutObject)\\\",\\n        \\\"!isLifted(carSide)\\\"\\n      ],\\n      \\\"GoalStates\\\": [\\n        \\\"attachedTyre(hubObject, spareTyreWheel)\\\",\\n        \\\"inContainer(flatTyreSmall, bootContainer)\\\",\\n        \\\"inContainer(wrenchSmall, bootContainer)\\\",\\n        \\\"inContainer(jackSmall, bootContainer)\\\",\\n        \\\"inContainer(pumpSmall, bootContainer)\\\",\\n        \\\"securedNut(hubObject, nutObject)\\\"\\n      ],\\n      \\\"Plan\\\": []\\n    }\",\"fileTypeName\":\"JSON\",\"fileType\":\"text/json\",\"iconURL\":\"/fileServer/pictures/JSON_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":327,\"location\":\"-25720 -14660\",\"editorPosition\":[1247,82,600,701],\"group\":378},\n{\"label\":\"Info\",\"category\":\"DataFlow_Data\",\"size\":\"160 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a JSON object or array\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a JSON object or array\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"{\\n  \\\"objectsList\\\": {\\n    \\\"byName\\\": {\\n      \\\"ROBOT\\\": \\\"TYPE\\\",\\n      \\\"FURNITURE_APPLIANCE\\\": \\\"TYPE\\\",\\n      \\\"HOUSEHOLD_OBJECT\\\": \\\"TYPE\\\",\\n      \\\"STATE\\\": \\\"TYPE\\\",\\n      \\\"robot\\\": \\\"ROBOT\\\",\\n      \\\"diningTable\\\": \\\"FURNITURE_APPLIANCE\\\",\\n      \\\"sideTable\\\": \\\"FURNITURE_APPLIANCE\\\",\\n      \\\"drawer\\\": \\\"FURNITURE_APPLIANCE\\\",\\n      \\\"microwave\\\": \\\"FURNITURE_APPLIANCE\\\",\\n      \\\"stoveBurner\\\": \\\"FURNITURE_APPLIANCE\\\",\\n      \\\"cloth\\\": \\\"HOUSEHOLD_OBJECT\\\",\\n      \\\"apple\\\": \\\"HOUSEHOLD_OBJECT\\\",\\n      \\\"banana\\\": \\\"HOUSEHOLD_OBJECT\\\",\\n      \\\"bowl\\\": \\\"HOUSEHOLD_OBJECT\\\",\\n      \\\"lunchBox\\\": \\\"HOUSEHOLD_OBJECT\\\",\\n      \\\"occupied\\\": \\\"STATE\\\",\\n      \\\"empty\\\": \\\"STATE\\\"\\n    },\\n    \\\"byType\\\": {\\n      \\\"TYPE\\\": [\\n        \\\"ROBOT\\\",\\n        \\\"FURNITURE_APPLIANCE\\\",\\n        \\\"HOUSEHOLD_OBJECT\\\",\\n        \\\"STATE\\\"\\n      ],\\n      \\\"ROBOT\\\": [\\n        \\\"robot\\\"\\n      ],\\n      \\\"FURNITURE_APPLIANCE\\\": [\\n        \\\"diningTable\\\",\\n        \\\"sideTable\\\",\\n        \\\"drawer\\\",\\n        \\\"microwave\\\",\\n        \\\"stoveBurner\\\"\\n      ],\\n      \\\"HOUSEHOLD_OBJECT\\\": [\\n        \\\"cloth\\\",\\n        \\\"apple\\\",\\n        \\\"banana\\\",\\n        \\\"bowl\\\",\\n        \\\"lunchBox\\\"\\n      ],\\n      \\\"STATE\\\": [\\n        \\\"occupied\\\",\\n        \\\"empty\\\"\\n      ]\\n    }\\n  },\\n  \\\"predicates\\\": {\\n    \\\"list\\\": {\\n      \\\"atRobot\\\": [\\n        \\\"Predicates\\\",\\n        \\\"InitialStates\\\"\\n      ],\\n      \\\"supports\\\": [\\n        \\\"Predicates\\\",\\n        \\\"InitialStates\\\",\\n        \\\"GoalStates\\\"\\n      ],\\n      \\\"holds\\\": [\\n        \\\"Predicates\\\"\\n      ],\\n      \\\"isState\\\": [\\n        \\\"Predicates\\\"\\n      ],\\n      \\\"contains\\\": [\\n        \\\"Predicates\\\",\\n        \\\"GoalStates\\\"\\n      ]\\n    },\\n    \\\"paramList\\\": {\\n      \\\"atRobot\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"FURNITURE_APPLIANCE\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"atRobot(FURNITURE_APPLIANCE)\\\"\\n        ],\\n        \\\"InitialStates\\\": [\\n          \\\"FURNITURE_APPLIANCE\\\"\\n        ],\\n        \\\"_InitialStates\\\": [\\n          \\\"atRobot(diningTable)\\\"\\n        ]\\n      },\\n      \\\"supports\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"FURNITURE_APPLIANCE,HOUSEHOLD_OBJECT\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"supports(FURNITURE_APPLIANCE, HOUSEHOLD_OBJECT)\\\"\\n        ],\\n        \\\"InitialStates\\\": [\\n          \\\"FURNITURE_APPLIANCE,HOUSEHOLD_OBJECT\\\",\\n          \\\"FURNITURE_APPLIANCE,HOUSEHOLD_OBJECT\\\",\\n          \\\"FURNITURE_APPLIANCE,HOUSEHOLD_OBJECT\\\",\\n          \\\"FURNITURE_APPLIANCE,HOUSEHOLD_OBJECT\\\",\\n          \\\"FURNITURE_APPLIANCE,HOUSEHOLD_OBJECT\\\"\\n        ],\\n        \\\"_InitialStates\\\": [\\n          \\\"supports(diningTable, apple)\\\",\\n          \\\"supports(diningTable, banana)\\\",\\n          \\\"supports(diningTable, cloth)\\\",\\n          \\\"supports(sideTable, bowl)\\\",\\n          \\\"supports(drawer, lunchBox)\\\"\\n        ],\\n        \\\"GoalStates\\\": [\\n          \\\"FURNITURE_APPLIANCE,HOUSEHOLD_OBJECT\\\",\\n          \\\"FURNITURE_APPLIANCE,HOUSEHOLD_OBJECT\\\"\\n        ],\\n        \\\"_GoalStates\\\": [\\n          \\\"supports(diningTable, bowl)\\\",\\n          \\\"supports(drawer, lunchBox)\\\"\\n        ]\\n      },\\n      \\\"holds\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"HOUSEHOLD_OBJECT\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"holds(HOUSEHOLD_OBJECT)\\\"\\n        ]\\n      },\\n      \\\"isState\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"STATE\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"isState(STATE)\\\"\\n        ]\\n      },\\n      \\\"contains\\\": {\\n        \\\"Predicates\\\": [\\n          \\\"HOUSEHOLD_OBJECT,HOUSEHOLD_OBJECT\\\"\\n        ],\\n        \\\"_Predicates\\\": [\\n          \\\"contains(HOUSEHOLD_OBJECT, HOUSEHOLD_OBJECT)\\\"\\n        ],\\n        \\\"GoalStates\\\": [\\n          \\\"HOUSEHOLD_OBJECT,HOUSEHOLD_OBJECT\\\",\\n          \\\"HOUSEHOLD_OBJECT,HOUSEHOLD_OBJECT\\\",\\n          \\\"HOUSEHOLD_OBJECT,HOUSEHOLD_OBJECT\\\"\\n        ],\\n        \\\"_GoalStates\\\": [\\n          \\\"contains(bowl, apple)\\\",\\n          \\\"contains(bowl, banana)\\\",\\n          \\\"contains(lunchBox, cloth)\\\"\\n        ]\\n      }\\n    }\\n  },\\n  \\\"actions\\\": {\\n    \\\"name\\\": [\\n      \\\"navigate\\\",\\n      \\\"pickup\\\",\\n      \\\"place\\\",\\n      \\\"putIn\\\"\\n    ],\\n    \\\"list\\\": {\\n      \\\"atRobot\\\": [\\n        \\\"Actions.navigate in preconditions\\\",\\n        \\\"Actions.navigate in effects\\\",\\n        \\\"Actions.pickup in preconditions\\\",\\n        \\\"Actions.place in preconditions\\\"\\n      ],\\n      \\\"supports\\\": [\\n        \\\"Actions.pickup in preconditions\\\",\\n        \\\"Actions.pickup in effects\\\",\\n        \\\"Actions.place in effects\\\"\\n      ],\\n      \\\"isState\\\": [\\n        \\\"Actions.pickup in preconditions\\\",\\n        \\\"Actions.pickup in effects\\\",\\n        \\\"Actions.place in effects\\\",\\n        \\\"Actions.putIn in effects\\\"\\n      ],\\n      \\\"holds\\\": [\\n        \\\"Actions.pickup in effects\\\",\\n        \\\"Actions.place in preconditions\\\",\\n        \\\"Actions.place in effects\\\",\\n        \\\"Actions.putIn in preconditions\\\",\\n        \\\"Actions.putIn in effects\\\"\\n      ],\\n      \\\"contains\\\": [\\n        \\\"Actions.putIn in effects\\\"\\n      ]\\n    },\\n    \\\"paramList\\\": {\\n      \\\"atRobot\\\": {\\n        \\\"Actions.navigate in preconditions\\\": [\\n          \\\"fromLocation\\\",\\n          \\\"toLocation\\\"\\n        ],\\n        \\\"_Actions.navigate in preconditions\\\": [\\n          \\\"atRobot(fromLocation)\\\",\\n          \\\"!atRobot(toLocation)\\\"\\n        ],\\n        \\\"Actions.navigate in effects\\\": [\\n          \\\"fromLocation\\\",\\n          \\\"toLocation\\\"\\n        ],\\n        \\\"_Actions.navigate in effects\\\": [\\n          \\\"!atRobot(fromLocation)\\\",\\n          \\\"atRobot(toLocation)\\\"\\n        ],\\n        \\\"Actions.pickup in preconditions\\\": [\\n          \\\"location\\\"\\n        ],\\n        \\\"_Actions.pickup in preconditions\\\": [\\n          \\\"atRobot(location)\\\"\\n        ],\\n        \\\"Actions.place in preconditions\\\": [\\n          \\\"location\\\"\\n        ],\\n        \\\"_Actions.place in preconditions\\\": [\\n          \\\"atRobot(location)\\\"\\n        ]\\n      },\\n      \\\"supports\\\": {\\n        \\\"Actions.pickup in preconditions\\\": [\\n          \\\"location,item\\\"\\n        ],\\n        \\\"_Actions.pickup in preconditions\\\": [\\n          \\\"supports(location, item)\\\"\\n        ],\\n        \\\"Actions.pickup in effects\\\": [\\n          \\\"location,item\\\"\\n        ],\\n        \\\"_Actions.pickup in effects\\\": [\\n          \\\"!supports(location, item)\\\"\\n        ],\\n        \\\"Actions.place in effects\\\": [\\n          \\\"location,item\\\"\\n        ],\\n        \\\"_Actions.place in effects\\\": [\\n          \\\"supports(location, item)\\\"\\n        ]\\n      },\\n      \\\"isState\\\": {\\n        \\\"Actions.pickup in preconditions\\\": [\\n          \\\"state\\\"\\n        ],\\n        \\\"_Actions.pickup in preconditions\\\": [\\n          \\\"isState(state)\\\"\\n        ],\\n        \\\"Actions.pickup in effects\\\": [\\n          \\\"state\\\"\\n        ],\\n        \\\"_Actions.pickup in effects\\\": [\\n          \\\"!isState(state)\\\"\\n        ],\\n        \\\"Actions.place in effects\\\": [\\n          \\\"state\\\"\\n        ],\\n        \\\"_Actions.place in effects\\\": [\\n          \\\"!isState(state)\\\"\\n        ],\\n        \\\"Actions.putIn in effects\\\": [\\n          \\\"state\\\"\\n        ],\\n        \\\"_Actions.putIn in effects\\\": [\\n          \\\"!isState(state)\\\"\\n        ]\\n      },\\n      \\\"holds\\\": {\\n        \\\"Actions.pickup in effects\\\": [\\n          \\\"item\\\"\\n        ],\\n        \\\"_Actions.pickup in effects\\\": [\\n          \\\"holds(item)\\\"\\n        ],\\n        \\\"Actions.place in preconditions\\\": [\\n          \\\"item\\\"\\n        ],\\n        \\\"_Actions.place in preconditions\\\": [\\n          \\\"holds(item)\\\"\\n        ],\\n        \\\"Actions.place in effects\\\": [\\n          \\\"item\\\"\\n        ],\\n        \\\"_Actions.place in effects\\\": [\\n          \\\"!holds(item)\\\"\\n        ],\\n        \\\"Actions.putIn in preconditions\\\": [\\n          \\\"item\\\"\\n        ],\\n        \\\"_Actions.putIn in preconditions\\\": [\\n          \\\"holds(item)\\\"\\n        ],\\n        \\\"Actions.putIn in effects\\\": [\\n          \\\"item\\\"\\n        ],\\n        \\\"_Actions.putIn in effects\\\": [\\n          \\\"!holds(item)\\\"\\n        ]\\n      },\\n      \\\"contains\\\": {\\n        \\\"Actions.putIn in effects\\\": [\\n          \\\"container,item\\\"\\n        ],\\n        \\\"_Actions.putIn in effects\\\": [\\n          \\\"contains(container, item)\\\"\\n        ]\\n      }\\n    }\\n  },\\n  \\\"errors\\\": []\\n}\",\"fileTypeName\":\"JSON\",\"fileType\":\"text/json\",\"iconURL\":\"/fileServer/pictures/JSON_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":330,\"location\":\"-23980 -14360\",\"editorPosition\":[662,89,572,1163],\"group\":378},\n{\"label\":\"Generate Text Planner Specs STEP1\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":283,\"location\":\"-26140 -17700\",\"font\":\"175px sans-serif\"},\n{\"label\":\"SpecsV0Done\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":285,\"location\":\"-21990 -18235\",\"group\":283},\n{\"label\":\"Data to Event\",\"category\":\"DataFlow_ConvertToEvent\",\"size\":\"240 80\",\"color\":\"Plum\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"This input expects any input type.\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"This output returns an event when the input occurs.\"}],\"fileTypeName\":\"Convert To Event\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_ConvertToEvent\",\"key\":286,\"location\":\"-22350 -18275\",\"group\":283},\n{\"label\":\"AI template\",\"category\":\"DataFlow_Template\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"3in\",\"name\":\"scenario\"},{\"portId\":\"2in\",\"name\":\"doTrigger\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"doTrigger\",\"valueChanged\":true},{\"name\":\"matcher\",\"value\":\"{[^}]+}\",\"valueChanged\":true},{\"name\":\"matcherBraceLen\",\"value\":\"1\"}],\"isFile\":true,\"fileContent\":\"Your role is to transform a scenario description into a more systematic textual description that can be later used for creating a domain/problem file for a PDDL planner.\\n\\nGiven the following scenario:\\n{scenario}\\n\\nDo the following steps one after the other:\\n1) Identify an initial state for the problem described in the scenario.\\n2) Identify a goal state for the problem described in the scenario.\\n3) Identify a sequence of actions that would start from the initial state and end in the goal state.\\n4) Write then the list of identified actions (from point 3) and define for each of them (in textual form) the necessary precondition for them to be executable, and the effect that the action will generate\\n5) Identify the constraints of the problem like connecivity between locations, actor-action relations, object properties or states, ...\\nGenerate all information in a textual structured form:\",\"fileTypeName\":\"Template\",\"doCompute\":\"DataFlow_Template\",\"key\":287,\"location\":\"-23900 -18305\",\"editorPosition\":[492,97,500,450],\"group\":283},\n{\"label\":\"OpenAI GPT\",\"category\":\"DataFlow_LLM\",\"size\":\"240 80\",\"color\":\"Gold\",\"doCompute\":\"DataFlow_LLM\",\"in_\":[{\"portId\":\"1in\",\"name\":\"system\",\"tooltip\":\"this input expects a string \\nthat defines the system prompt\"},{\"portId\":\"2in\",\"name\":\"user\",\"tooltip\":\"this input expects a string \\nthat defines the user prompt\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"history\",\"tooltip\":\"this output is a JSON array \\nthat contains the dialog history\"},{\"portId\":\"2out\",\"name\":\"assistant\",\"tooltip\":\"this output is a string that \\ndefines the system answer\"}],\"props_\":[{\"name\":\"url\",\"value\":\"\",\"tooltip\":\"url of the server\"},{\"name\":\"model\",\"value\":\"gpt-4-0125-preview\",\"unit\":\"\",\"nameTooltip\":\"this property defines the\\nname ot the LLM model used\",\"valueTooltip\":\"gpt-4: 8,192 tokens\\ngpt-4-32k: 32,768 tokens\\ngpt-3.5-turbo: 4,097 tokens\\ngpt-3.5-turbo-16k: 16,385 tokens\",\"valueChanged\":true},{\"name\":\"hasHistory\",\"value\":\"false\",\"tooltip\":\"if true this property will create \\nan history based on each system output \\nand user input otherwise \\nno history is used nor fired\"},{\"name\":\"stream\",\"value\":false,\"tooltip\":\"true to get the response in streaming\"},{\"name\":\"maxRetry\",\"value\":\"3\",\"unit\":\"\",\"tooltip\":\"in case of error from the LLM server \\nthe query will be retried this number of time\"},{\"name\":\"timeOut\",\"value\":\"4\",\"unit\":\"s\",\"tooltip\":\"this property defines the time before retry\"},{\"name\":\"computeBarrier\",\"value\":\"user\",\"tooltip\":\"this property defines the AND combination of \\ninput names that will trigger a \\n\\\"doCompute\\\" call in the component\"}],\"fileTypeName\":\"LLM\",\"key\":290,\"location\":\"-23240 -18315\",\"group\":283},\n{\"label\":\"There is a robot that can move between rooms and pick up or drop balls with either of his two arms. Initially, all balls and the robot are in the first room. We want the balls to be in the second room.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"990 140\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":292,\"location\":\"-25550 -18555\",\"labelFont\":\"17px sans-serif\",\"group\":283},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":293,\"location\":\"-25710 -18565\",\"group\":283},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"300 300\",\"buttons_\":[{\"buttonMinSize\":\"180 180\",\"buttonFont\":\"70px sans-serif\",\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":294,\"location\":\"-26120 -18565\",\"group\":283},\n{\"label\":\"Gripper Scenario\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"470 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":295,\"location\":\"-25550 -18665\",\"group\":283},\n{\"label\":\"The AI agent here is a pizza making planner that has to plan to make a pizza with different solid and liquid ingredients. Solid ingredients are in separate bowls and liquid are in opened bottles all placed on a table. Near the table there is an oven warm and ready to be used. The pizza dough is already flat on a plate on the table. The list of solid ingredients is mozzarella, olives, mushrooms, salami, peperoni, gorgonzola, basilicum, oregano, salt and peper. The liquid ingredients are tomato sauce, olive oil.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"990 140\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":297,\"location\":\"-25550 -18145\",\"labelFont\":\"17px sans-serif\",\"group\":283},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":298,\"location\":\"-25710 -18155\",\"group\":283},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"300 300\",\"buttons_\":[{\"buttonMinSize\":\"180 180\",\"buttonFont\":\"70px sans-serif\",\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":300,\"location\":\"-26120 -18155\",\"group\":283},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"3out\",\"name\":\"out0\"},{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":303,\"location\":\"-24170 -18315\",\"group\":283},\n{\"label\":\"The AI agent here is a logistics planner that has to plan to transport packages within the locations in a city through a truck and between cities through an airplane. Within a city, the locations are directly linked, allowing trucks to travel between any two of these locations. Similarly, cities are directly connected to each other allowing airplanes to travel between any two cities. Each city is equipped with one truck and has a designated location that functions as an airport. There are five types of object: package, truck, plane, location, and city. There are multiple cities and each city can have multiple locations. Also, there is no limit to how many packages a truck or plane can carry (so in theory a truck or plane can carry an infinite number of packages).\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"990 140\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":329,\"location\":\"-25550 -17735\",\"labelFont\":\"17px sans-serif\",\"group\":283},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":331,\"location\":\"-25710 -17745\",\"group\":283},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"300 300\",\"buttons_\":[{\"buttonMinSize\":\"180 180\",\"buttonFont\":\"70px sans-serif\",\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":332,\"location\":\"-26120 -17745\",\"group\":283},\n{\"label\":\"Logistic Scenario\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"470 70\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":333,\"location\":\"-25550 -17840\",\"group\":283},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":335,\"location\":\"-25710 -17335\",\"group\":283},\n{\"label\":\"The AI agent here is a robot that has to replace a flat tyre with a spare one. This involves fetching the tools (wrench, jack, pump) from the boot, undoing the nuts on the flat tyre, jacking up the (appropriate) hub(s), removing the tyre, doing up the spare one, etc. There are three major object types: `small_object`, `container` and `hub`. The object type `small_object` covers tools, wheels and nuts. The `small_object` object type has three subtypes: `tool`, `wheel` and `nut`. The subtype `tool` covers tools like wrenches, jacks, pumps etc. The subtype `wheel` covers various wheels. The subtype `nut` covers various nuts. The object type `container` covers storage spaces like the boot in a car. The object type `hub` covers the hubs in the wheels of the car. Note that there is no restriction on how many objects the AI agent (i.e., the robot) can carry. Also note that each hub has only one nut. There is a location `car_side` to jack up and down the car and a location `target_wheel` to manipulate change the wheel. \",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"990 210\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":336,\"location\":\"-25550 -17325\",\"labelFont\":\"17px sans-serif\",\"group\":283,\"editorPosition\":[187,274,500,450]},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"300 300\",\"buttons_\":[{\"buttonMinSize\":\"180 180\",\"buttonFont\":\"70px sans-serif\",\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":337,\"location\":\"-26120 -17335\",\"group\":283},\n{\"label\":\"Tyreworld Scenario\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"470 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":338,\"location\":\"-25550 -17465\",\"group\":283},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":339,\"location\":\"-23230 -18575\",\"group\":283},\n{\"label\":\"Specs\",\"category\":\"DataFlow_Data\",\"size\":\"170 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"### Initial State Description:\\n\\n- The house contains a robot, several pieces of furnitureAppliance (e.g., diningTable, sideTable, drawer, microwave, stoveBurner), and householdObjects (cloth, apple, banana, bowl, lunchBox).\\n- The robot starts in the location of the diningTable.\\n- The diningTable supports the apple, banana, and cloth.\\n- The sideTable supports the bowl.\\n- The lunchBox is on the drawer.\\n- The robot's gripper is empty.\\n\\n### Goal State Description:\\n\\n- The robot has placed the apple and the banana into the bowl.\\n- The bowl (with the apple and banana inside) is on the diningTable.\\n- The cloth is in the lunchBox.\\n- The lunchBox (with the cloth inside) remains on the drawer.\\n\\n### Actions Sequence to Achieve Goal:\\n\\n1. **navigate(diningTable, sideTable)** - Robot moves from diningTable to sideTable.\\n2. **pickup(bowl, sideTable)** - Robot picks up the bowl from the sideTable.\\n3. **navigate(sideTable, diningTable)** - Robot moves back to diningTable with the bowl.\\n4. **place(bowl, diningTable)** - Robot places the bowl on the diningTable.\\n5. **pickup(apple, diningTable)** - Robot picks up the apple from the diningTable.\\n6. **putIn(apple, bowl)** - Robot puts the apple into the bowl.\\n7. **pickup(banana, diningTable)** - Robot picks up the banana from the diningTable.\\n8. **putIn(banana, bowl)** - Robot puts the banana into the bowl.\\n9. **navigate(diningTable, drawer)** - Robot moves to the drawer.\\n10. **pickup(cloth, diningTable)** - Robot picks up the cloth from the diningTable.\\n11. **putIn(cloth, lunchBox)** - Robot puts the cloth into the lunchBox.\\n\\n### Description of Actions:\\n\\n#### Action: navigate(fromLocation, toLocation)\\n- **Preconditions:**\\n  - The robot is at fromLocation.\\n- **Effects:**\\n  - The robot's location is updated to toLocation.\\n\\n#### Action: pickup(item, location)\\n- **Preconditions:**\\n  - The robot is at location.\\n  - The item is at location.\\n  - The robot's gripper is empty.\\n- **Effects:**\\n  - The item is in the robot's gripper.\\n\\n#### Action: place(item, location)\\n- **Preconditions:**\\n  - The robot is at location.\\n  - The item is in the robot's gripper.\\n- **Effects:**\\n  - The item is at location.\\n  - The robot's gripper is empty.\\n\\n#### Action: putIn(item, container)\\n- **Preconditions:**\\n  - The item is in the robot's gripper.\\n  - The container is at the robot's location.\\n  - The container can hold the item.\\n- **Effects:**\\n  - The item is in the container.\\n  - The robot's gripper is empty.\\n\\n### Constraints of the Problem:\\n\\n- The robot can only carry one item at a time due to having only one gripper.\\n- The robot cannot manipulate task-relevant items while holding unrelated items in its gripper.\\n- Small household items must be manipulated on or within furnitureAppliance pieces for adequate space.\\n- The connectivity between locations dictates the robot's ability to navigate; the robot can move between directly connected locations.\\n- furnitureAppliance items are immovable, indicating fixed locations within the problem space.\\n- householdObject items and their subtypes have specific interaction rules, such as being placeable within smallReceptacles or requiring specific surfaces for manipulation.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":342,\"location\":\"-22830 -18305\",\"editorPosition\":[708,770,709,435],\"group\":283},\n{\"label\":\"ScenarioName\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":349,\"location\":\"-21990 -18466.591\",\"group\":283},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":351,\"location\":\"-25710 -16925\",\"group\":283},\n{\"label\":\"The AI agent here is a household robot that can navigate to various large and normally immovable furniture pieces or appliances in the house to carry out household tasks. Note that the robot has only one gripper, so (a) it can only hold one object; (b) it shouldn't hold any other irrelevant objects in its gripper while performing some manipulation tasks (e.g., opening a drawer or closing a window); (c) operations on small household items should be carried out on furniture with a flat surface to get enough space for manipulation. There are three major types of objects in this domain: robot, furnitureAppliance, and householdObject. The object type furnitureAppliance covers large and normally immovable furniture pieces or appliances, such as stove burners, side tables, dining tables, drawer, cabinets, or microwaves. The object type householdObject covers all other small household items, such as handheld vacuum cleaners, cloth, apples, bananas, and small receptacles like bowls and lunch boxes. There is a subtype of householdObject called smallReceptacle that covers small receptacles like bowls, lunch boxes, plates etc. In this domain, the locations of the robot and small household items (e.g., apples, oranges, bowls, lunch boxes or lamps) are determined by large and normally immovable furniture pieces or appliances.\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"990 260\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":352,\"location\":\"-25550 -16915\",\"labelFont\":\"17px sans-serif\",\"group\":283},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"300 300\",\"buttons_\":[{\"buttonMinSize\":\"180 180\",\"buttonFont\":\"70px sans-serif\",\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":353,\"location\":\"-26120 -16925\",\"group\":283},\n{\"label\":\"Household Scenario\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"470 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":354,\"location\":\"-25550 -17085\",\"group\":283},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":359,\"location\":\"-24139.49990832411 -18455.10399227418\",\"group\":283},\n{\"label\":\"Pizza Scenario\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"470 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":361,\"location\":\"-25550 -18255\",\"group\":283},\n{\"label\":\"Prompt\",\"category\":\"DataFlow_Data\",\"size\":\"160 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"Your role is to transform a scenario description into a more systematic textual description that can be later used for creating a domain/problem file for a PDDL planner.\\n\\nGiven the following scenario:\\nThe AI agent here is a household robot that can navigate to various large and normally immovable furniture pieces or appliances in the house to carry out household tasks. Note that the robot has only one gripper, so (a) it can only hold one object; (b) it shouldn't hold any other irrelevant objects in its gripper while performing some manipulation tasks (e.g., opening a drawer or closing a window); (c) operations on small household items should be carried out on furniture with a flat surface to get enough space for manipulation. There are three major types of objects in this domain: robot, furnitureAppliance, and householdObject. The object type furnitureAppliance covers large and normally immovable furniture pieces or appliances, such as stove burners, side tables, dining tables, drawer, cabinets, or microwaves. The object type householdObject covers all other small household items, such as handheld vacuum cleaners, cloth, apples, bananas, and small receptacles like bowls and lunch boxes. There is a subtype of householdObject called smallReceptacle that covers small receptacles like bowls, lunch boxes, plates etc. In this domain, the locations of the robot and small household items (e.g., apples, oranges, bowls, lunch boxes or lamps) are determined by large and normally immovable furniture pieces or appliances.\\n\\nDo the following steps one after the other:\\n1) Identify an initial state for the problem described in the scenario.\\n2) Identify a goal state for the problem described in the scenario.\\n3) Identify a sequence of actions that would start from the initial state and end in the goal state.\\n4) Write then the list of identified actions (from point 3) and define for each of them (in textual form) the necessary precondition for them to be executable, and the effect that the action will generate\\n5) Identify the constraints of the problem like connecivity between locations, actor-action relations, object properties or states, ...\\nGenerate all information in a textual structured form:\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":362,\"location\":\"-23550 -18305\",\"editorPosition\":[708,770,709,435],\"group\":283},\n{\"label\":\"Scenario Name\",\"category\":\"DataFlow_Data\",\"size\":\"170 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"Household Scenario\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":363,\"location\":\"-22820 -18465\",\"editorPosition\":[708,770,709,435],\"group\":283},\n{\"label\":\"ScenarioSpecs\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":364,\"location\":\"-21990 -18325\",\"group\":283},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"},{\"portId\":\"3out\",\"name\":\"out3\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":367,\"location\":\"-22570 -18305.1\",\"group\":283},\n{\"label\":\"ScenarioSpecs\",\"category\":\"DataFlow_TunnelOut\",\"size\":\"220 80\",\"color\":\"Moccasin\",\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"Any data leaving the tunnel\"}],\"fileTypeName\":\"Tunnel Out\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelOut\",\"key\":372,\"location\":\"-26280 -15810\",\"group\":186},\n{\"label\":\"Specs\",\"category\":\"DataFlow_Data\",\"size\":\"170 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"### Initial State Description:\\n\\n- The house contains a robot, several pieces of furnitureAppliance (e.g., diningTable, sideTable, drawer, microwave, stoveBurner), and householdObjects (cloth, apple, banana, bowl, lunchBox).\\n- The robot starts in the location of the diningTable.\\n- The diningTable supports the apple, banana, and cloth.\\n- The sideTable supports the bowl.\\n- The lunchBox is on the drawer.\\n- The robot's gripper is empty.\\n\\n### Goal State Description:\\n\\n- The robot has placed the apple and the banana into the bowl.\\n- The bowl (with the apple and banana inside) is on the diningTable.\\n- The cloth is in the lunchBox.\\n- The lunchBox (with the cloth inside) remains on the drawer.\\n\\n### Actions Sequence to Achieve Goal:\\n\\n1. **navigate(diningTable, sideTable)** - Robot moves from diningTable to sideTable.\\n2. **pickup(bowl, sideTable)** - Robot picks up the bowl from the sideTable.\\n3. **navigate(sideTable, diningTable)** - Robot moves back to diningTable with the bowl.\\n4. **place(bowl, diningTable)** - Robot places the bowl on the diningTable.\\n5. **pickup(apple, diningTable)** - Robot picks up the apple from the diningTable.\\n6. **putIn(apple, bowl)** - Robot puts the apple into the bowl.\\n7. **pickup(banana, diningTable)** - Robot picks up the banana from the diningTable.\\n8. **putIn(banana, bowl)** - Robot puts the banana into the bowl.\\n9. **navigate(diningTable, drawer)** - Robot moves to the drawer.\\n10. **pickup(cloth, diningTable)** - Robot picks up the cloth from the diningTable.\\n11. **putIn(cloth, lunchBox)** - Robot puts the cloth into the lunchBox.\\n\\n### Description of Actions:\\n\\n#### Action: navigate(fromLocation, toLocation)\\n- **Preconditions:**\\n  - The robot is at fromLocation.\\n- **Effects:**\\n  - The robot's location is updated to toLocation.\\n\\n#### Action: pickup(item, location)\\n- **Preconditions:**\\n  - The robot is at location.\\n  - The item is at location.\\n  - The robot's gripper is empty.\\n- **Effects:**\\n  - The item is in the robot's gripper.\\n\\n#### Action: place(item, location)\\n- **Preconditions:**\\n  - The robot is at location.\\n  - The item is in the robot's gripper.\\n- **Effects:**\\n  - The item is at location.\\n  - The robot's gripper is empty.\\n\\n#### Action: putIn(item, container)\\n- **Preconditions:**\\n  - The item is in the robot's gripper.\\n  - The container is at the robot's location.\\n  - The container can hold the item.\\n- **Effects:**\\n  - The item is in the container.\\n  - The robot's gripper is empty.\\n\\n### Constraints of the Problem:\\n\\n- The robot can only carry one item at a time due to having only one gripper.\\n- The robot cannot manipulate task-relevant items while holding unrelated items in its gripper.\\n- Small household items must be manipulated on or within furnitureAppliance pieces for adequate space.\\n- The connectivity between locations dictates the robot's ability to navigate; the robot can move between directly connected locations.\\n- furnitureAppliance items are immovable, indicating fixed locations within the problem space.\\n- householdObject items and their subtypes have specific interaction rules, such as being placeable within smallReceptacles or requiring specific surfaces for manipulation.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":373,\"location\":\"-25580 -15807.45\",\"editorPosition\":[281,125,574,996],\"group\":186},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"300 300\",\"buttons_\":[{\"buttonMinSize\":\"180 180\",\"buttonFont\":\"70px sans-serif\",\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":374,\"location\":\"-26310 -15530\",\"group\":186},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"3out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"},{\"portId\":\"4out\",\"name\":\"out4\"},{\"portId\":\"5out\",\"name\":\"out5\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":375,\"location\":\"-25890 -15530\",\"group\":186},\n{\"label\":\"SpecsV0Done\",\"category\":\"DataFlow_TunnelOut\",\"size\":\"220 80\",\"color\":\"Moccasin\",\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"Any data leaving the tunnel\"}],\"fileTypeName\":\"Tunnel Out\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelOut\",\"key\":376,\"location\":\"-26280 -15290\",\"group\":186},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":377,\"location\":\"-23050 -18575\",\"group\":283},\n{\"label\":\"Clean Errors STEP3\",\"category\":\"Group_BasicGroup\",\"isGroup\":true,\"key\":378,\"location\":\"-26400 -14410\",\"font\":\"175px sans-serif\"},\n{\"label\":\"PlannerSpecsV1\",\"category\":\"DataFlow_TunnelOut\",\"size\":\"220 80\",\"color\":\"Moccasin\",\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"Any data leaving the tunnel\"}],\"fileTypeName\":\"Tunnel Out\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelOut\",\"key\":379,\"location\":\"-26370 -14660\",\"group\":378},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"300 300\",\"buttons_\":[{\"buttonMinSize\":\"180 180\",\"buttonFont\":\"70px sans-serif\",\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"out\",\"name\":\"out\"}],\"key\":380,\"location\":\"-26360 -14460\",\"group\":378},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"3out\",\"name\":\"out1\"},{\"portId\":\"4out\",\"name\":\"out2\"},{\"portId\":\"1out\",\"name\":\"out3\"},{\"portId\":\"2out\",\"name\":\"out4\"},{\"portId\":\"5out\",\"name\":\"out5\"},{\"portId\":\"6out\",\"name\":\"out6\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":181,\"location\":\"-25950 -14450.1\",\"group\":378},\n{\"label\":\"SpecsV1Done\",\"category\":\"DataFlow_TunnelOut\",\"size\":\"220 80\",\"color\":\"Moccasin\",\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"Any data leaving the tunnel\"}],\"fileTypeName\":\"Tunnel Out\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelOut\",\"key\":182,\"location\":\"-26380 -14260\",\"group\":378},\n{\"label\":\"8\",\"category\":\"DataFlow_Message\",\"alignment\":\"0 0.5 0 0\",\"alignmentFocus\":\"0 0.5 0 0\",\"size\":\"370 60\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"doCompute\":\"DataFlow_Message\",\"key\":188,\"location\":\"-22930 -14550\",\"group\":378},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"},{\"portId\":\"3out\",\"name\":\"out3\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":189,\"location\":\"-24080 -14620.2\",\"group\":378},\n{\"label\":\"Pass through\",\"category\":\"DataFlow_PassOnTrigger\",\"size\":\"240 80\",\"color\":\"LimeGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"This input expects any input type.\"},{\"portId\":\"2in\",\"name\":\"doTrigger\",\"tooltip\":\"This input event triggers the transfer of the input to the output.\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"This output returns the data defined\\nin the input when doTrigger event occurs.\"}],\"props_\":[{\"name\":\"isInputCleaned\",\"value\":false,\"tooltip\":\"if true, input is cleaned after each doTrigger.\"}],\"fileTypeName\":\"Pass On Trigger\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_PassOnTrigger\",\"key\":191,\"location\":\"-25370 -14650\",\"group\":378},\n{\"label\":\"Compute Error Stats\",\"category\":\"DataFlow_Component\",\"size\":\"240 80\",\"in_\":[{\"portId\":\"2in\",\"name\":\"doReset\"},{\"portId\":\"1in\",\"name\":\"parseInfo\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"errorCount\"},{\"portId\":\"4out\",\"name\":\"errorStat\"},{\"portId\":\"3out\",\"name\":\"errorCountArr\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"var nodeData, name, value;\\n\\nif( name == 'doReset' ) {\\n  graphData.dfe.set( nodeData, 'statList', [] );\\n  graphData.dfe.set( nodeData, 'errorList', [] );\\n  graphData.dfe.fireOutput( nodeData, 'errorCountArr', [] );\\n} else if( name == 'parseInfo' ) {\\n  if( value.errors ) {\\n    graphData.dfe.fireOutput( nodeData, 'errorCount', value.errors.length );\\n    \\n    const errorTypeList = {};\\n    value.errors.forEach( e=> {\\n      if( !errorTypeList[e.type] ) {\\n        errorTypeList[e.type] = 0;\\n      }\\n      ++errorTypeList[e.type];\\n    });\\n    \\n    const errorList = graphData.dfe.get( nodeData, 'errorList', [] );\\n    errorList.push( value.errors.length );\\n    const statList = graphData.dfe.get( nodeData, 'statList', [] );\\n    statList.push( errorTypeList );\\n    \\n    graphData.dfe.fireOutput( nodeData, 'errorStat', statList );\\n    graphData.dfe.fireOutput( nodeData, 'errorCountArr', errorList );\\n  }\\n}\\n\\n/*\\n --- Remember to fire\\n  graphData.dfe.fireOutput( nodeData, 'out', outValue );\\n --- You may get inputs\\n  const in = graphData.dfe.getInput( nodeData, 'in', null );\\n --- You may set/get states\\n  graphData.dfe.set( nodeData, '<Name>', null );\\n  const <Name> = graphData.dfe.get( nodeData, '<Name>', null );\\n*/\",\"fileTypeName\":\"Component\",\"fileType\":\"text/javascript\",\"key\":192,\"location\":\"-23340 -14480.300000000001\",\"group\":378,\"editorPosition\":[2455,673,838,506]},\n{\"label\":\"\",\"category\":\"DataFlow_Start\",\"size\":\"80 80\",\"buttons_\":[{\"name\":\"Start\",\"checked\":false}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\"}],\"key\":205,\"location\":\"-25260 -14550\",\"group\":378},\n{\"label\":\"AI Parser\",\"category\":\"DataFlow_ParseGPTObject\",\"size\":\"240 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"This input get the text generated by a GPT\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"This output return a parsed object as defined in the properties\"}],\"props_\":[{\"name\":\"dataFormat\",\"value\":\"json\",\"tooltip\":\"Format of the object created by GPT: e.g. json, html, ...\"},{\"name\":\"outFormat\",\"value\":\"element\",\"tooltip\":\"array or element\",\"valueChanged\":true}],\"fileType\":\"text/javascript\",\"fileTypeName\":\"Parse AI Object\",\"doCompute\":\"DataFlow_ParseGPTObject\",\"key\":193,\"location\":\"-21990 -14590.1\",\"group\":378},\n{\"label\":\"AI Parser\",\"category\":\"DataFlow_ParseGPTObject\",\"size\":\"240 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"This input get the text generated by a GPT\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"This output return a parsed object as defined in the properties\"}],\"props_\":[{\"name\":\"dataFormat\",\"value\":\"json\",\"tooltip\":\"Format of the object created by GPT: e.g. json, html, ...\"},{\"name\":\"outFormat\",\"value\":\"element\",\"tooltip\":\"array or element\",\"valueChanged\":true}],\"fileType\":\"text/javascript\",\"fileTypeName\":\"Parse AI Object\",\"doCompute\":\"DataFlow_ParseGPTObject\",\"key\":200,\"location\":\"-22890 -15810.1\",\"group\":186},\n{\"label\":\"JSONTemplate\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":206,\"location\":\"-21450 -16130\",\"group\":186},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":209,\"location\":\"-24440 -16120\",\"group\":186},\n{\"label\":\"JSON Template\",\"category\":\"DataFlow_Data\",\"size\":\"190 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a JSON object or array\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a JSON object or array\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"{\\n  \\\"Objects\\\": [  // Array containing a list of types written in uppercase with underscore like for example: \\\"CITY_AIRPORT\\\". Remember that the actors of the actions must be represented as an object here, and that an object can only be of one type only. Object name must be different from type names.\\n    \\\"<TYPE_1>\\\": []  // Array containing a list of object names of TYPE_1 or a list of type names of TYPE_1.\\n    \\\"<TYPE_2>\\\": []  // Array containing a list of object names of TYPE_2 or a list of type names of TYPE_2.\\n    ...\\n  ], \\n  \\\"Predicates\\\": [], // Array containing a list of string defining logical functions that verify state and/or types of objects like: predicate1( TYPE_1, TYPE_2,...). The parameters of the predicates must only use the types names defined in \\\"Objects\\\". Create predicate names as abstract as possible. Put semantic in the name only if it is useful to disembiguate the usage of the same predicate. For example instead of \\\"isIn(ROOM, BALL)\\\" and \\\"isIn(ROOM, ROBOT)\\\" use: \\\"smallObjectIsIn(ROOM, BALL)\\\" and \\\"actorIsIn(ROOM, ROBOT)\\\" if \\\"BALL\\\" and \\\"ROBOT\\\" are two types that cannot be fused. Other example instead of \\\"armEmpty(ARM)\\\" use \\\"isEmpty(ARM)\\\". Predictate names must occur only once in \\\"Predicates\\\". Polymorphism is not allowed in the predicate. \\n  \\\"Actions\\\": [ // Array containing a list of actions. The signature of action should be in the form: actionName( param1: TYPE_1, param2: TYPE_2, ...). The name of actions must be build from a single verb with eventualy more parameters. Reduce to the minimum the semantic content that is put in the action names. For example instead of \\\"moveToRoom(FromRoom: ROOM, ToRoom: ROOM)\\\" use: \\\"move(FromRoom: ROOM, ToRoom: ROOM)\\\". All parameter of an action must be different. For example instead of \\\"move(Room: ROOM, Room: ROOM)\\\" use: \\\"move(FromRoom: ROOM, ToRoom: ROOM)\\\". Parameter names are written in camel case, types are written in all upper case.\\n     { \\n       \\\"action\\\": // String decribing the action signature like: actionName1( param1: TYPE_1, param2: TYPE_2, ...). Create action names as abstract as possible. Do not put in the name semantic that can be passed as parameter. The actors of the action should probably be represented as one argument of the action since they may be used in precondition and effect. Parameter names are written in camel case, types are written in all upper case.\\n       \\\"description\\\": // String describing what happens when the actor does the action. Use every parameter of the action in the description as well as the actor.\\n       \\\"preconditions\\\": [] // list of predicates combined in a logical-and function, specifying the condition necessary to be true to execute the action. The parameters of the predicates must only use the parameter names of the \\\"action\\\" signature. If the actors of the action must be in a particular state, they must appear in the precondition in a predicate. The same predicates cannot be identical in both precondition and effect: either they are opposite or should be removed because independent of the action. To negate a predicate, use the character '!' before the predicate. \\n       \\\"effects\\\": [] // list of predicates combined in a logical-and function, specifying the state resulting from the execution of the action. The parameters of the predicates must only use the parameter names of the \\\"action\\\" signature. If the state of the actors of the action is affected by the action, they must appear in the effect in a predicate. The effect cannot be empty, an action has always an effect. The same predicates cannot be identical in both precondition and effect: either they are opposite or should be removed because independent of the action. To negate a predicate, use the character '!' before the predicate.\\n     },\\n     ...\\n  ],\\n  \\\"InitialStates\\\": [], // Array containing list of predicate used to define the initial condition for the planner to start with. The parameters of the predicates should not be type names and must only use the object names defined in \\\"Objects\\\". The predicates used to define the initial state must activate the precondition of some actions otherwise no action could be done to reach the GoalStates. The initial state must define the initial state of all objects used in the GoalStates. To negate a predicate, use the character '!' before the predicate.\\n  \\\"GoalStates\\\": [], // Array containing list of predicate used to define the final condition for the planner to end with. The parameters of the predicates should not be type names and must only use the object names defined in \\\"Objects\\\". The predicates used to define the GoalStates must be reachable: they must be present in the effect part of some actions. To negate a predicate, use the character '!' before the predicate.\\n  \\\"Plan\\\": []  // Array containing the list of actions (listed in the \\\"Actions.action\\\") with their related parameter instances. This list should consider to progress form the initial state and end in the GoalStates.\\n}\",\"fileTypeName\":\"JSON\",\"fileType\":\"text/json\",\"iconURL\":\"/fileServer/pictures/JSON_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":210,\"location\":\"-25720 -14750.1\",\"editorPosition\":[1247,82,600,701],\"group\":378},\n{\"label\":\"JSONTemplate\",\"category\":\"DataFlow_TunnelOut\",\"size\":\"220 80\",\"color\":\"Moccasin\",\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"Any data leaving the tunnel\"}],\"fileTypeName\":\"Tunnel Out\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelOut\",\"key\":211,\"location\":\"-26370 -14750\",\"group\":378},\n{\"label\":\"ScenarioSpecs\",\"category\":\"DataFlow_TunnelOut\",\"size\":\"220 80\",\"color\":\"Moccasin\",\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"Any data leaving the tunnel\"}],\"fileTypeName\":\"Tunnel Out\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelOut\",\"key\":213,\"location\":\"-26370 -14840\",\"group\":378},\n{\"label\":\"Scenario Specs\",\"category\":\"DataFlow_Data\",\"size\":\"190 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a string\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a string\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"### Initial State Description:\\n\\n- The house contains a robot, several pieces of furnitureAppliance (e.g., diningTable, sideTable, drawer, microwave, stoveBurner), and householdObjects (cloth, apple, banana, bowl, lunchBox).\\n- The robot starts in the location of the diningTable.\\n- The diningTable supports the apple, banana, and cloth.\\n- The sideTable supports the bowl.\\n- The lunchBox is on the drawer.\\n- The robot's gripper is empty.\\n\\n### Goal State Description:\\n\\n- The robot has placed the apple and the banana into the bowl.\\n- The bowl (with the apple and banana inside) is on the diningTable.\\n- The cloth is in the lunchBox.\\n- The lunchBox (with the cloth inside) remains on the drawer.\\n\\n### Actions Sequence to Achieve Goal:\\n\\n1. **navigate(diningTable, sideTable)** - Robot moves from diningTable to sideTable.\\n2. **pickup(bowl, sideTable)** - Robot picks up the bowl from the sideTable.\\n3. **navigate(sideTable, diningTable)** - Robot moves back to diningTable with the bowl.\\n4. **place(bowl, diningTable)** - Robot places the bowl on the diningTable.\\n5. **pickup(apple, diningTable)** - Robot picks up the apple from the diningTable.\\n6. **putIn(apple, bowl)** - Robot puts the apple into the bowl.\\n7. **pickup(banana, diningTable)** - Robot picks up the banana from the diningTable.\\n8. **putIn(banana, bowl)** - Robot puts the banana into the bowl.\\n9. **navigate(diningTable, drawer)** - Robot moves to the drawer.\\n10. **pickup(cloth, diningTable)** - Robot picks up the cloth from the diningTable.\\n11. **putIn(cloth, lunchBox)** - Robot puts the cloth into the lunchBox.\\n\\n### Description of Actions:\\n\\n#### Action: navigate(fromLocation, toLocation)\\n- **Preconditions:**\\n  - The robot is at fromLocation.\\n- **Effects:**\\n  - The robot's location is updated to toLocation.\\n\\n#### Action: pickup(item, location)\\n- **Preconditions:**\\n  - The robot is at location.\\n  - The item is at location.\\n  - The robot's gripper is empty.\\n- **Effects:**\\n  - The item is in the robot's gripper.\\n\\n#### Action: place(item, location)\\n- **Preconditions:**\\n  - The robot is at location.\\n  - The item is in the robot's gripper.\\n- **Effects:**\\n  - The item is at location.\\n  - The robot's gripper is empty.\\n\\n#### Action: putIn(item, container)\\n- **Preconditions:**\\n  - The item is in the robot's gripper.\\n  - The container is at the robot's location.\\n  - The container can hold the item.\\n- **Effects:**\\n  - The item is in the container.\\n  - The robot's gripper is empty.\\n\\n### Constraints of the Problem:\\n\\n- The robot can only carry one item at a time due to having only one gripper.\\n- The robot cannot manipulate task-relevant items while holding unrelated items in its gripper.\\n- Small household items must be manipulated on or within furnitureAppliance pieces for adequate space.\\n- The connectivity between locations dictates the robot's ability to navigate; the robot can move between directly connected locations.\\n- furnitureAppliance items are immovable, indicating fixed locations within the problem space.\\n- householdObject items and their subtypes have specific interaction rules, such as being placeable within smallReceptacles or requiring specific surfaces for manipulation.\",\"fileTypeName\":\"Text\",\"fileType\":\"text/text\",\"iconURL\":\"/fileServer/pictures/Text_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":214,\"location\":\"-25720 -14840.1\",\"editorPosition\":[281,125,574,996],\"group\":378},\n{\"label\":\"StartGripperScenario\",\"category\":\"DataFlow_TunnelOut\",\"size\":\"220 80\",\"color\":\"Moccasin\",\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"Any data leaving the tunnel\"}],\"fileTypeName\":\"Tunnel Out\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelOut\",\"key\":220,\"location\":\"-26110 -18365\",\"group\":283},\n{\"label\":\"StartPizzaScenario\",\"category\":\"DataFlow_TunnelOut\",\"size\":\"220 80\",\"color\":\"Moccasin\",\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"Any data leaving the tunnel\"}],\"fileTypeName\":\"Tunnel Out\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelOut\",\"key\":221,\"location\":\"-26110 -17955\",\"group\":283},\n{\"label\":\"StartLogisticScenario\",\"category\":\"DataFlow_TunnelOut\",\"size\":\"220 80\",\"color\":\"Moccasin\",\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"Any data leaving the tunnel\"}],\"fileTypeName\":\"Tunnel Out\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelOut\",\"key\":222,\"location\":\"-26120 -17545\",\"group\":283},\n{\"label\":\"StartTyreWorldScenario\",\"category\":\"DataFlow_TunnelOut\",\"size\":\"220 80\",\"color\":\"Moccasin\",\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"Any data leaving the tunnel\"}],\"fileTypeName\":\"Tunnel Out\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelOut\",\"key\":223,\"location\":\"-26120 -17135\",\"group\":283},\n{\"label\":\"StartHouseholdScenario\",\"category\":\"DataFlow_TunnelOut\",\"size\":\"220 80\",\"color\":\"Moccasin\",\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"Any data leaving the tunnel\"}],\"fileTypeName\":\"Tunnel Out\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelOut\",\"key\":225,\"location\":\"-26120 -16725\",\"group\":283},\n{\"label\":\"EndBugFix1\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":264,\"location\":\"-21450 -14200\",\"group\":378},\n{\"label\":\"Data to Event\",\"category\":\"DataFlow_ConvertToEvent\",\"size\":\"240 80\",\"color\":\"Plum\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"This input expects any input type.\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"This output returns an event when the input occurs.\"}],\"fileTypeName\":\"Convert To Event\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_ConvertToEvent\",\"key\":266,\"location\":\"-22840 -14200\",\"group\":378},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"},{\"portId\":\"3out\",\"name\":\"out3\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":268,\"location\":\"-23720 -14350\",\"group\":378},\n{\"label\":\"StopWatch\",\"category\":\"DataFlow_StopWatch\",\"size\":\"240 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"start\",\"tooltip\":\"This input expects an event to start the watch.\"},{\"portId\":\"2in\",\"name\":\"stop\",\"tooltip\":\"This input expects an event to stop the watch.\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"time\",\"tooltip\":\"This output returns the measured time in [s]\\nbetween start and stop events\"},{\"portId\":\"2out\",\"name\":\"timeString\",\"tooltip\":\"This output returns the time as a string in [s] and [ms]\"}],\"fileTypeName\":\"StopWatch\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_StopWatch\",\"key\":345,\"location\":\"-22370 -18095\",\"group\":283},\n{\"label\":\"StopWatch\",\"category\":\"DataFlow_StopWatch\",\"size\":\"240 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"start\",\"tooltip\":\"This input expects an event to start the watch.\"},{\"portId\":\"2in\",\"name\":\"stop\",\"tooltip\":\"This input expects an event to stop the watch.\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"time\",\"tooltip\":\"This output returns the measured time in [s]\\nbetween start and stop events\"},{\"portId\":\"2out\",\"name\":\"timeString\",\"tooltip\":\"This output returns the time as a string in [s] and [ms]\"}],\"fileTypeName\":\"StopWatch\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_StopWatch\",\"key\":347,\"location\":\"-22020 -15510\",\"group\":186},\n{\"label\":\"StopWatch\",\"category\":\"DataFlow_StopWatch\",\"size\":\"240 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"start\",\"tooltip\":\"This input expects an event to start the watch.\"},{\"portId\":\"2in\",\"name\":\"stop\",\"tooltip\":\"This input expects an event to stop the watch.\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"time\",\"tooltip\":\"This output returns the measured time in [s]\\nbetween start and stop events\"},{\"portId\":\"2out\",\"name\":\"timeString\",\"tooltip\":\"This output returns the time as a string in [s] and [ms]\"}],\"fileTypeName\":\"StopWatch\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_StopWatch\",\"key\":355,\"location\":\"-21860 -14070.1\",\"group\":378},\n{\"label\":\"DurationS1\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":381,\"location\":\"-21990 -18105\",\"group\":283},\n{\"label\":\"DurationS2\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":382,\"location\":\"-21460 -15520\",\"group\":186},\n{\"label\":\"DurationS31\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":383,\"location\":\"-21450 -14080\",\"group\":378},\n{\"label\":\"ErrorCountList1\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":384,\"location\":\"-21450 -14480\",\"group\":378},\n{\"label\":\"ErrorTypeList1\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":385,\"location\":\"-21450 -14390\",\"group\":378},\n{\"label\":\"Planner Spec\",\"category\":\"DataFlow_Data\",\"size\":\"160 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a JSON object or array\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a JSON object or array\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"{\\n  \\\"Objects\\\": {\\n    \\\"ROBOT\\\": [\\n      \\\"robot\\\"\\n    ],\\n    \\\"FURNITURE_APPLIANCE\\\": [\\n      \\\"diningTable\\\",\\n      \\\"sideTable\\\",\\n      \\\"drawer\\\",\\n      \\\"microwave\\\",\\n      \\\"stoveBurner\\\"\\n    ],\\n    \\\"HOUSEHOLD_OBJECT\\\": [\\n      \\\"cloth\\\",\\n      \\\"apple\\\",\\n      \\\"banana\\\",\\n      \\\"bowl\\\",\\n      \\\"lunchBox\\\"\\n    ],\\n    \\\"STATE\\\": [\\n      \\\"occupied\\\",\\n      \\\"empty\\\"\\n    ]\\n  },\\n  \\\"Predicates\\\": [\\n    \\\"atRobot(FURNITURE_APPLIANCE)\\\",\\n    \\\"supports(FURNITURE_APPLIANCE, HOUSEHOLD_OBJECT)\\\",\\n    \\\"holds(HOUSEHOLD_OBJECT)\\\",\\n    \\\"isState(STATE)\\\",\\n    \\\"contains(HOUSEHOLD_OBJECT, HOUSEHOLD_OBJECT)\\\"\\n  ],\\n  \\\"Actions\\\": [\\n    {\\n      \\\"action\\\": \\\"navigate(robot: ROBOT, fromLocation: FURNITURE_APPLIANCE, toLocation: FURNITURE_APPLIANCE)\\\",\\n      \\\"description\\\": \\\"Robot moves from one location to another.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"atRobot(fromLocation)\\\",\\n        \\\"!atRobot(toLocation)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!atRobot(fromLocation)\\\",\\n        \\\"atRobot(toLocation)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"pickup(robot: ROBOT, item: HOUSEHOLD_OBJECT, location: FURNITURE_APPLIANCE, state: STATE)\\\",\\n      \\\"description\\\": \\\"Robot picks up an item from a location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"atRobot(location)\\\",\\n        \\\"supports(location, item)\\\",\\n        \\\"isState(state)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"!supports(location, item)\\\",\\n        \\\"holds(item)\\\",\\n        \\\"!isState(state)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"place(robot: ROBOT, item: HOUSEHOLD_OBJECT, location: FURNITURE_APPLIANCE, state: STATE)\\\",\\n      \\\"description\\\": \\\"Robot places an item at a location.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holds(item)\\\",\\n        \\\"atRobot(location)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"supports(location, item)\\\",\\n        \\\"!holds(item)\\\",\\n        \\\"!isState(state)\\\"\\n      ]\\n    },\\n    {\\n      \\\"action\\\": \\\"putIn(robot: ROBOT, item: HOUSEHOLD_OBJECT, container: HOUSEHOLD_OBJECT, state: STATE)\\\",\\n      \\\"description\\\": \\\"Robot puts an item into a container.\\\",\\n      \\\"preconditions\\\": [\\n        \\\"holds(item)\\\"\\n      ],\\n      \\\"effects\\\": [\\n        \\\"contains(container, item)\\\",\\n        \\\"!holds(item)\\\",\\n        \\\"!isState(state)\\\"\\n      ]\\n    }\\n  ],\\n  \\\"InitialStates\\\": [\\n    \\\"atRobot(diningTable)\\\",\\n    \\\"supports(diningTable, apple)\\\",\\n    \\\"supports(diningTable, banana)\\\",\\n    \\\"supports(diningTable, cloth)\\\",\\n    \\\"supports(sideTable, bowl)\\\",\\n    \\\"supports(drawer, lunchBox)\\\"\\n  ],\\n  \\\"GoalStates\\\": [\\n    \\\"contains(bowl, apple)\\\",\\n    \\\"contains(bowl, banana)\\\",\\n    \\\"supports(diningTable, bowl)\\\",\\n    \\\"contains(lunchBox, cloth)\\\",\\n    \\\"supports(drawer, lunchBox)\\\"\\n  ],\\n  \\\"Plan\\\": [\\n    \\\"navigate(robot, diningTable, sideTable)\\\",\\n    \\\"pickup(robot, bowl, sideTable, empty)\\\",\\n    \\\"navigate(robot, sideTable, diningTable)\\\",\\n    \\\"place(robot, bowl, diningTable, empty)\\\",\\n    \\\"pickup(robot, apple, diningTable, empty)\\\",\\n    \\\"putIn(robot, apple, bowl, empty)\\\",\\n    \\\"pickup(robot, banana, diningTable, empty)\\\",\\n    \\\"putIn(robot, banana, bowl, empty)\\\",\\n    \\\"navigate(robot, diningTable, drawer)\\\",\\n    \\\"pickup(robot, cloth, diningTable, empty)\\\",\\n    \\\"putIn(robot, cloth, lunchBox, empty)\\\"\\n  ]\\n}\",\"fileTypeName\":\"JSON\",\"fileType\":\"text/json\",\"iconURL\":\"/fileServer/pictures/JSON_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":253,\"location\":\"-21830 -13930.1\",\"editorPosition\":[170,69,1193,1165],\"group\":378},\n{\"label\":\"PlannerSpec1\",\"category\":\"DataFlow_TunnelIn\",\"size\":\"240 80\",\"color\":\"Moccasin\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"Any data entering the tunnel\"}],\"fileTypeName\":\"Tunnel In\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_TunnelIn\",\"key\":256,\"location\":\"-21450 -13930\",\"group\":378},\n{\"label\":\"Pass through\",\"category\":\"DataFlow_PassOnTrigger\",\"size\":\"240 80\",\"color\":\"LimeGreen\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"This input expects any input type.\"},{\"portId\":\"2in\",\"name\":\"doTrigger\",\"tooltip\":\"This input event triggers the transfer of the input to the output.\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"This output returns the data defined\\nin the input when doTrigger event occurs.\"}],\"props_\":[{\"name\":\"isInputCleaned\",\"value\":false,\"tooltip\":\"if true, input is cleaned after each doTrigger.\"}],\"fileTypeName\":\"Pass On Trigger\",\"fileType\":\"text/javascript\",\"doCompute\":\"DataFlow_PassOnTrigger\",\"key\":262,\"location\":\"-22170 -13930.1\"},\n{\"label\":\"Error Type List\",\"category\":\"DataFlow_DataJSON\",\"size\":\"230 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a JSON object or array\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a JSON object or array\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"[\\n  {\\n    \\\"Unusable InitialState Predicate\\\": 1\\n  },\\n  {\\n    \\\"Undeclared Parameter\\\": 4,\\n    \\\"Wrong Types\\\": 4\\n  }\\n]\",\"fileTypeName\":\"JSON\",\"fileType\":\"text/json\",\"iconURL\":\"/fileServer/pictures/JSON_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":265,\"location\":\"-22500 -14430\",\"group\":378,\"editorPosition\":[2608,520,500,450]},\n{\"label\":\"Error Count List\",\"category\":\"DataFlow_DataJSON\",\"size\":\"230 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"in\",\"tooltip\":\"this input expects a JSON object or array\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out\",\"tooltip\":\"this output is a JSON object or array\"}],\"props_\":[],\"isFile\":true,\"fileContent\":\"[\\n  1,\\n  8\\n]\",\"fileTypeName\":\"JSON\",\"fileType\":\"text/json\",\"iconURL\":\"/fileServer/pictures/JSON_Data.png\",\"doCompute\":\"DataFlow_Data\",\"key\":267,\"location\":\"-22210 -14480.1\",\"group\":378},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":240,\"location\":\"-22500 -14200\",\"group\":378},\n{\"label\":\"input.length > 15\",\"category\":\"DataFlow_CondInLabel\",\"size\":\"240 80\",\"in_\":[{\"portId\":\"1in\",\"name\":\"input\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"onTrue\"},{\"portId\":\"2out\",\"name\":\"onFalse\"}],\"props_\":[{\"name\":\"computeBarrier\",\"value\":\"*\"}],\"doCompute\":\"DataFlow_CondInLabel\",\"fileTypeName\":\"Condition In Label\",\"fileType\":\"text/javascript\",\"key\":242,\"location\":\"-23340 -14300\"},\n{\"category\":\"DataFlow_Dispatch\",\"props_\":[],\"in_\":[{\"portId\":\"1in\",\"name\":\"in\"}],\"out_\":[{\"portId\":\"1out\",\"name\":\"out1\"},{\"portId\":\"2out\",\"name\":\"out2\"}],\"doCompute\":\"DataFlow_Dispatch\",\"key\":263,\"location\":\"-22790 -14470\",\"group\":378}\n],\n  \"linkDataArray\": [\n{\"category\":\"CodeFlow_Code\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":23,\"to\":22,\"points\":[3189.4619140625,3020,3199.4619140625,3020,3238.103515625,3020,3248.103515625,3020],\"key\":-6},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":196,\"to\":194,\"points\":[-21579.5380859375,-15780,-21569.5380859375,-15780,-21491.896484375,-15737.45,-21481.896484375,-15737.45],\"key\":-225},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"5out\",\"toPort\":\"2in\",\"from\":375,\"to\":198,\"points\":[-25786.037109375,-15500,-25776.037109375,-15500,-24310,-15500,-24310,-15790,-24284.7998046875,-15790,-24274.7998046875,-15790],\"key\":-226},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":198,\"to\":309,\"points\":[-23909.5380859375,-15810,-23899.5380859375,-15810,-23891.896484375,-15807.45,-23881.896484375,-15807.45],\"key\":-228},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":209,\"to\":198,\"points\":[-24336.037109375,-16110,-24326.037109375,-16110,-24310,-16110,-24310,-15830,-24284.7998046875,-15830,-24274.7998046875,-15830],\"key\":-236},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":245,\"to\":248,\"points\":[-23209.5380859375,-15667.45,-23199.5380859375,-15667.45,-23181.896484375,-15807.45,-23171.896484375,-15807.45],\"key\":-240},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":204,\"to\":248,\"points\":[-23223.751953125,-15807.45,-23213.751953125,-15807.45,-23181.896484375,-15807.45,-23171.896484375,-15807.45],\"key\":-241},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":248,\"to\":200,\"points\":[-22959.5380859375,-15807.45,-22949.5380859375,-15807.45,-22931.896484375,-15810.1,-22921.896484375,-15810.1],\"key\":-242},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":254,\"to\":249,\"points\":[-22176.037109375,-15830.1,-22166.037109375,-15830.1,-21491.896484375,-15837.45,-21481.896484375,-15837.45],\"key\":-244},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":247,\"to\":254,\"points\":[-22349.5380859375,-15810,-22339.5380859375,-15810,-22321.896484375,-15810.1,-22311.896484375,-15810.1],\"key\":-246},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"2in\",\"from\":309,\"to\":204,\"points\":[-23649.5380859375,-15807.45,-23639.5380859375,-15807.45,-23615.337890625,-15807.45,-23605.337890625,-15807.45],\"key\":-308},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":310,\"to\":193,\"points\":[-22059.53769057435,-14593.379557725355,-22049.53769057435,-14593.379557725355,-22031.896484375,-14590.1,-22021.896484375,-14590.1],\"key\":-281},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":302,\"to\":310,\"points\":[-22349.5380859375,-14570,-22339.5380859375,-14570,-22281.89608901185,-14593.379557725355,-22271.89608901185,-14593.379557725355],\"key\":-282},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":311,\"to\":310,\"points\":[-22343.751953125,-14670,-22333.751953125,-14670,-22281.89608901185,-14593.379557725355,-22271.89608901185,-14593.379557725355],\"key\":-283},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"2in\",\"from\":312,\"to\":311,\"points\":[-22749.5380859375,-14670,-22739.5380859375,-14670,-22735.337890625,-14670,-22725.337890625,-14670],\"key\":-284},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":313,\"to\":312,\"points\":[-23029.5380859375,-14670,-23019.5380859375,-14670,-22991.896484375,-14670,-22981.896484375,-14670],\"key\":-285},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"3in\",\"from\":307,\"to\":313,\"points\":[-23462.44140625,-14650,-23452.44140625,-14650,-23435.14453125,-14650,-23425.14453125,-14650],\"key\":-286},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":189,\"to\":323,\"points\":[-23976.037109375,-14640.2,-23966.037109375,-14640.2,-23900,-14640,-23870,-14650,-23851.896484375,-14650,-23841.896484375,-14650],\"key\":-288},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":323,\"to\":307,\"points\":[-23609.5380859375,-14650,-23599.5380859375,-14650,-23600.3515625,-14650,-23590.3515625,-14650],\"key\":-289},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"3out\",\"toPort\":\"1in\",\"from\":306,\"to\":314,\"points\":[-24556.037109375,-14630,-24546.037109375,-14630,-24481.896484375,-14630,-24471.896484375,-14630],\"key\":-290},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":306,\"to\":313,\"points\":[-24556.037109375,-14670,-24546.037109375,-14670,-24500,-14700,-23480,-14700,-23435.14453125,-14670,-23425.14453125,-14670],\"key\":-291},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":305,\"to\":325,\"points\":[-21469.5380859375,-14590,-21459.5380859375,-14590,-21450,-14590,-21450,-14800,-25040,-14800,-25040,-14660,-24981.896484375,-14650.1,-24971.896484375,-14650.1],\"key\":-279},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":314,\"to\":330,\"points\":[-24153.3173828125,-14620,-24143.3173828125,-14620,-24021.896484375,-14360,-24011.896484375,-14360],\"key\":-295},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":293,\"to\":292,\"points\":[-25606.037109375,-18555,-25596.037109375,-18555,-25591.896484375,-18555,-25581.896484375,-18555],\"key\":-277},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"out\",\"toPort\":\"1in\",\"from\":294,\"to\":293,\"points\":[-25779.5380859375,-18565,-25769.5380859375,-18565,-25751.896484375,-18565,-25741.896484375,-18565],\"key\":-296},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":298,\"to\":297,\"points\":[-25606.037109375,-18145,-25596.037109375,-18145,-25591.896484375,-18145,-25581.896484375,-18145],\"key\":-297},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"out\",\"toPort\":\"1in\",\"from\":300,\"to\":298,\"points\":[-25779.5380859375,-18155,-25769.5380859375,-18155,-25751.896484375,-18155,-25741.896484375,-18155],\"key\":-298},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":331,\"to\":329,\"points\":[-25606.037109375,-17735,-25596.037109375,-17735,-25591.896484375,-17735,-25581.896484375,-17735],\"key\":-299},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"out\",\"toPort\":\"1in\",\"from\":332,\"to\":331,\"points\":[-25779.5380859375,-17745,-25769.5380859375,-17745,-25751.896484375,-17745,-25741.896484375,-17745],\"key\":-300},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":331,\"to\":333,\"points\":[-25606.037109375,-17755,-25596.037109375,-17755,-25591.896484375,-17840,-25581.896484375,-17840],\"key\":-301},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":335,\"to\":336,\"points\":[-25606.037109375,-17325,-25596.037109375,-17325,-25591.896484375,-17325,-25581.896484375,-17325],\"key\":-302},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"out\",\"toPort\":\"1in\",\"from\":337,\"to\":335,\"points\":[-25779.5380859375,-17335,-25769.5380859375,-17335,-25751.896484375,-17335,-25741.896484375,-17335],\"key\":-303},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":335,\"to\":338,\"points\":[-25606.037109375,-17345,-25596.037109375,-17345,-25591.896484375,-17465,-25581.896484375,-17465],\"key\":-304},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":351,\"to\":352,\"points\":[-25606.037109375,-16915,-25596.037109375,-16915,-25591.896484375,-16915,-25581.896484375,-16915],\"key\":-305},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"out\",\"toPort\":\"1in\",\"from\":353,\"to\":351,\"points\":[-25779.5380859375,-16925,-25769.5380859375,-16925,-25751.896484375,-16925,-25741.896484375,-16925],\"key\":-306},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":351,\"to\":354,\"points\":[-25606.037109375,-16935,-25596.037109375,-16935,-25591.896484375,-17085,-25581.896484375,-17085],\"key\":-307},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":293,\"to\":295,\"points\":[-25606.037109375,-18575,-25596.037109375,-18575,-25591.896484375,-18665,-25581.896484375,-18665],\"key\":-309},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":286,\"to\":285,\"points\":[-22069.5380859375,-18275,-22059.5380859375,-18275,-22031.896484375,-18235,-22021.896484375,-18235],\"key\":-310},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":287,\"to\":362,\"points\":[-23619.5380859375,-18305,-23609.5380859375,-18305,-23591.896484375,-18305,-23581.896484375,-18305],\"key\":-313},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":292,\"to\":303,\"points\":[-24519.5380859375,-18555,-24509.5380859375,-18555,-24380,-18555,-24380,-18315,-24211.896484375,-18315,-24201.896484375,-18315],\"key\":-314},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":297,\"to\":303,\"points\":[-24519.5380859375,-18145,-24509.5380859375,-18145,-24380,-18145,-24380,-18305,-24300,-18315,-24211.896484375,-18315,-24201.896484375,-18315],\"key\":-316},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":329,\"to\":303,\"points\":[-24519.5380859375,-17735,-24509.5380859375,-17735,-24370,-17735,-24370,-18295,-24300,-18315,-24211.896484375,-18315,-24201.896484375,-18315],\"key\":-319},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"3in\",\"from\":303,\"to\":287,\"points\":[-24066.037109375,-18315,-24056.037109375,-18315,-23990.3974609375,-18315,-23980.3974609375,-18315],\"key\":-320},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":336,\"to\":303,\"points\":[-24519.5380859375,-17325,-24509.5380859375,-17325,-24360,-17325,-24360,-18285,-24300,-18315,-24211.896484375,-18315,-24201.896484375,-18315],\"key\":-323},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":377,\"to\":342,\"points\":[-22946.037109375,-18565,-22936.037109375,-18565,-22871.896484375,-18305,-22861.896484375,-18305],\"key\":-325},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":290,\"to\":342,\"points\":[-22923.751953125,-18305,-22913.751953125,-18305,-22871.896484375,-18305,-22861.896484375,-18305],\"key\":-326},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":352,\"to\":303,\"points\":[-24519.5380859375,-16915,-24509.5380859375,-16915,-24350,-16915,-24350,-18275,-24300,-18315,-24211.896484375,-18315,-24201.896484375,-18315],\"key\":-336},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":295,\"to\":359,\"points\":[-25039.5380859375,-18665,-25029.5380859375,-18665,-24280,-18665,-24280,-18455,-24181.39639269911,-18455.10399227418,-24171.39639269911,-18455.10399227418],\"key\":-343},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":354,\"to\":359,\"points\":[-25039.5380859375,-17085,-25029.5380859375,-17085,-24250,-17085,-24250,-18415,-24181.39639269911,-18455.10399227418,-24171.39639269911,-18455.10399227418],\"key\":-344},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":338,\"to\":359,\"points\":[-25039.5380859375,-17465,-25029.5380859375,-17465,-24260,-17465,-24260,-18425,-24181.39639269911,-18455.10399227418,-24171.39639269911,-18455.10399227418],\"key\":-345},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":333,\"to\":359,\"points\":[-25039.5380859375,-17840,-25029.5380859375,-17840,-24270,-17835,-24270,-18435,-24181.39639269911,-18455.10399227418,-24171.39639269911,-18455.10399227418],\"key\":-346},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":298,\"to\":361,\"points\":[-25606.037109375,-18165,-25596.037109375,-18165,-25591.896484375,-18255,-25581.896484375,-18255],\"key\":-348},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":361,\"to\":359,\"points\":[-25039.5380859375,-18255,-25029.5380859375,-18255,-24280,-18255,-24280,-18445,-24181.39639269911,-18455.10399227418,-24171.39639269911,-18455.10399227418],\"key\":-349},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"2in\",\"from\":362,\"to\":290,\"points\":[-23349.5380859375,-18305,-23339.5380859375,-18305,-23315.337890625,-18305,-23305.337890625,-18305],\"key\":-350},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"2in\",\"from\":303,\"to\":287,\"points\":[-24066.037109375,-18295,-24056.037109375,-18295,-23990.3974609375,-18295,-23980.3974609375,-18295],\"key\":-311},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":359,\"to\":363,\"points\":[-24035.53701769911,-18455.10399227418,-24025.53701769911,-18455.10399227418,-22861.896484375,-18465,-22851.896484375,-18465],\"key\":-312},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":363,\"to\":349,\"points\":[-22609.5380859375,-18465,-22599.5380859375,-18465,-22031.896484375,-18466.591,-22021.896484375,-18466.591],\"key\":-315},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":367,\"to\":364,\"points\":[-22466.037109375,-18325.1,-22456.037109375,-18325.1,-22031.896484375,-18325,-22021.896484375,-18325],\"key\":-317},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":342,\"to\":367,\"points\":[-22619.5380859375,-18305,-22609.5380859375,-18305,-22611.896484375,-18305.1,-22601.896484375,-18305.1],\"key\":-318},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"3out\",\"toPort\":\"1in\",\"from\":367,\"to\":286,\"points\":[-22466.037109375,-18285.1,-22456.037109375,-18285.1,-22410,-18285,-22391.896484375,-18275,-22381.896484375,-18275],\"key\":-321},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"3in\",\"from\":373,\"to\":198,\"points\":[-25369.5380859375,-15807.45,-25359.5380859375,-15807.45,-24284.7998046875,-15810,-24274.7998046875,-15810],\"key\":-234},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":372,\"to\":373,\"points\":[-26019.5380859375,-15810,-26009.5380859375,-15810,-25621.896484375,-15807.45,-25611.896484375,-15807.45],\"key\":-235},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"out\",\"toPort\":\"1in\",\"from\":374,\"to\":375,\"points\":[-25969.5380859375,-15530,-25959.5380859375,-15530,-25931.896484375,-15530,-25921.896484375,-15530],\"key\":-237},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"3out\",\"toPort\":\"1in\",\"from\":375,\"to\":202,\"points\":[-25786.037109375,-15560,-25776.037109375,-15560,-25691.896484375,-16120,-25681.896484375,-16120],\"key\":-238},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":375,\"to\":373,\"points\":[-25786.037109375,-15540,-25776.037109375,-15540,-25621.896484375,-15807.45,-25611.896484375,-15807.45],\"key\":-251},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":376,\"to\":375,\"points\":[-26019.5380859375,-15290,-26009.5380859375,-15290,-25931.896484375,-15530,-25921.896484375,-15530],\"key\":-252},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":377,\"to\":363,\"points\":[-22946.037109375,-18585,-22936.037109375,-18585,-22861.896484375,-18465,-22851.896484375,-18465],\"key\":-259},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":339,\"to\":377,\"points\":[-23109.5380859375,-18575,-23099.5380859375,-18575,-23091.896484375,-18575,-23081.896484375,-18575],\"key\":-261},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"3out\",\"toPort\":\"1in\",\"from\":254,\"to\":196,\"points\":[-22176.037109375,-15790.1,-22166.037109375,-15790.1,-21930,-15790,-21901.896484375,-15780,-21891.896484375,-15780],\"key\":-245},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":379,\"to\":327,\"points\":[-26109.5380859375,-14660,-26099.5380859375,-14660,-25761.896484375,-14660,-25751.896484375,-14660],\"key\":-231},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"out\",\"toPort\":\"1in\",\"from\":380,\"to\":181,\"points\":[-26019.5380859375,-14460,-26009.5380859375,-14460,-25991.896484375,-14450.1,-25981.896484375,-14450.1],\"key\":-167},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":181,\"to\":327,\"points\":[-25846.037109375,-14440.1,-25836.037109375,-14440.1,-25800,-14440,-25800,-14630,-25761.896484375,-14660,-25751.896484375,-14660],\"key\":-168},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":182,\"to\":181,\"points\":[-26119.5380859375,-14260,-26109.5380859375,-14260,-25991.896484375,-14450.1,-25981.896484375,-14450.1],\"key\":-169},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":314,\"to\":189,\"points\":[-24153.3173828125,-14640,-24143.3173828125,-14640,-24121.896484375,-14620.2,-24111.896484375,-14620.2],\"key\":-173},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":327,\"to\":191,\"points\":[-25489.5380859375,-14660,-25479.5380859375,-14660,-25460.3974609375,-14660,-25450.3974609375,-14660],\"key\":-171},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"6out\",\"toPort\":\"2in\",\"from\":181,\"to\":191,\"points\":[-25846.037109375,-14400.1,-25836.037109375,-14400.1,-25500,-14400,-25500,-14640,-25460.3974609375,-14640,-25450.3974609375,-14640],\"key\":-175},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":191,\"to\":325,\"points\":[-25089.5380859375,-14650,-25079.5380859375,-14650,-24981.896484375,-14650.1,-24971.896484375,-14650.1],\"key\":-176},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":189,\"to\":192,\"points\":[-23976.037109375,-14620.2,-23966.037109375,-14620.2,-23900,-14620,-23900,-14470,-23429.3720703125,-14470.300000000001,-23419.3720703125,-14470.300000000001],\"key\":-177},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":268,\"to\":192,\"points\":[-23616.037109375,-14370,-23606.037109375,-14370,-23429.3720703125,-14470.300000000001,-23419.3720703125,-14470.300000000001],\"key\":-178},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":192,\"to\":188,\"points\":[-22993.4208984375,-14500.300000000001,-22983.4208984375,-14500.300000000001,-22971.896484375,-14550,-22961.896484375,-14550],\"key\":-179},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"3out\",\"toPort\":\"2in\",\"from\":181,\"to\":192,\"points\":[-25846.037109375,-14500.1,-25836.037109375,-14500.1,-23429.3720703125,-14490.300000000001,-23419.3720703125,-14490.300000000001],\"key\":-181},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":325,\"to\":306,\"points\":[-24739.5380859375,-14650.1,-24729.5380859375,-14650.1,-24701.896484375,-14650,-24691.896484375,-14650],\"key\":-182},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":205,\"to\":325,\"points\":[-25139.5380859375,-14550,-25129.5380859375,-14550,-25040,-14550,-25040,-14640,-24981.896484375,-14650.1,-24971.896484375,-14650.1],\"key\":-183},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":200,\"to\":247,\"points\":[-22609.5380859375,-15810.1,-22599.5380859375,-15810.1,-22591.896484375,-15810,-22581.896484375,-15810],\"key\":-184},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":193,\"to\":305,\"points\":[-21709.5380859375,-14590.1,-21699.5380859375,-14590.1,-21691.896484375,-14590,-21681.896484375,-14590],\"key\":-185},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":209,\"to\":206,\"points\":[-24336.037109375,-16130,-24326.037109375,-16130,-21491.896484375,-16130,-21481.896484375,-16130],\"key\":-186},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":202,\"to\":209,\"points\":[-24549.5380859375,-16120,-24539.5380859375,-16120,-24481.896484375,-16120,-24471.896484375,-16120],\"key\":-187},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":211,\"to\":210,\"points\":[-26109.5380859375,-14750,-26099.5380859375,-14750,-25761.896484375,-14750.1,-25751.896484375,-14750.1],\"key\":-188},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":181,\"to\":210,\"points\":[-25846.037109375,-14460.1,-25836.037109375,-14460.1,-25810,-14460,-25810,-14740,-25761.896484375,-14750.1,-25751.896484375,-14750.1],\"key\":-189},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"6in\",\"from\":210,\"to\":313,\"points\":[-25489.5380859375,-14750.1,-25479.5380859375,-14750.1,-23500,-14750,-23435.14453125,-14690,-23425.14453125,-14690],\"key\":-190},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":213,\"to\":214,\"points\":[-26109.5380859375,-14840,-26099.5380859375,-14840,-25761.896484375,-14840.1,-25751.896484375,-14840.1],\"key\":-192},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"4out\",\"toPort\":\"1in\",\"from\":181,\"to\":214,\"points\":[-25846.037109375,-14480.1,-25836.037109375,-14480.1,-25820,-14480,-25820,-14830,-25761.896484375,-14840.1,-25751.896484375,-14840.1],\"key\":-193},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"5in\",\"from\":214,\"to\":313,\"points\":[-25489.5380859375,-14840.1,-25479.5380859375,-14840.1,-23550,-14830,-23435.14453125,-14710,-23425.14453125,-14710],\"key\":-194},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":220,\"to\":293,\"points\":[-25849.5380859375,-18365,-25839.5380859375,-18365,-25751.896484375,-18565,-25741.896484375,-18565],\"key\":-196},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":221,\"to\":298,\"points\":[-25849.5380859375,-17955,-25839.5380859375,-17955,-25751.896484375,-18155,-25741.896484375,-18155],\"key\":-197},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":222,\"to\":331,\"points\":[-25859.5380859375,-17545,-25849.5380859375,-17545,-25751.896484375,-17745,-25741.896484375,-17745],\"key\":-198},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":240,\"to\":264,\"points\":[-22396.037109375,-14190,-22386.037109375,-14190,-21491.896484375,-14200,-21481.896484375,-14200],\"key\":-216},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":330,\"to\":268,\"points\":[-23779.5380859375,-14360,-23769.5380859375,-14360,-23761.896484375,-14350,-23751.896484375,-14350],\"key\":-217},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"3out\",\"toPort\":\"1in\",\"from\":268,\"to\":266,\"points\":[-23616.037109375,-14330,-23606.037109375,-14330,-23590,-14330,-23590,-14200,-22881.896484375,-14200,-22871.896484375,-14200],\"key\":-218},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":223,\"to\":335,\"points\":[-25859.5380859375,-17135,-25849.5380859375,-17135,-25751.896484375,-17335,-25741.896484375,-17335],\"key\":-219},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":225,\"to\":351,\"points\":[-25859.5380859375,-16725,-25849.5380859375,-16725,-25751.896484375,-16925,-25741.896484375,-16925],\"key\":-220},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":345,\"to\":381,\"points\":[-22045.9794921875,-18105,-22035.9794921875,-18105,-22031.896484375,-18105,-22021.896484375,-18105],\"key\":-262},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"3out\",\"toPort\":\"1in\",\"from\":303,\"to\":345,\"points\":[-24066.037109375,-18335,-24056.037109375,-18335,-24030,-18335,-24030,-18105,-22428.2275390625,-18105,-22418.2275390625,-18105],\"key\":-263},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"2in\",\"from\":367,\"to\":345,\"points\":[-22466.037109375,-18305.1,-22456.037109375,-18305.1,-22450,-18305,-22450,-18085,-22428.2275390625,-18085,-22418.2275390625,-18085],\"key\":-278},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":347,\"to\":382,\"points\":[-21695.9794921875,-15520,-21685.9794921875,-15520,-21501.896484375,-15520,-21491.896484375,-15520],\"key\":-280},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"4out\",\"toPort\":\"1in\",\"from\":375,\"to\":347,\"points\":[-25786.037109375,-15520,-25776.037109375,-15520,-22078.2275390625,-15520,-22068.2275390625,-15520],\"key\":-287},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"2in\",\"from\":254,\"to\":347,\"points\":[-22176.037109375,-15810.1,-22166.037109375,-15810.1,-22120,-15810,-22120,-15500,-22078.2275390625,-15500,-22068.2275390625,-15500],\"key\":-292},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":355,\"to\":383,\"points\":[-21535.9794921875,-14080.1,-21525.9794921875,-14080.1,-21491.896484375,-14080,-21481.896484375,-14080],\"key\":-293},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"5out\",\"toPort\":\"1in\",\"from\":181,\"to\":355,\"points\":[-25846.037109375,-14420.1,-25836.037109375,-14420.1,-25800,-14420,-25800,-14080,-22020,-14080,-21918.2275390625,-14080.1,-21908.2275390625,-14080.1],\"key\":-294},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"2in\",\"from\":268,\"to\":355,\"points\":[-23616.037109375,-14350,-23606.037109375,-14350,-22010,-14350,-22010,-14060,-21918.2275390625,-14060.1,-21908.2275390625,-14060.1],\"key\":-322},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":263,\"to\":267,\"points\":[-22686.037109375,-14480,-22676.037109375,-14480,-22251.896484375,-14480.1,-22241.896484375,-14480.1],\"key\":-324},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":253,\"to\":256,\"points\":[-21629.5380859375,-13930.1,-21619.5380859375,-13930.1,-21491.896484375,-13930,-21481.896484375,-13930],\"key\":-332},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"4out\",\"toPort\":\"1in\",\"from\":192,\"to\":265,\"points\":[-22993.4208984375,-14480.300000000001,-22983.4208984375,-14480.300000000001,-22900,-14430,-22541.896484375,-14430,-22531.896484375,-14430],\"key\":-333},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":265,\"to\":385,\"points\":[-22229.5380859375,-14430,-22219.5380859375,-14430,-21580,-14430,-21491.896484375,-14390,-21481.896484375,-14390],\"key\":-334},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":267,\"to\":384,\"points\":[-21939.5380859375,-14480.1,-21929.5380859375,-14480.1,-21491.896484375,-14480,-21481.896484375,-14480],\"key\":-327},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":262,\"to\":253,\"points\":[-21889.5380859375,-13930.1,-21879.5380859375,-13930.1,-21871.896484375,-13930.1,-21861.896484375,-13930.1],\"key\":-335},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":306,\"to\":262,\"points\":[-24556.037109375,-14650,-24546.037109375,-14650,-24510,-14650,-24510,-13940,-22260.3974609375,-13940.1,-22250.3974609375,-13940.1],\"key\":-337},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"2in\",\"from\":240,\"to\":262,\"points\":[-22396.037109375,-14210,-22386.037109375,-14210,-22350,-14210,-22350,-13920,-22260.3974609375,-13920.1,-22250.3974609375,-13920.1],\"key\":-338},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":266,\"to\":240,\"points\":[-22559.5380859375,-14200,-22549.5380859375,-14200,-22541.896484375,-14200,-22531.896484375,-14200],\"key\":-353},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"2out\",\"toPort\":\"1in\",\"from\":263,\"to\":242,\"points\":[-22686.037109375,-14460,-22676.037109375,-14460,-22650,-14460,-22650,-14400,-23450,-14400,-23450,-14300,-23401.3583984375,-14300,-23391.3583984375,-14300],\"key\":-354},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"1out\",\"toPort\":\"1in\",\"from\":242,\"to\":266,\"points\":[-23029.193359375,-14310,-23019.193359375,-14310,-22881.896484375,-14200,-22871.896484375,-14200],\"key\":-355},\n{\"category\":\"DataFlow_Standard\",\"fromPort\":\"3out\",\"toPort\":\"1in\",\"from\":192,\"to\":263,\"points\":[-22993.4208984375,-14460.300000000001,-22983.4208984375,-14460.300000000001,-22831.896484375,-14470,-22821.896484375,-14470],\"key\":-363}\n]}"
}
///////////////////////////
);
}
